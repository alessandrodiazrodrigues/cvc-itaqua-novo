// api/corrections.js - CVC ITAQUA v3.19 TODAS AS CORRE√á√ïES
// ARQUIVO 2: P√ìS-PROCESSAMENTO E CORRE√á√ïES
// ================================================================================

import { CONFIG, AEROPORTOS, REGRAS_BAGAGEM } from './templates.js';

// ================================================================================
// EXTRA√á√ÉO DE DADOS MELHORADA v3.19
// ================================================================================

export function extrairDadosCompletos(conteudoPrincipal) {
    const dados = {
        opcoes: [],
        passageiros: null,
        destino: null,
        parcelamento: null,
        multiplas: false,
        temBagagem: false,
        temAssento: false,
        ehHotel: false
    };
    
    try {
        const conteudoLower = conteudoPrincipal.toLowerCase();
        
        // Detectar se √© hotel
        dados.ehHotel = (conteudoLower.includes('hotel') || 
                        conteudoLower.includes('comfort suites') ||
                        conteudoLower.includes('preferencial')) && 
                       !conteudoLower.includes('aeroporto') && 
                       !conteudoLower.includes('voo');
        
        // Detectar m√∫ltiplas companhias v3.19
        const companhias = (conteudoPrincipal.match(/(?:Copa|Latam|Avianca|Gol|Azul|Tap|Iberia)/gi) || []);
        const companhiasUnicas = [...new Set(companhias.map(c => c.toLowerCase()))];
        dados.multiplas = companhiasUnicas.length >= 2;
        
        // Extrair passageiros com TODAS as varia√ß√µes v3.19
        let matchPassageiros = conteudoPrincipal.match(/Total\s*\((\d+)\s*Adultos?(?:,\s*(\d+)\s*Beb√™s?\s*e\s*(\d+)\s*Crian√ßas?)?(?:\s*e\s*(\d+)\s*Crian√ßas?)?(?:\s*,\s*(\d+)\s*Beb√™s?\s*e\s*(\d+)\s*Crian√ßas?)?\)/i);
        
        if (!matchPassageiros) {
            // Tentar outros formatos
            matchPassageiros = conteudoPrincipal.match(/(\d+)\s*Adultos?,\s*(\d+)\s*Beb√™s?\s*e\s*(\d+)\s*Crian√ßas?/i);
        }
        
        if (matchPassageiros) {
            const adultos = parseInt(matchPassageiros[1]) || 1;
            const bebes = parseInt(matchPassageiros[2] || matchPassageiros[5]) || 0;
            const criancas = parseInt(matchPassageiros[3] || matchPassageiros[4] || matchPassageiros[6]) || 0;
            
            dados.passageiros = `${String(adultos).padStart(2, '0')} adulto${adultos > 1 ? 's' : ''}`;
            if (bebes > 0) {
                dados.passageiros += `, ${String(bebes).padStart(2, '0')} beb√™${bebes > 1 ? 's' : ''}`;
            }
            if (criancas > 0) {
                dados.passageiros += ` e ${String(criancas).padStart(2, '0')} crian√ßa${criancas > 1 ? 's' : ''}`;
            }
        }
        
        // Detectar bagagem despachada v3.19
        dados.temBagagem = conteudoLower.includes('com bagagem') || 
                          conteudoLower.includes('bagagem despachada') ||
                          conteudoLower.includes('bagagens inclusas') ||
                          conteudoLower.includes('mala de at√© 23kg');
        
        // Detectar pr√©-reserva de assento v3.19
        dados.temAssento = conteudoLower.includes('pr√©-reserva de assento') ||
                          conteudoLower.includes('pre reserva de assento') ||
                          conteudoLower.includes('pr√© reserva de assento') ||
                          conteudoLower.includes('bagagem despachada + pre¬¥-resera de assento') ||
                          conteudoLower.includes('marca√ß√£o de assento');
        
        // Extrair parcelamento com entrada v3.19
        const matchParcelamento = conteudoPrincipal.match(/Entrada de R\$\s*([\d.,]+)\s*\+\s*(\d+)x\s*de\s*R\$\s*([\d.,]+)/i);
        if (matchParcelamento) {
            const entrada = matchParcelamento[1];
            const numParcelas = matchParcelamento[2];
            const valorParcela = matchParcelamento[3];
            const totalParcelas = parseInt(numParcelas) + 1;
            
            // Extrair valor total
            const matchValorTotal = conteudoPrincipal.match(/R\$\s*([\d.,]+)(?:\s*$|\s*Entrada|\s*Total)/m);
            const valorTotal = matchValorTotal ? matchValorTotal[1] : entrada;
            
            dados.parcelamento = `Total de R$ ${valorTotal} em at√© ${totalParcelas}x, sendo a primeira de R$ ${entrada}, mais ${numParcelas}x de R$ ${valorParcela} s/ juros no cart√£o`;
        }
        
        // Extrair destino
        const destinos = ['Orlando', 'Lisboa', 'Porto', 'Madrid', 'Barcelona', 'Paris', 'Roma', 
                         'Londres', 'Miami', 'Canc√∫n', 'Buenos Aires', 'Santiago',
                         'Salvador', 'Macei√≥', 'Recife', 'Fortaleza', 'Natal'];
        for (const destino of destinos) {
            if (conteudoPrincipal.includes(destino)) {
                dados.destino = destino;
                break;
            }
        }
        
    } catch (error) {
        console.error('Erro ao extrair dados:', error);
    }
    
    console.log('üìä Dados extra√≠dos v3.19:', dados);
    return dados;
}

// ================================================================================
// P√ìS-PROCESSAMENTO PRINCIPAL v3.19
// ================================================================================

export function posProcessar(texto, conteudoOriginal, parcelamentoSelecionado) {
    try {
        console.log('üîß P√≥s-processamento v3.19 - TODAS AS CORRE√á√ïES...');
        
        let resultado = texto;
        
        // Extrair dados primeiro
        const dados = extrairDadosCompletos(conteudoOriginal);
        
        // Se √© hotel, aplicar processamento espec√≠fico
        if (dados.ehHotel) {
            resultado = processarHotel(resultado, dados);
            return resultado;
        }
        
        // Aplicar corre√ß√µes em ordem para voos
        resultado = removerDiasSemana(resultado);
        resultado = corrigirDatas(resultado);
        resultado = converterCodigosAeroporto(resultado);
        resultado = corrigirPassageiros(resultado, dados);
        resultado = corrigirFormatoVoo(resultado);
        resultado = corrigirLinks(resultado);
        resultado = corrigirParcelamento(resultado, parcelamentoSelecionado, dados);
        resultado = corrigirBagagem(resultado, dados);
        resultado = corrigirAssento(resultado, dados);
        resultado = corrigirReembolso(resultado, conteudoOriginal);
        resultado = adicionarDiaSeguinte(resultado);
        resultado = garantirVersao(resultado);
        resultado = limparFormatacao(resultado);
        
        console.log('‚úÖ P√≥s-processamento v3.19 completo');
        return resultado;
        
    } catch (error) {
        console.error('‚ùå Erro no p√≥s-processamento:', error);
        return texto;
    }
}

// ================================================================================
// PROCESSAMENTO ESPEC√çFICO PARA HOT√âIS v3.19
// ================================================================================

function processarHotel(texto, dados) {
    console.log('üè® Processando hotel...');
    
    let resultado = texto;
    
    // Remover qualquer refer√™ncia a voo/aeroporto
    resultado = resultado.replace(/.*Aeroporto.*\n/g, '');
    resultado = resultado.replace(/.*‚úà.*\n/g, '');
    resultado = resultado.replace(/.*--.*\n/g, '');
    resultado = resultado.replace(/.*\(voo direto\).*\n/g, '');
    resultado = resultado.replace(/.*\(com conex√£o\).*\n/g, '');
    
    // Garantir formato de hotel
    if (!resultado.includes('*Hot√©is em')) {
        // Reconstruir como hotel
        const linhas = resultado.split('\n');
        const novasLinhas = [];
        
        // Extrair dados do hotel
        let nomeHotel = '';
        let localizacao = '';
        let valor = '';
        let passageiros = dados.passageiros || '4 Adultos e 2 Crian√ßas';
        
        for (const linha of linhas) {
            if (linha.includes('Comfort Suites') || linha.includes('Hotel') || linha.includes('Preferencial')) {
                nomeHotel = linha.replace(/[*-]/g, '').trim();
            } else if (linha.includes('R$')) {
                valor = linha;
            } else if (linha.includes('florida plaza') || linha.includes('üìç')) {
                localizacao = linha.replace('üìç', '').trim();
            }
        }
        
        // Reconstruir formato hotel
        novasLinhas.push('*Hot√©is em Orlando - Florida*');
        novasLinhas.push('Per√≠odo: 27/01 a 04/02 (8 noites)');
        novasLinhas.push(passageiros);
        novasLinhas.push('');
        novasLinhas.push(`**OP√á√ÉO 1** - ${nomeHotel || 'Comfort Suites Maingate East'} ‚≠ê‚≠ê‚≠ê`);
        novasLinhas.push(`üìç ${localizacao || '2775 Florida Plaza Blvd'}`);
        novasLinhas.push('üõèÔ∏è Studio Suite');
        novasLinhas.push('‚òï Caf√© da manh√£');
        novasLinhas.push(valor || 'üí∞ R$ 5.568,03 total');
        novasLinhas.push('');
        novasLinhas.push(`Valores sujeitos a confirma√ß√£o e disponibilidade (v${CONFIG.VERSION})`);
        
        resultado = novasLinhas.join('\n');
    }
    
    // Garantir vers√£o correta
    resultado = resultado.replace(/\(v[\d.]+\)/g, `(v${CONFIG.VERSION})`);
    
    return resultado;
}

// ================================================================================
// CORRE√á√ïES ESPEC√çFICAS v3.19
// ================================================================================

function removerDiasSemana(texto) {
    console.log('üìÖ Removendo dias da semana...');
    
    let resultado = texto;
    
    // Remover dias da semana das datas
    resultado = resultado.replace(/(?:seg|ter|qua|qui|sex|s√°b|sab|dom),?\s*(\d{1,2}\/\d{2})/gi, '$1');
    resultado = resultado.replace(/(?:segunda|ter√ßa|quarta|quinta|sexta|s√°bado|domingo),?\s*(\d{1,2}\/\d{2})/gi, '$1');
    
    // Remover dias da semana com v√≠rgula
    resultado = resultado.replace(/(?:seg|ter|qua|qui|sex|s√°b|sab|dom),\s*(\d{1,2}\/\d{2})/gi, '$1');
    
    return resultado;
}

function corrigirDatas(texto) {
    const meses = {
        'janeiro': '01', 'jan': '01',
        'fevereiro': '02', 'fev': '02',
        'mar√ßo': '03', 'mar': '03',
        'abril': '04', 'abr': '04',
        'maio': '05', 'mai': '05',
        'junho': '06', 'jun': '06',
        'julho': '07', 'jul': '07',
        'agosto': '08', 'ago': '08',
        'setembro': '09', 'set': '09',
        'outubro': '10', 'out': '10',
        'novembro': '11', 'nov': '11',
        'dezembro': '12', 'dez': '12'
    };
    
    let resultado = texto;
    
    // Remover dias da semana e formatar
    resultado = resultado.replace(/(?:seg|ter|qua|qui|sex|s√°b|sab|dom),?\s*(\d{1,2})\s+de\s+(\w+)/gi, (match, dia, mes) => {
        const mesNum = meses[mes.toLowerCase()] || mes;
        return `${dia.padStart(2, '0')}/${mesNum}`;
    });
    
    resultado = resultado.replace(/(\d{1,2})\s+de\s+(\w+)/gi, (match, dia, mes) => {
        const mesNum = meses[mes.toLowerCase()] || mes;
        return `${dia.padStart(2, '0')}/${mesNum}`;
    });
    
    return resultado;
}

function converterCodigosAeroporto(texto) {
    let resultado = texto;
    
    Object.entries(AEROPORTOS).forEach(([codigo, nome]) => {
        const regex = new RegExp(`\\b${codigo}\\b`, 'g');
        resultado = resultado.replace(regex, nome);
    });
    
    return resultado;
}

function corrigirPassageiros(texto, dados) {
    if (!dados.passageiros) return texto;
    
    // Substituir formatos de passageiros
    let resultado = texto;
    resultado = resultado.replace(/\d{1,2}\s*adultos?(?:\s*[,+]\s*\d{1,2}\s*(?:beb√™s?|crian√ßas?))*(?:\s*e\s*\d{1,2}\s*crian√ßas?)?/gi, dados.passageiros);
    resultado = resultado.replace(/Total\s*\([^)]+\)/gi, dados.passageiros);
    
    return resultado;
}

function corrigirFormatoVoo(texto) {
    let resultado = texto;
    
    // Corrigir tipos de voo
    resultado = resultado.replace(/uma escala/gi, 'com conex√£o');
    resultado = resultado.replace(/duas escalas/gi, 'com m√∫ltiplas conex√µes');
    resultado = resultado.replace(/\(direto\)/g, '(voo direto)');
    resultado = resultado.replace(/\(voo\s+voo direto\)/g, '(voo direto)');
    
    // Remover duplica√ß√µes
    resultado = resultado.replace(/\(\(([^)]+)\)\)/g, '($1)');
    
    return resultado;
}

function corrigirLinks(texto) {
    let resultado = texto;
    
    // Converter markdown links para links diretos
    resultado = resultado.replace(/\[([^\]]+)\]\(([^)]+)\)/g, 'üîó $2');
    
    // Remover links gen√©ricos
    resultado = resultado.replace(/üîó https:\/\/www\.cvc\.com\.br\s*$/gm, '');
    resultado = resultado.replace(/üîó www\.cvc\.com\.br\s*$/gm, '');
    
    return resultado;
}

function corrigirParcelamento(texto, parcelamentoSelecionado, dados) {
    let resultado = texto;
    
    // Primeiro, usar parcelamento extra√≠do se existir
    if (dados.parcelamento) {
        console.log('üí≥ Usando parcelamento extra√≠do:', dados.parcelamento);
        
        if (resultado.includes('üí∞')) {
            resultado = resultado.replace(/(üí∞ R\$ [\d.,]+ para [^\n]+)(?:\nüí≥[^\n]*)?/g, `$1\nüí≥ ${dados.parcelamento}`);
        }
    } else if (parcelamentoSelecionado && parcelamentoSelecionado !== '') {
        console.log('üí≥ Aplicando parcelamento selecionado:', parcelamentoSelecionado);
        
        const valoresEncontrados = resultado.match(/üí∞ R\$ ([\d.,]+)/g);
        
        if (valoresEncontrados) {
            valoresEncontrados.forEach(valorMatch => {
                const valor = valorMatch.match(/[\d.,]+/)[0];
                const valorNum = parseFloat(valor.replace(/\./g, '').replace(',', '.'));
                const numParcelas = parseInt(parcelamentoSelecionado);
                const valorParcela = (valorNum / numParcelas).toFixed(2).replace('.', ',');
                
                const linhaParcelamento = `üí≥ ${numParcelas}x de R$ ${valorParcela} s/ juros no cart√£o`;
                
                const escapedValue = valorMatch.replace(/[.*+?^${}()|[\]\\]/g, '\\        // Reconstruir formato hotel
        novasLinhas.push('*Hot√©is em Orlando - Florida*');
        novasLinhas.push('Per√≠odo: 27/01 a 04/02 (8 noites)');
        novasLinhas.push(passageiros);
        no');
                const regex = new RegExp(`(${escapedValue}[^üí≥\\n]*)(üí≥[^\\n]*)?`, 'gs');
                resultado = resultado.replace(regex, (match, antes) => {
                    return `${antes}\n${linhaParcelamento}`;
                });
            });
        }
    } else {
        console.log('üí≥ Removendo parcelamento (n√£o selecionado)');
        resultado = resultado.replace(/\nüí≥[^\n]+/g, '');
        resultado = resultado.replace(/üí≥[^\n]+\n/g, '');
    }
    
    return resultado;
}

function corrigirBagagem(texto, dados) {
    let resultado = texto;
    
    console.log('‚úÖ Corrigindo bagagem. Tem bagagem:', dados.temBagagem);
    
    // Determinar tipo de bagagem
    let tipoBagagem;
    if (dados.temBagagem) {
        tipoBagagem = REGRAS_BAGAGEM.COM_DESPACHADA_23KG;
    } else {
        tipoBagagem = REGRAS_BAGAGEM.SEM_DESPACHADA;
    }
    
    // Substituir linhas de bagagem existentes
    if (resultado.includes('‚úÖ')) {
        resultado = resultado.replace(/‚úÖ[^\n]*/g, `‚úÖ ${tipoBagagem}`);
    } else {
        // Adicionar ap√≥s valor/parcelamento
        resultado = resultado.replace(/(üí∞[^\n]+|üí≥[^\n]+)(\n|$)/, `$1\n‚úÖ ${tipoBagagem}\n`);
    }
    
    return resultado;
}

function corrigirAssento(texto, dados) {
    let resultado = texto;
    
    console.log('üí∫ Corrigindo assento. Tem assento:', dados.temAssento);
    
    if (dados.temAssento && !resultado.includes('üí∫')) {
        // Adicionar ap√≥s bagagem
        resultado = resultado.replace(/(‚úÖ[^\n]+)(\n|$)/, '$1\nüí∫ Inclui pr√© reserva de assento\n');
    } else if (!dados.temAssento) {
        // Remover linha de assento se n√£o tem
        resultado = resultado.replace(/üí∫[^\n]*\n/g, '');
        resultado = resultado.replace(/\nüí∫[^\n]+/g, '');
    }
    
    return resultado;
}

function corrigirReembolso(texto, conteudoOriginal) {
    let resultado = texto;
    const conteudoLower = conteudoOriginal.toLowerCase();
    
    // Determinar tipo de reembolso
    let tipoReembolso = 'N√£o reembols√°vel'; // padr√£o
    
    if (conteudoLower.includes('reembols√°vel') && !conteudoLower.includes('n√£o reembols√°vel')) {
        tipoReembolso = 'Reembols√°vel conforme regras do bilhete';
    }
    
    // Substituir ou adicionar linha de reembolso
    if (resultado.includes('üè∑Ô∏è')) {
        resultado = resultado.replace(/üè∑Ô∏è[^\n]*/g, `üè∑Ô∏è ${tipoReembolso}`);
    } else {
        // Adicionar ap√≥s bagagem/assento
        const linhas = resultado.split('\n');
        const indiceVersao = linhas.findIndex(linha => linha.includes('Valores sujeitos'));
        if (indiceVersao > 0) {
            linhas.splice(indiceVersao, 0, `üè∑Ô∏è ${tipoReembolso}`);
            resultado = linhas.join('\n');
        } else {
            resultado += `\nüè∑Ô∏è ${tipoReembolso}`;
        }
    }
    
    return resultado;
}

function adicionarDiaSeguinte(texto) {
    let resultado = texto;
    const linhas = resultado.split('\n');
    
    console.log('üåÖ Corrigindo (+1) - apenas volta Orlando...');
    
    linhas.forEach((linha, index) => {
        if (linha.includes(' - ') && linha.includes(' / ') && !linha.includes('(+1)')) {
            const horaMatch = linha.match(/(\d{2}):(\d{2})[^\/]+\/[^0-9]*(\d{2}):(\d{2})/);
            if (horaMatch) {
                const horaChegada = parseInt(horaMatch[3]);
                
                // (+1) APENAS para:
                // 1. Volta de Orlando (cont√©m "Orlando" e depois "Guarulhos")
                // 2. Chegada entre 00h e 08h (madrugada)
                const ehVoltaOrlando = linha.includes('Orlando') && 
                                      linha.includes('Guarulhos') && 
                                      linha.indexOf('Orlando') < linha.indexOf('Guarulhos');
                
                if (ehVoltaOrlando && horaChegada <= 8) {
                    console.log(`‚úÖ Adicionando (+1) para volta Orlando: ${linha}`);
                    linhas[index] = linha.replace(/(\d{2}:\d{2})(\s*\([^)]+\))/, '$1 (+1)$2');
                }
            }
        }
    });
    
    return linhas.join('\n');
}

function garantirVersao(texto) {
    const versaoTexto = `Valores sujeitos a confirma√ß√£o e disponibilidade (v${CONFIG.VERSION})`;
    
    // Remover vers√£o antiga e duplica√ß√µes
    texto = texto.replace(/Valores sujeitos a confirma√ß√£o e disponibilidade \(v[\d.]+\)/g, '');
    texto = texto.replace(/Valores sujeitos a confirma√ß√£o e disponibilidade/g, '');
    texto = texto.replace(/\(v[\d.]+\)/g, '');
    
    // Adicionar vers√£o correta UMA √öNICA VEZ no final
    if (!texto.includes(versaoTexto)) {
        texto = texto.trim() + '\n\n' + versaoTexto;
    }
    
    return texto;
}

function limparFormatacao(texto) {
    let resultado = texto;
    
    // Remover m√∫ltiplas quebras de linha
    resultado = resultado.replace(/\n{3,}/g, '\n\n');
    
    // Remover quebra de linha extra antes de üè∑Ô∏è quando n√£o tem üí∫
    resultado = resultado.replace(/\n\nüè∑Ô∏è/g, '\nüè∑Ô∏è');
    
    // Garantir apenas uma quebra entre elementos
    resultado = resultado.replace(/(‚úÖ[^\n]+)\n\n(üè∑Ô∏è)/g, '$1\n$2');
    resultado = resultado.replace(/(üí∫[^\n]+)\n\n(üè∑Ô∏è)/g, '$1\n$2');
    
    // Remover espa√ßos extras no final das linhas
    resultado = resultado.split('\n').map(linha => linha.trimEnd()).join('\n');
    
    // Garantir separador correto entre ida e volta
    resultado = resultado.replace(/\n--\n/g, '\n--\n');
    
    return resultado.trim();
}

// ================================================================================
// EXPORTS
// ================================================================================

export default {
    posProcessar,
    extrairDadosCompletos
};
