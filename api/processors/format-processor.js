// api/processors/format-processor.js - PROCESSADOR DE FORMATA√á√ÉO FINAL v4.0
// ================================================================================
// üîß FORMATA√á√ÉO FINAL, VERS√ÉO E LIMPEZA GERAL
// üéØ Regra: (+1) apenas volta Orlando ‚â§ 08h | Vers√£o v4.0 | Limpeza final
// ================================================================================

import { SYSTEM_CONFIG } from '../data/constants.js';

// ================================================================================
// üîß PROCESSADOR PRINCIPAL DE FORMATA√á√ÉO
// ================================================================================

/**
 * Aplica formata√ß√£o final, (+1), vers√£o e limpeza geral
 * @param {string} texto - Texto a ser formatado
 * @param {Object} dadosExtraidos - Dados extra√≠dos do or√ßamento
 * @returns {string} Texto com formata√ß√£o final
 */
export function processarFormatacaoFinal(texto, dadosExtraidos = {}) {
    if (!texto || typeof texto !== 'string') {
        console.warn('‚ö†Ô∏è Format Processor: Texto inv√°lido recebido');
        return texto || '';
    }
    
    console.log('üîß Iniciando formata√ß√£o final...');
    
    let resultado = texto;
    let processamentos = 0;
    
    try {
        // 1. APLICAR REGRA (+1) PARA VOLTA ORLANDO
        resultado = aplicarMaisDiaOrlando(resultado);
        processamentos++;
        
        // 2. CORRIGIR REEMBOLSO
        resultado = corrigirReembolso(resultado, dadosExtraidos);
        processamentos++;
        
        // 3. LIMPAR LINKS E FORMATA√á√ÉO
        resultado = limparLinksEFormatacao(resultado);
        processamentos++;
        
        // 4. GARANTIR VERS√ÉO CORRETA
        resultado = garantirVersaoCorreta(resultado);
        processamentos++;
        
        // 5. LIMPEZA FINAL E ESPA√áAMENTOS
        resultado = limpezaFinal(resultado);
        processamentos++;
        
        console.log(`‚úÖ Format Processor: ${processamentos} etapas conclu√≠das`);
        
        return resultado;
        
    } catch (error) {
        console.error('‚ùå Format Processor: Erro no processamento:', error);
        return texto; // Retorna original em caso de erro
    }
}

// ================================================================================
// üåÖ APLICA√á√ÉO DE (+1) PARA VOLTA ORLANDO
// ================================================================================

function aplicarMaisDiaOrlando(texto) {
    let resultado = texto;
    
    console.log('üåÖ Verificando regra (+1) para volta Orlando...');
    
    const linhas = resultado.split('\n');
    let aplicacoes = 0;
    
    for (let i = 0; i < linhas.length; i++) {
        const linha = linhas[i];
        
        // Verificar se √© linha de voo (tem formato: origem - hora / destino - hora)
        if (linha.includes(' - ') && linha.includes(' / ') && !linha.includes('(+1)')) {
            const match = linha.match(/(\d{2}):(\d{2})[^\/]+\/[^0-9]*(\d{2}):(\d{2})/);
            
            if (match) {
                const horaChegada = parseInt(match[3]);
                
                // REGRA ESPEC√çFICA: (+1) APENAS para volta de Orlando
                const ehVoltaOrlando = linha.includes('Orlando') && 
                                      linha.includes('Guarulhos') && 
                                      linha.indexOf('Orlando') < linha.indexOf('Guarulhos');
                
                // E chegada entre 00h e 08h (madrugada)
                if (ehVoltaOrlando && horaChegada <= 8) {
                    console.log(`üåÖ Aplicando (+1) para volta Orlando: ${linha.substring(0, 50)}...`);
                    
                    // Aplicar (+1) no hor√°rio de chegada, antes dos par√™nteses se existirem
                    linhas[i] = linha.replace(/(\d{2}:\d{2})(\s*\([^)]+\))?$/, '$1 (+1)$2');
                    aplicacoes++;
                }
            }
        }
    }
    
    if (aplicacoes > 0) {
        console.log(`üåÖ (+1) aplicado em ${aplicacoes} linha(s)`);
    } else {
        console.log('üåÖ Nenhuma volta Orlando ‚â§ 08h encontrada');
    }
    
    return linhas.join('\n');
}

// ================================================================================
// üè∑Ô∏è CORRE√á√ÉO DE REEMBOLSO
// ================================================================================

function corrigirReembolso(texto, dadosExtraidos) {
    let resultado = texto;
    
    console.log('üè∑Ô∏è Corrigindo informa√ß√µes de reembolso...');
    
    // Determinar tipo de reembolso baseado no conte√∫do
    let tipoReembolso = 'N√£o reembols√°vel'; // padr√£o
    
    const textoLower = texto.toLowerCase();
    
    // Detectar se √© reembols√°vel
    if (textoLower.includes('reembols√°vel') && !textoLower.includes('n√£o reembols√°vel')) {
        tipoReembolso = 'Reembols√°vel conforme regras do bilhete';
    }
    
    // Detectar preferencial (geralmente √© reembols√°vel)
    if (textoLower.includes('preferencial')) {
        tipoReembolso = 'Reembols√°vel conforme regras do bilhete';
    }
    
    // Aplicar ou substituir linha de reembolso
    const linhas = resultado.split('\n');
    let reembolsoAplicado = false;
    
    // Procurar linha existente de reembolso
    for (let i = 0; i < linhas.length; i++) {
        if (linhas[i].includes('üè∑Ô∏è')) {
            linhas[i] = `üè∑Ô∏è ${tipoReembolso}`;
            reembolsoAplicado = true;
            console.log('üè∑Ô∏è Linha de reembolso substitu√≠da');
            break;
        }
    }
    
    // Se n√£o encontrou, adicionar antes da vers√£o
    if (!reembolsoAplicado) {
        const indiceVersao = linhas.findIndex(linha => linha.includes('Valores sujeitos'));
        if (indiceVersao > 0) {
            linhas.splice(indiceVersao, 0, `üè∑Ô∏è ${tipoReembolso}`);
            console.log('üè∑Ô∏è Linha de reembolso adicionada');
        } else {
            // Adicionar antes do final
            linhas.splice(-1, 0, `üè∑Ô∏è ${tipoReembolso}`);
            console.log('üè∑Ô∏è Linha de reembolso adicionada ao final');
        }
    }
    
    return linhas.join('\n');
}

// ================================================================================
// üîó LIMPEZA DE LINKS E FORMATA√á√ÉO
// ================================================================================

function limparLinksEFormatacao(texto) {
    let resultado = texto;
    
    console.log('üîó Limpando links e formata√ß√£o...');
    
    // 1. CONVERTER MARKDOWN LINKS PARA LINKS DIRETOS
    resultado = resultado.replace(/\[([^\]]+)\]\(([^)]+)\)/g, 'üîó $2');
    
    // 2. REMOVER LINKS GEN√âRICOS DA CVC
    const linksGenericos = [
        /üîó https:\/\/www\.cvc\.com\.br\s*$/gm,
        /üîó www\.cvc\.com\.br\s*$/gm,
        /üîó cvc\.com\.br\s*$/gm
    ];
    
    for (const linkGenerico of linksGenericos) {
        resultado = resultado.replace(linkGenerico, '');
    }
    
    // 3. LIMPAR FORMATA√á√ÉO MARKDOWN RESIDUAL
    resultado = resultado.replace(/```[\w]*\n?/g, '').replace(/```/g, '');
    resultado = resultado.replace(/\*\*\*([^*]+)\*\*\*/g, '$1'); // Bold + italic
    resultado = resultado.replace(/~~([^~]+)~~/g, '$1'); // Strikethrough
    
    // 4. REMOVER DUPLICA√á√ïES DE PAR√äNTESES
    resultado = resultado.replace(/\(\(([^)]+)\)\)/g, '($1)');
    
    // 5. CORRIGIR TIPOS DE VOO DUPLICADOS
    resultado = resultado.replace(/\(voo\s+voo direto\)/g, '(voo direto)');
    resultado = resultado.replace(/\(direto\)/g, '(voo direto)');
    
    return resultado;
}

// ================================================================================
// üìå GARANTIR VERS√ÉO CORRETA
// ================================================================================

function garantirVersaoCorreta(texto) {
    const versaoCorreta = `Valores sujeitos a confirma√ß√£o e disponibilidade (v${SYSTEM_CONFIG.VERSION})`;
    
    console.log(`üìå Garantindo vers√£o ${SYSTEM_CONFIG.VERSION}...`);
    
    let resultado = texto;
    
    // Remover todas as vers√µes antigas e duplica√ß√µes
    resultado = resultado.replace(/Valores sujeitos a confirma√ß√£o e disponibilidade \(v[\d.]+\)/g, '');
    resultado = resultado.replace(/Valores sujeitos a confirma√ß√£o e disponibilidade/g, '');
    resultado = resultado.replace(/\(v[\d.]+\)/g, '');
    
    // Remover linhas vazias extras criadas pela remo√ß√£o
    resultado = resultado.replace(/\n\s*\n\s*\n/g, '\n\n');
    
    // Adicionar vers√£o correta UMA √öNICA VEZ no final
    if (!resultado.includes(versaoCorreta)) {
        resultado = resultado.trim() + '\n\n' + versaoCorreta;
        console.log(`üìå Vers√£o ${SYSTEM_CONFIG.VERSION} adicionada`);
    }
    
    return resultado;
}

// ================================================================================
// üßπ LIMPEZA FINAL
// ================================================================================

function limpezaFinal(texto) {
    let resultado = texto;
    
    console.log('üßπ Aplicando limpeza final...');
    
    // 1. CORRIGIR ESPA√áAMENTOS ENTRE ELEMENTOS
    // Garantir uma linha entre se√ß√µes principais
    resultado = resultado.replace(/(üí∞[^\n]+)\n(‚úÖ)/g, '$1\n$2');
    resultado = resultado.replace(/(üí≥[^\n]+)\n(‚úÖ)/g, '$1\n$2');
    resultado = resultado.replace(/(‚úÖ[^\n]+)\n(üè∑Ô∏è)/g, '$1\n$2');
    resultado = resultado.replace(/(üí∫[^\n]+)\n(üè∑Ô∏è)/g, '$1\n$2');
    
    // 2. REMOVER M√öLTIPLAS QUEBRAS DE LINHA
    resultado = resultado.replace(/\n{3,}/g, '\n\n');
    
    // 3. REMOVER ESPA√áOS NO IN√çCIO E FIM DAS LINHAS
    const linhas = resultado.split('\n');
    const linhasLimpas = linhas.map(linha => linha.trimEnd());
    resultado = linhasLimpas.join('\n');
    
    // 4. GARANTIR SEPARADOR CORRETO ENTRE IDA E VOLTA
    resultado = resultado.replace(/\n--\n/g, '\n--\n');
    resultado = resultado.replace(/--\s*\n\s*--/g, '--');
    
    // 5. CORRIGIR EMOJIS COM ESPA√áAMENTO
    resultado = resultado.replace(/üí∞\s{2,}/g, 'üí∞ ');
    resultado = resultado.replace(/üí≥\s{2,}/g, 'üí≥ ');
    resultado = resultado.replace(/‚úÖ\s{2,}/g, '‚úÖ ');
    resultado = resultado.replace(/üè∑Ô∏è\s{2,}/g, 'üè∑Ô∏è ');
    resultado = resultado.replace(/üí∫\s{2,}/g, 'üí∫ ');
    
    // 6. LIMPAR FINAL DO TEXTO
    resultado = resultado.trim();
    
    return resultado;
}

// ================================================================================
// üìä VALIDA√á√ÉO FINAL
// ================================================================================

/**
 * Valida a estrutura final do or√ßamento
 * @param {string} texto - Texto para validar
 * @returns {Object} Resultado da valida√ß√£o
 */
export function validarEstrutura(texto) {
    const validacao = {
        valido: true,
        avisos: [],
        erros: [],
        elementos: {
            titulo: false,
            valor: false,
            versao: false
        }
    };
    
    try {
        // Verificar elementos essenciais
        validacao.elementos.titulo = /\*[^*]+\*/m.test(texto);
        validacao.elementos.valor = /üí∞.*R\$/.test(texto);
        validacao.elementos.versao = texto.includes(`(v${SYSTEM_CONFIG.VERSION})`);
        
        // Verificar problemas comuns
        if (!validacao.elementos.titulo) {
            validacao.erros.push('T√≠tulo em negrito n√£o encontrado');
            validacao.valido = false;
        }
        
        if (!validacao.elementos.valor) {
            validacao.erros.push('Valor principal n√£o encontrado');
            validacao.valido = false;
        }
        
        if (!validacao.elementos.versao) {
            validacao.avisos.push('Vers√£o incorreta ou ausente');
        }
        
        // Verificar (+1) desnecess√°rios
        const maisUmLinhas = texto.match(/\(+1\)/g);
        if (maisUmLinhas && maisUmLinhas.length > 1) {
            validacao.avisos.push('M√∫ltiplos (+1) encontrados - verificar se correto');
        }
        
        // Verificar linhas duplicadas
        const linhas = texto.split('\n').filter(l => l.trim());
        const linhasUnicas = [...new Set(linhas)];
        if (linhas.length !== linhasUnicas.length) {
            validacao.avisos.push('Poss√≠veis linhas duplicadas detectadas');
        }
        
    } catch (error) {
        validacao.erros.push('Erro na valida√ß√£o da estrutura');
        validacao.valido = false;
    }
    
    return validacao;
}

/**
 * Gera estat√≠sticas do texto processado
 * @param {string} texto - Texto para analisar
 * @returns {Object} Estat√≠sticas do texto
 */
export function gerarEstatisticas(texto) {
    if (!texto) return null;
    
    return {
        caracteres: texto.length,
        linhas: texto.split('\n').length,
        palavras: texto.split(' ').length,
        temTitulo: /\*[^*]+\*/m.test(texto),
        temValor: /üí∞.*R\$/.test(texto),
        temParcelamento: /üí≥/.test(texto),
        temBagagem: /‚úÖ/.test(texto),
        temReembolso: /üè∑Ô∏è/.test(texto),
        temVersao: texto.includes(`v${SYSTEM_CONFIG.VERSION}`),
        temMaisUm: /\(+1\)/.test(texto)
    };
}

// ================================================================================
// üì§ EXPORTS
// ================================================================================

export default {
    processarFormatacaoFinal,
    validarEstrutura,
    gerarEstatisticas
};

// ================================================================================
// üìã LOG DE INICIALIZA√á√ÉO
// ================================================================================

console.log(`‚úÖ Format Processor v${SYSTEM_CONFIG.VERSION} carregado`);
console.log('üîß Funcionalidades: (+1) Orlando, reembolso, links, vers√£o, limpeza');
