// api/processors/baggage-processor.js - PROCESSADOR DE BAGAGEM v4.0 CORRIGIDO
// ================================================================================
// üéí DETECTA E FORMATA REGRAS DE BAGAGEM CONSISTENTES
// üéØ Regra: "Com bagagem" = despachada inclu√≠da | Padr√£o CVC
// ================================================================================

import { SYSTEM_CONFIG, REGRAS_BAGAGEM } from '../data/constants.js';

// ================================================================================
// üéí PROCESSADOR PRINCIPAL DE BAGAGEM
// ================================================================================

/**
 * Processa e padroniza informa√ß√µes de bagagem no texto
 * @param {string} texto - Texto a ser processado
 * @param {Object} dadosExtraidos - Dados extra√≠dos do or√ßamento
 * @returns {string} Texto com bagagem padronizada
 */
export function processarBagagem(texto, dadosExtraidos = {}) {
    if (!texto || typeof texto !== 'string') {
        console.warn('‚ö†Ô∏è Baggage Processor: Texto inv√°lido recebido');
        return texto || '';
    }
    
    console.log('üéí Iniciando processamento de bagagem...');
    
    let resultado = texto;
    
    try {
        // 1. DETECTAR TIPO DE BAGAGEM
        const tipoBagagem = detectarTipoBagagem(texto, dadosExtraidos);
        console.log(`üéí Tipo detectado: ${tipoBagagem.tipo}`);
        
        // 2. APLICAR REGRA DE BAGAGEM
        resultado = aplicarRegraBagagem(resultado, tipoBagagem);
        
        // 3. PADRONIZAR FORMATO
        resultado = padronizarFormatoBagagem(resultado);
        
        // 4. VALIDAR CONSIST√äNCIA
        const validacao = validarBagagem(resultado);
        if (!validacao.valido) {
            console.warn('‚ö†Ô∏è Inconsist√™ncias na bagagem:', validacao.avisos);
        }
        
        console.log('‚úÖ Baggage Processor: Processamento conclu√≠do');
        
        return resultado;
        
    } catch (error) {
        console.error('‚ùå Baggage Processor: Erro no processamento:', error);
        return texto; // Retorna original em caso de erro
    }
}

// ================================================================================
// üîç DETEC√á√ÉO DE TIPO DE BAGAGEM
// ================================================================================

function detectarTipoBagagem(texto, dadosExtraidos) {
    const deteccao = {
        tipo: 'SEM_DESPACHADA', // Padr√£o
        confianca: 0.5,
        indicadores: [],
        temAssento: false,
        ehInternacional: false
    };
    
    const textoLower = texto.toLowerCase();
    
    console.log('üîç Analisando indicadores de bagagem...');
    
    // INDICADORES DE BAGAGEM DESPACHADA
    const indicadoresDespachada = [
        { termo: 'com bagagem', peso: 5, desc: 'indicador principal' },
        { termo: 'bagagem despachada', peso: 5, desc: 'expl√≠cito' },
        { termo: 'bagagens inclusas', peso: 4, desc: 'inclus√£o expl√≠cita' },
        { termo: 'mala de at√© 23kg', peso: 4, desc: 'peso espec√≠fico' },
        { termo: 'bagagem de 23kg', peso: 4, desc: 'peso padr√£o' },
        { termo: '23kg inclu√≠da', peso: 4, desc: 'peso inclu√≠do' },
        { termo: 'franquia de bagagem', peso: 3, desc: 'termo t√©cnico' },
        { termo: 'bagagem inclu√≠da', peso: 3, desc: 'inclus√£o geral' },
        { termo: 'classe econ√¥mica', peso: 2, desc: 'classe internacional' }, // ADICIONADO
        { termo: 'classe executiva', peso: 3, desc: 'classe premium' }, // ADICIONADO
        { termo: 'classe premium', peso: 3, desc: 'classe premium' } // ADICIONADO
    ];
    
    // INDICADORES DE M√öLTIPLAS BAGAGENS
    const indicadoresMultiplas = [
        { termo: '2 bagagens', peso: 5, desc: 'duas bagagens' },
        { termo: 'duas bagagens', peso: 5, desc: 'duas expl√≠cito' },
        { termo: '+ 2 bagagens', peso: 5, desc: 'duas adicionais' },
        { termo: 'mala de m√£o + 2', peso: 4, desc: 'm√£o + duas' }
    ];
    
    // INDICADORES DE PR√â-RESERVA DE ASSENTO
    const indicadoresAssento = [
        { termo: 'pr√©-reserva de assento', peso: 5, desc: 'pr√©-reserva expl√≠cita' },
        { termo: 'pre reserva de assento', peso: 5, desc: 'sem h√≠fen' },
        { termo: 'pr√© reserva de assento', peso: 5, desc: 'sem h√≠fen 2' },
        { termo: 'marca√ß√£o de assento', peso: 4, desc: 'marca√ß√£o' },
        { termo: 'escolha de assento', peso: 4, desc: 'escolha' },
        { termo: 'assento inclu√≠do', peso: 3, desc: 'inclus√£o assento' }
    ];
    
    // VERIFICAR INDICADORES
    for (const { termo, peso, desc } of indicadoresDespachada) {
        if (textoLower.includes(termo)) {
            deteccao.confianca += peso * 0.1;
            deteccao.indicadores.push(`bagagem: ${desc}`);
        }
    }
    
    for (const { termo, peso, desc } of indicadoresMultiplas) {
        if (textoLower.includes(termo)) {
            deteccao.confianca += peso * 0.15;
            deteccao.indicadores.push(`m√∫ltiplas: ${desc}`);
            deteccao.tipo = 'DUAS_DESPACHADAS';
        }
    }
    
    for (const { termo, peso, desc } of indicadoresAssento) {
        if (textoLower.includes(termo)) {
            deteccao.temAssento = true;
            deteccao.indicadores.push(`assento: ${desc}`);
        }
    }
    
    // DETECTAR VIAGEM INTERNACIONAL - CORRIGIDO E EXPANDIDO
    const destinosInternacionais = ['lisboa', 'orlando', 'miami', 'madrid', 'barcelona', 'paris', 'roma', 'londres', 'porto', 'buenos aires', 'santiago'];
    const companhiasInternacionais = ['iberia', 'tap', 'lufthansa', 'air france', 'klm', 'american', 'delta', 'latam'];
    const indicadoresInternacionais = ['classe econ√¥mica', 'classe executiva', 'classe premium', 'business class', 'economy class'];
    
    deteccao.ehInternacional = destinosInternacionais.some(destino => 
        textoLower.includes(destino)
    ) || companhiasInternacionais.some(companhia =>
        textoLower.includes(companhia)
    ) || indicadoresInternacionais.some(indicador =>
        textoLower.includes(indicador)
    );
    
    // DETERMINAR TIPO FINAL - CORRIGIDO
    if (deteccao.confianca >= 0.8 && deteccao.tipo !== 'DUAS_DESPACHADAS') {
        deteccao.tipo = deteccao.ehInternacional ? 'COM_DESPACHADA_23KG' : 'COM_DESPACHADA_23KG';
    } else if (deteccao.confianca >= 0.4) { // REDUZIDO de 0.6 para detectar melhor
        deteccao.tipo = 'COM_DESPACHADA_23KG';
    } else if (deteccao.ehInternacional) { // ADICIONADO: Internacional sempre tem bagagem
        deteccao.tipo = 'COM_DESPACHADA_23KG';
        deteccao.confianca = 0.8;
        deteccao.indicadores.push('internacional: bagagem padr√£o');
    } else if (deteccao.confianca < 0.3) {
        deteccao.tipo = 'SEM_DESPACHADA';
    }
    
    console.log(`üîç Indicadores encontrados: ${deteccao.indicadores.join(', ')}`);
    console.log(`üîç Confian√ßa: ${(deteccao.confianca * 100).toFixed(1)}%`);
    console.log(`üîç Internacional: ${deteccao.ehInternacional ? 'SIM' : 'N√ÉO'}`);
    
    return deteccao;
}

// ================================================================================
// ‚öôÔ∏è APLICA√á√ÉO DE REGRA DE BAGAGEM
// ================================================================================

function aplicarRegraBagagem(texto, tipoBagagem) {
    let resultado = texto;
    
    console.log(`‚öôÔ∏è Aplicando regra: ${tipoBagagem.tipo}`);
    
    // Obter texto da regra
    const textoBagagem = obterTextoBagagem(tipoBagagem);
    
    // Padr√µes existentes de bagagem para substituir - EXPANDIDO
    const padroesBagagem = [
        /‚úÖ[^\n]*bagagem[^\n]*/gi,
        /‚úÖ[^\n]*mala[^\n]*/gi,
        /‚úÖ[^\n]*item pessoal[^\n]*/gi,
        /‚úÖ[^\n]*s√≥.*m√£o[^\n]*/gi,
        /‚úÖ[^\n]*inclui[^\n]*/gi,
        /‚úÖ[^\n]*com bagagem[^\n]*/gi, // ADICIONADO
        /‚úÖ[^\n]*classe[^\n]*/gi, // ADICIONADO
        /‚úÖ[^\n]*econ√¥mica[^\n]*/gi // ADICIONADO
    ];
    
    let substitucaoFeita = false;
    
    // Tentar substituir linha existente
    for (const padrao of padroesBagagem) {
        if (padrao.test(resultado)) {
            resultado = resultado.replace(padrao, `‚úÖ ${textoBagagem}`);
            substitucaoFeita = true;
            console.log('‚öôÔ∏è Linha de bagagem substitu√≠da');
            break;
        }
    }
    
    // Se n√£o encontrou linha existente, adicionar ap√≥s valor
    if (!substitucaoFeita) {
        console.log('‚öôÔ∏è Adicionando nova linha de bagagem');
        resultado = adicionarLinhaBagagem(resultado, textoBagagem);
    }
    
    // Adicionar linha de assento se necess√°rio
    if (tipoBagagem.temAssento && !resultado.includes('üí∫')) {
        resultado = adicionarLinhaAssento(resultado);
    }
    
    return resultado;
}

// ================================================================================
// üìù OBTEN√á√ÉO DE TEXTO DE BAGAGEM - CORRIGIDO
// ================================================================================

function obterTextoBagagem(tipoBagagem) {
    const { tipo, ehInternacional } = tipoBagagem;
    
    switch (tipo) {
        case 'SEM_DESPACHADA':
            return REGRAS_BAGAGEM.SEM_DESPACHADA;
        
        case 'COM_DESPACHADA_23KG':
            return ehInternacional 
                ? REGRAS_BAGAGEM.COM_DESPACHADA_23KG 
                : REGRAS_BAGAGEM.COM_DESPACHADA_23KG;
        
        case 'DUAS_DESPACHADAS':
            return REGRAS_BAGAGEM.DUAS_DESPACHADAS;
        
        case 'COM_DESPACHADA_32KG':
            return REGRAS_BAGAGEM.COM_DESPACHADA_32KG;
        
        default:
            // DEFAULT MELHORADO: Se √© internacional, assume bagagem despachada
            return ehInternacional 
                ? REGRAS_BAGAGEM.COM_DESPACHADA_23KG 
                : REGRAS_BAGAGEM.SEM_DESPACHADA;
    }
}

// ================================================================================
// üìù ADI√á√ÉO DE LINHAS
// ================================================================================

function adicionarLinhaBagagem(texto, textoBagagem) {
    // Procurar local apropriado (ap√≥s valor ou parcelamento)
    const linhas = texto.split('\n');
    
    for (let i = 0; i < linhas.length; i++) {
        const linha = linhas[i];
        
        // Adicionar ap√≥s linha de valor ou parcelamento
        if (linha.includes('üí∞') || linha.includes('üí≥')) {
            // Verificar se j√° existe linha de bagagem na sequ√™ncia
            let j = i + 1;
            while (j < linhas.length && linhas[j].trim() === '') j++; // Pular linhas vazias
            
            if (j < linhas.length && linhas[j].includes('‚úÖ')) {
                // J√° existe, pular
                continue;
            }
            
            // Inserir nova linha de bagagem
            linhas.splice(i + 1, 0, `‚úÖ ${textoBagagem}`);
            break;
        }
    }
    
    return linhas.join('\n');
}

function adicionarLinhaAssento(texto) {
    const linhas = texto.split('\n');
    
    for (let i = 0; i < linhas.length; i++) {
        const linha = linhas[i];
        
        // Adicionar ap√≥s linha de bagagem
        if (linha.includes('‚úÖ') && !linha.includes('üí∫')) {
            linhas.splice(i + 1, 0, 'üí∫ Inclui pr√© reserva de assento');
            break;
        }
    }
    
    return linhas.join('\n');
}

// ================================================================================
// üîß PADRONIZA√á√ÉO DE FORMATO
// ================================================================================

function padronizarFormatoBagagem(texto) {
    let resultado = texto;
    
    console.log('üîß Padronizando formato de bagagem...');
    
    // Padr√µes a padronizar
    const padronizacoes = [
        // "10 kg" ‚Üí "10kg"
        { pattern: /(\d+)\s+kg/g, replacement: '$1kg' },
        // "23 Kg" ‚Üí "23kg"
        { pattern: /(\d+)\s*Kg/g, replacement: '$1kg' },
        // " + " ‚Üí " + "
        { pattern: /\s*\+\s*/g, replacement: ' + ' },
        // M√∫ltiplos espa√ßos
        { pattern: /\s{2,}/g, replacement: ' ' },
        // Remover "Classe Econ√¥mica" solto
        { pattern: /‚úÖ\s*Classe Econ√¥mica\s*$/gm, replacement: '' },
        { pattern: /‚úÖ\s*classe econ√¥mica\s*$/gm, replacement: '' },
        { pattern: /‚úÖ\s*com bagagem\s*$/gm, replacement: '' }
    ];
    
    for (const { pattern, replacement } of padronizacoes) {
        resultado = resultado.replace(pattern, replacement);
    }
    
    // Limpar linhas vazias extras criadas pela remo√ß√£o
    resultado = resultado.replace(/\n\s*\n\s*\n/g, '\n\n');
    
    return resultado;
}

// ================================================================================
// ‚úÖ VALIDA√á√ÉO DE BAGAGEM
// ================================================================================

function validarBagagem(texto) {
    const validacao = {
        valido: true,
        avisos: [],
        erros: []
    };
    
    try {
        // Verificar se h√° linha de bagagem
        const temLinhaBagagem = /‚úÖ[^\n]*(?:bagagem|mala|item)/i.test(texto);
        
        if (!temLinhaBagagem) {
            validacao.avisos.push('Nenhuma linha de bagagem encontrada');
        }
        
        // Verificar duplica√ß√µes
        const linhasBagagem = texto.match(/‚úÖ[^\n]*(?:bagagem|mala|item)[^\n]*/gi);
        if (linhasBagagem && linhasBagagem.length > 1) {
            validacao.avisos.push('M√∫ltiplas linhas de bagagem detectadas');
        }
        
        // Verificar consist√™ncia de assento
        const temAssento = /üí∫/.test(texto);
        const temAssentoTexto = /assento/i.test(texto);
        
        if (temAssentoTexto && !temAssento) {
            validacao.avisos.push('Refer√™ncia a assento sem emoji espec√≠fico');
        }
        
        // Verificar se linha de bagagem est√° vazia ou incompleta
        const linhaBagagemVazia = /‚úÖ\s*$/m.test(texto);
        if (linhaBagagemVazia) {
            validacao.erros.push('Linha de bagagem vazia encontrada');
            validacao.valido = false;
        }
        
    } catch (error) {
        validacao.erros.push('Erro na valida√ß√£o de bagagem');
        validacao.valido = false;
    }
    
    return validacao;
}

// ================================================================================
// üìä UTILIDADES DE AN√ÅLISE
// ================================================================================

/**
 * Extrai informa√ß√µes de bagagem do texto
 * @param {string} texto - Texto para analisar
 * @returns {Object} Informa√ß√µes de bagagem extra√≠das
 */
export function extrairInfoBagagem(texto) {
    if (!texto) return null;
    
    const info = {
        temDespachada: false,
        quantidadeDespachadas: 0,
        peso: null,
        temAssento: false,
        descricao: null
    };
    
    // Extrair linha de bagagem
    const matchBagagem = texto.match(/‚úÖ[^\n]*(?:bagagem|mala|item)[^\n]*/i);
    if (matchBagagem) {
        info.descricao = matchBagagem[0];
        
        // Verificar despachada
        info.temDespachada = /despachada/i.test(info.descricao);
        
        // Contar quantidade
        const matchQuantidade = info.descricao.match(/(\d+)\s*bagagem/i);
        if (matchQuantidade) {
            info.quantidadeDespachadas = parseInt(matchQuantidade[1]);
        } else if (info.temDespachada) {
            info.quantidadeDespachadas = 1;
        }
        
        // Extrair peso
        const matchPeso = info.descricao.match(/(\d+)kg/i);
        if (matchPeso) {
            info.peso = parseInt(matchPeso[1]);
        }
    }
    
    // Verificar assento
    info.temAssento = /üí∫/.test(texto) || /assento/i.test(texto);
    
    return info;
}

// ================================================================================
// üì§ EXPORTS
// ================================================================================

export default {
    processarBagagem,
    extrairInfoBagagem
};

// ================================================================================
// üìã LOG DE INICIALIZA√á√ÉO
// ================================================================================

console.log(`‚úÖ Baggage Processor v${SYSTEM_CONFIG.VERSION} corrigido carregado`);
console.log(`üéí Regras dispon√≠veis: ${Object.keys(REGRAS_BAGAGEM).length}`);
