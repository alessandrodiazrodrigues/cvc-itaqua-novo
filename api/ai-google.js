// ================================================================================
// üöÄ CVC ITAQUA v2.3 - ESTRUTURA ORGANIZADA E REGRAS CORRIGIDAS
// ================================================================================
// 
// üìÅ √çNDICE DO ARQUIVO:
//    SE√á√ÉO 1: CONFIGURA√á√ïES GLOBAIS (Linha ~20)
//    SE√á√ÉO 2: TEMPLATES DE OR√áAMENTO (Linha ~200)
//    SE√á√ÉO 3: REGRAS DE FORMATA√á√ÉO (Linha ~800)
//    SE√á√ÉO 4: FUN√á√ïES DE DETEC√á√ÉO (Linha ~1000)
//    SE√á√ÉO 5: GERA√á√ÉO DE PROMPTS (Linha ~1200)
//    SE√á√ÉO 6: HANDLER PRINCIPAL (Linha ~1500)
//
// ================================================================================
// VERS√ÉO: 2.3
// DATA: 18/12/2024
// MUDAN√áAS:
// - Organiza√ß√£o modular do c√≥digo
// - Corre√ß√£o das regras de parcelamento
// - Corre√ß√£o das regras de bagagem
// - Corre√ß√£o das regras de assento
// - 14 templates completos e funcionais
// ================================================================================

// ================================================================================
// SE√á√ÉO 1: CONFIGURA√á√ïES GLOBAIS
// ================================================================================

// 1.1 - TABELA DE AEROPORTOS (Conforme Manual CVC)
const AEROPORTOS = {
    // === AEROPORTOS BRASILEIROS ===
    'GRU': 'Guarulhos', 
    'CGH': 'Congonhas', 
    'VCP': 'Viracopos', 
    'SDU': 'Santos Dumont',
    'GIG': 'Gale√£o', 
    'BSB': 'Bras√≠lia', 
    'CNF': 'Confins', 
    'PLU': 'Pampulha', 
    'POA': 'Porto Alegre',
    'CWB': 'Curitiba', 
    'FLN': 'Florian√≥polis', 
    'SSA': 'Salvador', 
    'REC': 'Recife', 
    'FOR': 'Fortaleza',
    'NAT': 'Natal', 
    'MCZ': 'Macei√≥', 
    'AJU': 'Aracaju', 
    'JPA': 'Jo√£o Pessoa', 
    'THE': 'Teresina',
    'SLZ': 'S√£o Lu√≠s', 
    'BEL': 'Bel√©m', 
    'MAO': 'Manaus', 
    'CGB': 'Cuiab√°', 
    'CGR': 'Campo Grande',
    'GYN': 'Goi√¢nia', 
    'VIX': 'Vit√≥ria', 
    'BPS': 'Porto Seguro', 
    'IOS': 'Ilh√©us', 
    'JDO': 'Juazeiro do Norte',
    'IGU': 'Foz do Igua√ßu', 
    'IMP': 'Imperatriz', 
    'MAB': 'Marab√°', 
    'STM': 'Santar√©m', 
    'RBR': 'Rio Branco',
    'PVH': 'Porto Velho', 
    'BVB': 'Boa Vista', 
    'MCP': 'Macap√°', 
    'PMW': 'Palmas', 
    'UDI': 'Uberl√¢ndia',
    'RAO': 'Ribeir√£o Preto', 
    'JOI': 'Joinville', 
    'XAP': 'Chapec√≥', 
    'LDB': 'Londrina', 
    'MGF': 'Maring√°',
    
    // === AEROPORTOS INTERNACIONAIS PRINCIPAIS ===
    'EZE': 'Ezeiza - Buenos Aires', 
    'AEP': 'Aeroparque - Buenos Aires', 
    'SCL': 'Santiago', 
    'LIM': 'Lima',
    'BOG': 'Bogot√°', 
    'MEX': 'Cidade do M√©xico', 
    'CUN': 'Canc√∫n', 
    'MIA': 'Miami', 
    'MCO': 'Orlando', 
    'JFK': 'Nova York - JFK', 
    'LGA': 'Nova York - LGA', 
    'EWR': 'Nova York - Newark',
    'LAX': 'Los Angeles', 
    'SFO': 'S√£o Francisco', 
    'DFW': 'Dallas', 
    'ATL': 'Atlanta', 
    'ORD': 'Chicago',
    'LIS': 'Lisboa', 
    'OPO': 'Porto', 
    'MAD': 'Madrid', 
    'BCN': 'Barcelona', 
    'CDG': 'Paris - Charles de Gaulle', 
    'ORY': 'Paris - Orly', 
    'FCO': 'Roma - Fiumicino', 
    'MXP': 'Mil√£o', 
    'LHR': 'Londres - Heathrow', 
    'LGW': 'Londres - Gatwick', 
    'FRA': 'Frankfurt', 
    'MUC': 'Munique', 
    'AMS': 'Amsterdam', 
    'ZUR': 'Zurich',
    
    // === AM√âRICA DO SUL ADICIONAL ===
    'PCL': 'Pucallpa', 
    'CUZ': 'Cusco', 
    'AQP': 'Arequipa', 
    'TRU': 'Trujillo', 
    'PIU': 'Piura',
    'IQT': 'Iquitos', 
    'TPP': 'Tarapoto', 
    'JAU': 'Jauja', 
    'AYP': 'Ayacucho', 
    'TCQ': 'Tacna',
    'MVD': 'Montevid√©u', 
    'ASU': 'Assun√ß√£o', 
    'VVI': 'Santa Cruz', 
    'LPB': 'La Paz', 
    'UIO': 'Quito', 
    'GYE': 'Guayaquil'
};

// 1.2 - DESTINOS CONHECIDOS
const DESTINOS_CONHECIDOS = {
    // === DESTINOS PERUANOS ===
    'pucallpa': 'Pucallpa', 
    'lima': 'Lima', 
    'cusco': 'Cusco', 
    'arequipa': 'Arequipa', 
    'iquitos': 'Iquitos',
    'trujillo': 'Trujillo', 
    'piura': 'Piura', 
    'tarapoto': 'Tarapoto', 
    'ayacucho': 'Ayacucho',
    
    // === DESTINOS BRASILEIROS ===
    'jo√£o pessoa': 'Jo√£o Pessoa', 
    'joao pessoa': 'Jo√£o Pessoa', 
    'bras√≠lia': 'Bras√≠lia', 
    'brasilia': 'Bras√≠lia',
    'salvador': 'Salvador', 
    'rio de janeiro': 'Rio de Janeiro', 
    'belo horizonte': 'Belo Horizonte',
    'porto alegre': 'Porto Alegre', 
    'curitiba': 'Curitiba', 
    'florian√≥polis': 'Florian√≥polis', 
    'florianopolis': 'Florian√≥polis',
    'recife': 'Recife', 
    'fortaleza': 'Fortaleza', 
    'natal': 'Natal', 
    'macei√≥': 'Macei√≥', 
    'maceio': 'Macei√≥',
    'goi√¢nia': 'Goi√¢nia', 
    'goiania': 'Goi√¢nia', 
    'manaus': 'Manaus', 
    'bel√©m': 'Bel√©m', 
    'belem': 'Bel√©m',
    
    // === DESTINOS EUROPEUS ===
    'lisboa': 'Lisboa', 
    'porto': 'Porto', 
    'madrid': 'Madrid', 
    'barcelona': 'Barcelona',
    'paris': 'Paris', 
    'londres': 'Londres', 
    'roma': 'Roma', 
    'amsterdam': 'Amsterdam',
    'mil√£o': 'Mil√£o', 
    'milao': 'Mil√£o', 
    'frankfurt': 'Frankfurt', 
    'zurich': 'Zurich',
    
    // === DESTINOS AMERICANOS ===
    'orlando': 'Orlando', 
    'miami': 'Miami', 
    'nova york': 'Nova York', 
    'los angeles': 'Los Angeles',
    's√£o francisco': 'S√£o Francisco', 
    'sao francisco': 'S√£o Francisco', 
    'chicago': 'Chicago', 
    'dallas': 'Dallas', 
    'atlanta': 'Atlanta', 
    'canc√∫n': 'Canc√∫n', 
    'cancun': 'Canc√∫n',
    
    // === AM√âRICA LATINA ===
    'buenos aires': 'Buenos Aires', 
    'santiago': 'Santiago', 
    'bogot√°': 'Bogot√°', 
    'bogota': 'Bogot√°',
    'montevid√©u': 'Montevid√©u', 
    'montevideu': 'Montevid√©u', 
    'assun√ß√£o': 'Assun√ß√£o', 
    'assuncao': 'Assun√ß√£o',
    'quito': 'Quito', 
    'guayaquil': 'Guayaquil', 
    'la paz': 'La Paz'
};

// ================================================================================
// SE√á√ÉO 2: TEMPLATES DE OR√áAMENTO (14 TEMPLATES)
// ================================================================================

const TEMPLATES = {
    // ===========================
    // 2.1 - TEMPLATES A√âREOS (6 tipos)
    // ===========================
    
    // TEMPLATE 1: A√©reo Ida e Volta Simples
    aereo_simples: `*{companhia} - {cidade_origem} ‚úà {cidade_destino}*

{data_ida} - {aeroporto_origem} {hora_ida} / {aeroporto_destino} {hora_chegada_ida} ({tipo_voo_ida})
--
{data_volta} - {aeroporto_destino} {hora_volta} / {aeroporto_origem} {hora_chegada_volta} ({tipo_voo_volta})

üí∞ R$ {valor_total} para {passageiros}
{parcelamento}
{bagagem}
{assento}
üè∑Ô∏è {reembolso}

Valores sujeitos a confirma√ß√£o e disponibilidade`,

    // TEMPLATE 2: A√©reo com Conex√£o Detalhada
    aereo_conexao: `*{companhia} - {cidade_origem} ‚úà {cidade_destino}*

{data_ida} - {aeroporto_origem} {hora_ida} / {aeroporto_conexao} {hora_chegada_conexao} (voo direto)
(conex√£o em {cidade_conexao} - {tempo_espera} de espera)
{data_ida} - {aeroporto_conexao} {hora_saida_conexao} / {aeroporto_destino} {hora_chegada_ida} (voo direto)
--
{data_volta} - {aeroporto_destino} {hora_volta} / {aeroporto_origem} {hora_chegada_volta} ({tipo_voo_volta})

üí∞ R$ {valor_total} para {passageiros}
{parcelamento}
{bagagem}
{assento}
üè∑Ô∏è {reembolso}
üîó {link}

Valores sujeitos a confirma√ß√£o e disponibilidade`,

    // TEMPLATE 3: A√©reo Somente Ida
    aereo_somente_ida: `*{companhia}*
{data} - {aeroporto_origem} {hora_saida} / {aeroporto_destino} {hora_chegada} ({tipo_voo})

üí∞ Valor total para {passageiros} = R$ {valor}
Inclui taxas de embarque
{bagagem}
{assento}
üè∑Ô∏è {reembolso}

‚ö†Ô∏è Passagem somente de ida - sem retorno inclu√≠do

Valores sujeitos a confirma√ß√£o e disponibilidade`,

    // TEMPLATE 4: M√∫ltiplas Op√ß√µes - 2 Planos
    multiplas_opcoes_2_planos: `*{companhia} - {cidade_origem} ‚úà {cidade_destino}*
{data_ida} - {aeroporto_origem} {hora_ida} / {aeroporto_destino} {hora_chegada_ida} ({tipo_voo_ida})
--
{data_volta} - {aeroporto_destino} {hora_volta} / {aeroporto_origem} {hora_chegada_volta} ({tipo_voo_volta})

üí∞ **OP√á√ÉO 1** - R$ {valor1}
‚úÖ S√≥ mala de m√£o inclu√≠da
{parcelamento1}
üîó {link1}

üí∞ **OP√á√ÉO 2** - R$ {valor2}
‚úÖ Mala de m√£o + bagagem despachada
‚úÖ Cancelamento/altera√ß√£o com multas
‚úÖ Reembols√°vel conforme regras do bilhete
{parcelamento2}
üîó {link2}

Valores sujeitos a confirma√ß√£o e disponibilidade`,

    // TEMPLATE 5: M√∫ltiplas Op√ß√µes - 3 Planos
    multiplas_opcoes_3_planos: `*{companhia} - {cidade_origem} ‚úà {cidade_destino}*
{data_ida} - {aeroporto_origem} {hora_ida} / {aeroporto_destino} {hora_chegada_ida} ({tipo_voo_ida})
--
{data_volta} - {aeroporto_destino} {hora_volta} / {aeroporto_origem} {hora_chegada_volta} ({tipo_voo_volta})

üí∞ **OP√á√ÉO 1** - R$ {valor1}
‚úÖ S√≥ mala de m√£o inclu√≠da

üí∞ **OP√á√ÉO 2** - R$ {valor2}
‚úÖ Mala de m√£o + bagagem despachada
‚úÖ Cancelamento/altera√ß√£o com multas

üí∞ **OP√á√ÉO 3** - R$ {valor3}
‚úÖ Mala de m√£o + 2 bagagens despachadas
‚úÖ Cancelamento/altera√ß√£o com multas
‚úÖ Reembols√°vel conforme regras do bilhete
‚úÖ Marca√ß√£o de assento

Valores sujeitos a confirma√ß√£o e disponibilidade`,

    // TEMPLATE 6: M√∫ltiplas Companhias (CORRIGIDO v2.3)
    multiplas_companhias: `*OP√á√ÉO 1 - {companhia1} - {cidade_origem} ‚úà {cidade_destino}*
{data_ida1} - {aeroporto_origem1} {hora_ida1} / {aeroporto_destino1} {hora_chegada1} ({tipo_voo1})
--
{data_volta1} - {aeroporto_volta1} {hora_volta1} / {aeroporto_origem1} {hora_chegada_volta1} ({tipo_voo_volta1})

üí∞ R$ {valor1} para {passageiros}
{parcelamento1}
{bagagem1}
{assento1}
üîó {link1}

*OP√á√ÉO 2 - {companhia2} - {cidade_origem} ‚úà {cidade_destino}*
{data_ida2} - {aeroporto_origem2} {hora_ida2} / {aeroporto_destino2} {hora_chegada2} ({tipo_voo2})
--
{data_volta2} - {aeroporto_volta2} {hora_volta2} / {aeroporto_origem2} {hora_chegada_volta2} ({tipo_voo_volta2})

üí∞ R$ {valor2} para {passageiros}
{parcelamento2}
{bagagem2}
{assento2}
üîó {link2}

*OP√á√ÉO 3 - {companhia3} - {cidade_origem} ‚úà {cidade_destino}*
{data_ida3} - {aeroporto_origem3} {hora_ida3} / {aeroporto_destino3} {hora_chegada3} ({tipo_voo3})
--
{data_volta3} - {aeroporto_volta3} {hora_volta3} / {aeroporto_origem3} {hora_chegada_volta3} ({tipo_voo_volta3})

üí∞ R$ {valor3} para {passageiros}
{parcelamento3}
{bagagem3}
{assento3}
üîó {link3}

üè∑Ô∏è {reembolso}
Valores sujeitos a confirma√ß√£o e disponibilidade`,

    // ===========================
    // 2.2 - TEMPLATES DE HOT√âIS (3 tipos)
    // ===========================
    
    // TEMPLATE 7: Hot√©is - M√∫ltiplas Op√ß√µes
    hoteis_multiplas_opcoes: `*Hot√©is em {destino}*
Per√≠odo: {data_entrada} a {data_saida} ({noites} noites)
{passageiros}

**OP√á√ÉO 1** - {nome_hotel1} ‚≠ê{estrelas1}
üìç {localizacao1}
üõèÔ∏è {tipo_quarto1}
‚òï {regime1}
üí∞ R$ {valor1} total
üîó {link1}

**OP√á√ÉO 2** - {nome_hotel2} ‚≠ê{estrelas2}
üìç {localizacao2}
üõèÔ∏è {tipo_quarto2}
‚òï {regime2}
üí∞ R$ {valor2} total
üîó {link2}

**OP√á√ÉO 3** - {nome_hotel3} ‚≠ê{estrelas3}
üìç {localizacao3}
üõèÔ∏è {tipo_quarto3}
‚òï {regime3}
üí∞ R$ {valor3} total
üîó {link3}

{parcelamento}
Valores sujeitos a confirma√ß√£o e disponibilidade`,

    // TEMPLATE 8: Roteiro de Hot√©is Sequencial
    roteiro_hoteis: `*Roteiro {destino}*
{passageiros}

üìÖ **{data1} a {data2}** ({noites1} noites)
üè® {hotel1} - {cidade1}
üõèÔ∏è {tipo_quarto1} com {regime1}
üí∞ R$ {valor1}

üìÖ **{data2} a {data3}** ({noites2} noites)
üè® {hotel2} - {cidade2}
üõèÔ∏è {tipo_quarto2} com {regime2}
üí∞ R$ {valor2}

üìÖ **{data3} a {data4}** ({noites3} noites)
üè® {hotel3} - {cidade3}
üõèÔ∏è {tipo_quarto3} com {regime3}
üí∞ R$ {valor3}

üí∞ **VALOR TOTAL DO ROTEIRO:** R$ {valor_total}
{parcelamento}

Valores sujeitos a confirma√ß√£o e disponibilidade`,

    // TEMPLATE 9: Pacote Completo (A√©reo + Hotel + Servi√ßos)
    pacote_completo: `*Pacote {destino}*
Embarque: {data_embarque}
Pacote para {passageiros}

*O Pacote Inclui:*
- Passagem A√©rea ida e volta para {destino}
- Taxas de Embarque
- Traslado {tipo_traslado}
- {passeios}
- {seguro}
- {noites} noites de hospedagem no hotel escolhido

‚úàÔ∏è *Voos {companhia}:*
{data_ida} - {origem} {hora_ida} / {destino} {hora_chegada} ({tipo_voo})
--
{data_volta} - {destino} {hora_volta} / {origem} {hora_chegada_volta} ({tipo_voo_volta})

**OP√á√ÉO 1** - {nome_hotel1}
üìç {endereco1}
üõèÔ∏è {tipo_quarto1} com {regime1}
üí∞ R$ {valor1} para {passageiros}
üîó {link1}

**OP√á√ÉO 2** - {nome_hotel2} ‚≠ê Preferencial
üìç {endereco2}
üõèÔ∏è {tipo_quarto2} com {regime2}
‚úÖ Reembols√°vel conforme regras do bilhete
üí∞ R$ {valor2} para {passageiros}
üîó {link2}

**OP√á√ÉO 3** - {nome_hotel3}
üìç {endereco3}
üõèÔ∏è {tipo_quarto3} com {regime3}
üí∞ R$ {valor3} para {passageiros}
üîó {link3}

Valores sujeitos a confirma√ß√£o e disponibilidade`,

    // ===========================
    // 2.3 - TEMPLATES ESPECIAIS (5 tipos)
    // ===========================
    
    // TEMPLATE 10: Multitrecho
    multitrecho: `*Multitrecho - {companhias}*
{data_inicio} a {data_fim} ({dias} dias e {noites} noites)

*Trecho 1:* {origem1} ‚Üí {destino1}
{data1} - {aeroporto1} {hora1} / {aeroporto_chegada1} {hora_chegada1} ({tipo_voo1})

*Trecho 2:* {origem2} ‚Üí {destino2}
{data2} - {aeroporto2} {hora2} / {aeroporto_chegada2} {hora_chegada2} ({tipo_voo2})

*Trecho 3:* {origem3} ‚Üí {destino3}
{data3} - {aeroporto3} {hora3} / {aeroporto_chegada3} {hora_chegada3} ({tipo_voo3})

üí∞ R$ {valor_total} para {passageiros}
{parcelamento}
{bagagem}
üè∑Ô∏è {reembolso}
üîó {link}

Valores sujeitos a confirma√ß√£o e disponibilidade`,

    // TEMPLATE 11: Cruzeiro
    cruzeiro: `üö¢ *Cruzeiro {nome_navio}* ‚Äì {duracao} noites
{passageiros}
üìÖ Embarque: {data_embarque} ({dia_semana})
üìç Sa√≠da e chegada: {porto}
üåä Roteiro incr√≠vel pelo litoral brasileiro!

üí• Tarifas dispon√≠veis!
(Sujeita √† confirma√ß√£o de cabine e categoria)

üõè Op√ß√µes de Cabines:
{opcoes_cabines}

üìé Link para ver fotos, detalhes e reservar:
{link}

‚úÖ Inclui: hospedagem a bordo, pens√£o completa
üö´ N√£o inclui: taxas, bebidas, excurs√µes

üì≤ Me chama pra garantir a sua cabine! üå¥üõ≥Ô∏è

Valores sujeitos a confirma√ß√£o e disponibilidade`,

    // TEMPLATE 12: Dicas Completas
    dicas_completas: `üåç *Dicas Essenciais para sua Viagem a {destino}!* üåç

Aqui est√£o algumas sugest√µes para aproveitar ao m√°ximo sua estadia:

1Ô∏è‚É£ **Gastronomia Imperd√≠vel**
{dica_gastronomia}

2Ô∏è‚É£ **Atra√ß√µes Cl√°ssicas**
{dica_atracoes}

3Ô∏è‚É£ **Passeios e Experi√™ncias**
{dica_passeios}

4Ô∏è‚É£ **Melhor √âpoca para Visitar**
{dica_epoca}

5Ô∏è‚É£ **Dicas de Economia**
{dica_economia}

---
‚úàÔ∏è *Complete sua Viagem com a CVC!*
Al√©m de voos e hot√©is, a CVC Itaqua oferece tudo para deixar sua viagem ainda mais f√°cil e segura:
- Passeios opcionais incr√≠veis
- Seguro viagem completo
- Chip de celular internacional
- C√¢mbio e cart√£o pr√©-pago

Fale comigo para adicionar esses servi√ßos ao seu pacote!`,

    // TEMPLATE 13: Ranking de Hot√©is
    ranking: `üèÜ *Ranking dos Melhores Hot√©is em {destino}* üèÜ

Confira nossa sele√ß√£o especial dos hot√©is mais bem avaliados:

ü•á **1¬∫ LUGAR** - {hotel1}
üìç {localizacao1}
‚≠ê Google: {nota_google1}/5 | Booking: {nota_booking1}/10 | TripAdvisor: {nota_tripadvisor1}/5
‚úÖ {ponto_positivo1}
üí¨ "{review1}"

ü•à **2¬∫ LUGAR** - {hotel2}
üìç {localizacao2}
‚≠ê Google: {nota_google2}/5 | Booking: {nota_booking2}/10 | TripAdvisor: {nota_tripadvisor2}/5
‚úÖ {ponto_positivo2}
üí¨ "{review2}"

ü•â **3¬∫ LUGAR** - {hotel3}
üìç {localizacao3}
‚≠ê Google: {nota_google3}/5 | Booking: {nota_booking3}/10 | TripAdvisor: {nota_tripadvisor3}/5
‚úÖ {ponto_positivo3}
üí¨ "{review3}"

üìä *Metodologia:* Rankings baseados em avalia√ß√µes reais de m√∫ltiplas plataformas
üîÑ *Atualizado em:* {data_atualizacao}

Valores sujeitos a confirma√ß√£o e disponibilidade`
};

// ================================================================================
// SE√á√ÉO 3: REGRAS DE FORMATA√á√ÉO UNIVERSAIS (CORRIGIDAS v2.3)
// ================================================================================

// 3.1 - REGRA DE PARCELAMENTO (CORRIGIDA)
function formatarParcelamento(conteudo, parcelamentoSelecionado, valorTotal) {
    try {
        // CASO 1: Entrada + Parcelas no texto
        const entradaParcelas = conteudo.match(/Entrada de R\$\s*([\d.,]+)\s*\+\s*(\d+)x\s*de\s*R\$\s*([\d.,]+)/i);
        if (entradaParcelas) {
            const entrada = entradaParcelas[1];
            const numParcelas = parseInt(entradaParcelas[2]);
            const valorParcela = entradaParcelas[3];
            const totalParcelas = numParcelas + 1;
            
            return `üí≥ Total de R$ ${valorTotal} em at√© ${totalParcelas}x, sendo a primeira de R$ ${entrada}, mais ${numParcelas}x de R$ ${valorParcela} s/ juros no cart√£o`;
        }
        
        // CASO 2: Parcelamento selecionado no HTML (10x, 12x ou 15x)
        if (parcelamentoSelecionado && valorTotal) {
            const valor = parseFloat(valorTotal.replace(/[^\d,]/g, '').replace(',', '.'));
            const valorParcela = (valor / parseInt(parcelamentoSelecionado)).toFixed(2).replace('.', ',');
            return `üí≥ ${parcelamentoSelecionado}x de R$ ${valorParcela} s/ juros no cart√£o`;
        }
        
        // CASO 3: Nenhuma informa√ß√£o de parcelamento - N√ÉO incluir linha
        return '';
    } catch (error) {
        console.error('Erro ao formatar parcelamento:', error);
        return '';
    }
}

// 3.2 - REGRA DE BAGAGEM (CORRIGIDA)
function formatarBagagem(conteudo) {
    try {
        const texto = conteudo.toLowerCase();
        
        // Detectar varia√ß√µes (incluindo erros de digita√ß√£o comuns)
        const semBagagem = 
            texto.includes('sem bagagem') || 
            texto.includes('sem  bagagem') || // duplo espa√ßo
            texto.includes('apenas mala de m√£o') ||
            texto.includes('s√≥ mala de m√£o');
        
        const comBagagem = 
            texto.includes('com bagagem') || 
            texto.includes('com babagem') || // erro de digita√ß√£o
            texto.includes('com abagegem') || // erro de digita√ß√£o
            texto.includes('combagagem') || // sem espa√ßo
            texto.includes('inclui bagagem') ||
            texto.includes('bagagem despachada') ||
            texto.includes('com  bagagem'); // duplo espa√ßo
        
        if (semBagagem) {
            return '‚úÖ Inclui 1 item pessoal + 1 mala de m√£o de 10kg';
        } else if (comBagagem) {
            return '‚úÖ Inclui 1 item pessoal + 1 mala de m√£o de 10kg + 1 bagagem despachada de 23kg';
        }
        
        // Padr√£o quando n√£o h√° informa√ß√£o clara
        return '‚úÖ Inclui 1 item pessoal + 1 mala de m√£o de 10kg';
    } catch (error) {
        console.error('Erro ao formatar bagagem:', error);
        return '‚úÖ Inclui 1 item pessoal + 1 mala de m√£o de 10kg';
    }
}

// 3.3 - REGRA DE ASSENTO (CORRIGIDA)
function formatarAssento(conteudo) {
    try {
        const texto = conteudo.toLowerCase();
        
        // Detectar varia√ß√µes de pr√©-reserva de assento
        const temPreReserva = 
            texto.includes('pre reserva de assento') ||
            texto.includes('pr√© reserva de assento') ||
            texto.includes('pre-reserva de assento') ||
            texto.includes('prereserva de assento') ||
            texto.includes('com pre reserva') ||
            texto.includes('com pr√© reserva') ||
            texto.includes('marca√ß√£o de assento') ||
            texto.includes('escolha de assento') ||
            texto.includes('sele√ß√£o de assento');
        
        if (temPreReserva) {
            return 'üí∫ Inclui pr√© reserva de assento';
        }
        
        // Se n√£o tem pr√©-reserva, retorna vazio (n√£o incluir linha)
        return '';
    } catch (error) {
        console.error('Erro ao formatar assento:', error);
        return '';
    }
}

// 3.4 - REGRA DE PASSAGEIROS
function formatarPassageiros(adultos, criancas, bebes, idadesCriancas, idadesBebes) {
    try {
        let resultado = [];
        
        // Adultos
        if (adultos > 0) {
            resultado.push(`${String(adultos).padStart(2, '0')} ${adultos === 1 ? 'adulto' : 'adultos'}`);
        }
        
        // Crian√ßas (2-11 anos)
        if (criancas > 0) {
            let textoIdades = '';
            if (idadesCriancas && idadesCriancas.length > 0) {
                if (idadesCriancas.length === 1) {
                    textoIdades = ` (${idadesCriancas[0]} anos)`;
                } else {
                    textoIdades = ` (${idadesCriancas.join(' e ')} anos)`;
                }
            }
            resultado.push(`${String(criancas).padStart(2, '0')} ${criancas === 1 ? 'crian√ßa' : 'crian√ßas'}${textoIdades}`);
        }
        
        // Beb√™s (0-23 meses)
        if (bebes > 0) {
            let textoIdades = '';
            if (idadesBebes && idadesBebes.length > 0) {
                if (idadesBebes.length === 1) {
                    textoIdades = ` (${idadesBebes[0]} meses)`;
                } else {
                    textoIdades = ` (${idadesBebes.join(' e ')} meses)`;
                }
            }
            resultado.push(`${String(bebes).padStart(2, '0')} ${bebes === 1 ? 'beb√™' : 'beb√™s'}${textoIdades}`);
        }
        
        return resultado.join(' + ');
    } catch (error) {
        console.error('Erro ao formatar passageiros:', error);
        return '01 adulto';
    }
}

// 3.5 - REGRA DE DATA E HOR√ÅRIO COM DIA SEGUINTE
function formatarHorario(horario, dataBase) {
    try {
        // Se o hor√°rio indica chegada no dia seguinte
        if (horario && dataBase) {
            // L√≥gica para detectar se √© dia seguinte
            // Por exemplo, se hora de chegada < hora de partida em voos noturnos
            // Implementar conforme necessidade
        }
        return horario;
    } catch (error) {
        console.error('Erro ao formatar hor√°rio:', error);
        return horario;
    }
}

// ================================================================================
// SE√á√ÉO 4: FUN√á√ïES DE DETEC√á√ÉO
// ================================================================================

// 4.1 - Extra√ß√£o de Destino
function extrairDestinoDoConteudo(conteudo) {
    try {
        const texto = conteudo.toLowerCase();
        console.log('üîç v2.3: Extraindo destino...');
        
        // Prioridade 1: Destino final em conex√µes
        const padraoConexao = conteudo.match(/([A-Z]{3})\s*[\s\S]*?([A-Z]{3})\s*[\s\S]*?([A-Z]{3})/);
        if (padraoConexao && padraoConexao.length >= 4) {
            const origem = padraoConexao[1];
            const destinoFinal = padraoConexao[3];
            
            if (['GRU', 'CGH', 'SDU', 'GIG'].includes(origem) && 
                AEROPORTOS[destinoFinal] && !['GRU', 'CGH', 'SDU', 'GIG'].includes(destinoFinal)) {
                console.log(`‚úÖ v2.3: Destino detectado: ${AEROPORTOS[destinoFinal]}`);
                return AEROPORTOS[destinoFinal];
            }
        }
        
        // Prioridade 2: C√≥digos de aeroporto
        const codigosAeroporto = conteudo.match(/\b([A-Z]{3})\b/g);
        if (codigosAeroporto) {
            for (const codigo of codigosAeroporto) {
                if (AEROPORTOS[codigo] && !['GRU', 'CGH', 'SDU', 'GIG', 'BSB', 'CNF'].includes(codigo)) {
                    const cidade = AEROPORTOS[codigo];
                    console.log(`‚úÖ v2.3: Destino por c√≥digo ${codigo}: ${cidade}`);
                    return cidade;
                }
            }
        }
        
        // Prioridade 3: Destinos conhecidos
        for (const [chave, nome] of Object.entries(DESTINOS_CONHECIDOS)) {
            if (texto.includes(chave)) {
                console.log(`‚úÖ v2.3: Destino detectado: ${nome}`);
                return nome;
            }
        }
        
        console.log('‚ö†Ô∏è v2.3: Nenhum destino identificado');
        return null;
    } catch (error) {
        console.error('‚ùå v2.3: Erro ao extrair destino:', error);
        return null;
    }
}

// 4.2 - Detec√ß√£o de Voo com Conex√£o
function detectarVooComConexao(conteudo) {
    try {
        const texto = conteudo.toLowerCase();
        console.log('üîç v2.3: Verificando conex√£o...');
        
        const indicadores = [
            'voo com paradas', 'conex√£o', 'espera de', 'parada em', 'escala', 
            'uma escala', 'duas escalas', 'connecting flight', 'tempo de espera', 
            'layover', 'stopover'
        ];
        
        const temIndicadores = indicadores.some(ind => texto.includes(ind));
        const temMultiplosTrechos = (conteudo.match(/\d{2}:\d{2}\s+[A-Z]{3}/g) || []).length > 2;
        const temMultiplosHorarios = (conteudo.match(/\d{2}:\d{2}/g) || []).length >= 4;
        
        const ehConexao = temIndicadores || temMultiplosTrechos || temMultiplosHorarios;
        console.log(`‚úÖ v2.3: Conex√£o: ${ehConexao ? 'SIM' : 'N√ÉO'}`);
        
        return ehConexao;
    } catch (error) {
        console.error('‚ùå v2.3: Erro ao detectar conex√£o:', error);
        return false;
    }
}

// 4.3 - Detec√ß√£o de Tipo de Or√ßamento (ATUALIZADA v2.3)
function detectOrcamentoType(conteudoPrincipal, tipos) {
    try {
        const conteudoLower = conteudoPrincipal.toLowerCase();
        console.log('üîç v2.3: Detectando tipo de or√ßamento...');
        
        // Prioridade 0: Cruzeiro
        if (conteudoLower.includes('cruzeiro') || conteudoLower.includes('navio') || conteudoLower.includes('cabine')) {
            console.log('‚úÖ v2.3: Tipo: cruzeiro');
            return 'cruzeiro';
        }
        
        // Prioridade 1: Tipos selecionados pelo usu√°rio
        if (tipos && tipos.length > 0) {
            if (tipos.includes('A√©reo') && tipos.includes('Hotel')) {
                console.log('‚úÖ v2.3: Tipo: pacote_completo');
                return 'pacote_completo';
            }
            if (tipos.includes('Hotel') && !tipos.includes('A√©reo')) {
                const temDatasSequenciais = (conteudoPrincipal.match(/\d{2}\/\d{2}\s+a\s+\d{2}\/\d{2}/g) || []).length >= 2;
                if (temDatasSequenciais) {
                    console.log('‚úÖ v2.3: Tipo: roteiro_hoteis');
                    return 'roteiro_hoteis';
                }
                console.log('‚úÖ v2.3: Tipo: hoteis_multiplas_opcoes');
                return 'hoteis_multiplas_opcoes';
            }
            if (tipos.includes('Dicas')) {
                console.log('‚úÖ v2.3: Tipo: dicas_completas');
                return 'dicas_completas';
            }
            if (tipos.includes('Ranking')) {
                console.log('‚úÖ v2.3: Tipo: ranking');
                return 'ranking';
            }
        }
        
        // Prioridade 2: Detec√ß√£o por conte√∫do
        
        // Somente ida
        if (conteudoLower.includes('somente ida') || conteudoLower.includes('apenas ida') || conteudoLower.includes('one way')) {
            console.log('‚úÖ v2.3: Tipo: aereo_somente_ida');
            return 'aereo_somente_ida';
        }
        
        // Multitrecho
        if (conteudoLower.includes('multitrecho') || (conteudoLower.match(/trecho \d/gi) || []).length > 1) {
            console.log('‚úÖ v2.3: Tipo: multitrecho');
            return 'multitrecho';
        }
        
        // M√∫ltiplas companhias - MELHORADO v2.3
        const companhiasEncontradas = conteudoPrincipal.match(/(iberia|tap portugal|latam|gol|azul|avianca|american airlines|united|delta|air france|lufthansa|emirates)/gi) || [];
        const companhiasUnicas = [...new Set(companhiasEncontradas.map(c => c.toLowerCase()))];
        const temMultiplasCompanhias = companhiasUnicas.length >= 2;
        const temMultiplosLinks = (conteudoPrincipal.match(/https:\/\/www\.cvc\.com\.br\/carrinho-dinamico/g) || []).length >= 2;
        
        if (temMultiplasCompanhias || temMultiplosLinks) {
            console.log('‚úÖ v2.3: Tipo: multiplas_companhias');
            return 'multiplas_companhias';
        }
        
        // Conex√£o expl√≠cita
        const temConexaoExplicita = detectarVooComConexao(conteudoPrincipal);
        if (temConexaoExplicita) {
            console.log('‚úÖ v2.3: Tipo: aereo_conexao');
            return 'aereo_conexao';
        }
        
        // M√∫ltiplas op√ß√µes (2 ou 3 planos)
        const opcoesMarcadas = conteudoPrincipal.match(/OP√á√ÉO \d/gi) || [];
        if (opcoesMarcadas.length >= 3) {
            console.log('‚úÖ v2.3: Tipo: multiplas_opcoes_3_planos');
            return 'multiplas_opcoes_3_planos';
        } else if (opcoesMarcadas.length >= 2) {
            console.log('‚úÖ v2.3: Tipo: multiplas_opcoes_2_planos');
            return 'multiplas_opcoes_2_planos';
        }
        
        // Padr√£o: a√©reo simples
        console.log('‚úÖ v2.3: Tipo padr√£o: aereo_simples');
        return 'aereo_simples';
        
    } catch (error) {
        console.error('‚ùå v2.3: Erro ao detectar tipo:', error);
        return 'aereo_simples';
    }
}

// ================================================================================
// SE√á√ÉO 5: GERA√á√ÉO DE PROMPTS
// ================================================================================

function generatePrompt(tipoOrcamento, conteudoPrincipal, destino, parcelamento) {
    try {
        let destinoFinal = destino;
        
        // Extrair destino se necess√°rio
        if (!destinoFinal || tipoOrcamento === 'dicas_completas' || tipoOrcamento === 'ranking') {
            const destinoExtraido = extrairDestinoDoConteudo(conteudoPrincipal);
            if (destinoExtraido) {
                destinoFinal = destinoExtraido;
                console.log('‚úÖ v2.3: Destino extra√≠do:', destinoFinal);
            } else {
                destinoFinal = destino || 'Destino n√£o identificado';
            }
        }
        
        // Regras gerais de formata√ß√£o CORRIGIDAS v2.3
        const regrasGerais = `**REGRAS CR√çTICAS DE FORMATA√á√ÉO v2.3 - SEGUIR EXATAMENTE:**

**T√çTULO:** 
- Sempre: *{Companhia} - {Cidade Origem} ‚úà {Cidade Destino}*
- Para m√∫ltiplas companhias: *OP√á√ÉO N - {Companhia} - {Cidade Origem} ‚úà {Cidade Destino}*
- NUNCA usar c√≥digos de aeroporto no t√≠tulo

**PARCELAMENTO - REGRA CR√çTICA v2.3:**
1. Se tem "Entrada de R$ X + Yx de R$ Z" no texto:
   Formatar como: "üí≥ Total de R$ [valor_total] em at√© [Y+1]x, sendo a primeira de R$ X, mais Yx de R$ Z s/ juros no cart√£o"
2. Se foi selecionado ${parcelamento || 'nenhum'} no HTML:
   ${parcelamento ? `Formatar como: "üí≥ ${parcelamento}x de R$ [valor√∑${parcelamento}] s/ juros no cart√£o"` : 'N√ÉO incluir linha de parcelamento'}
3. Se n√£o h√° informa√ß√£o: N√ÉO incluir linha de parcelamento

**BAGAGEM - REGRA v2.3:**
- Se texto cont√©m "SEM bagagem": "‚úÖ Inclui 1 item pessoal + 1 mala de m√£o de 10kg"
- Se texto cont√©m "COM bagagem/babagem/abagegem": "‚úÖ Inclui 1 item pessoal + 1 mala de m√£o de 10kg + 1 bagagem despachada de 23kg"
- Se n√£o h√° informa√ß√£o: "‚úÖ Inclui 1 item pessoal + 1 mala de m√£o de 10kg"

**ASSENTO - REGRA v2.3:**
- Se texto cont√©m "pre reserva de assento": "üí∫ Inclui pr√© reserva de assento"
- Se N√ÉO menciona: N√ÉO incluir linha de assento

**PASSAGEIROS:**
- Formato: "04 adultos + 01 crian√ßa" (sempre com zero √† esquerda)
- Beb√™: 0-23 meses (idade em MESES)
- Crian√ßa: 2-11 anos (idade em ANOS)

**DATAS E HOR√ÅRIOS:**
- Datas: DD/MM (11/07)
- Hor√°rios: HH:MM (19:15)
- Chegada dia seguinte: adicionar (+1) ap√≥s hor√°rio

**VALORES:**
- Formato: R$ 1.234,56 (espa√ßo ap√≥s R$, v√≠rgula para decimais)

**FINALIZA√á√ÉO:**
- Sempre terminar com: "Valores sujeitos a confirma√ß√£o e disponibilidade"`;

        const tabelaAeroportos = `**TABELA DE AEROPORTOS v2.3:**\n${JSON.stringify(AEROPORTOS, null, 2)}`;

        // Switch para cada tipo
        switch (tipoOrcamento) {
            case 'multiplas_companhias':
                return `Crie or√ßamento de M√öLTIPLAS COMPANHIAS para ${destinoFinal}.
                
**INSTRU√á√ïES ESPEC√çFICAS:**
- IDENTIFICAR cada companhia diferente
- FORMATAR como OP√á√ÉO 1, OP√á√ÉO 2, OP√á√ÉO 3
- CADA op√ß√£o tem seu pr√≥prio parcelamento, bagagem e assento
- APLICAR regras v2.3 de formata√ß√£o

**DADOS BRUTOS:**
${conteudoPrincipal}

**DESTINO:** ${destinoFinal}
**TEMPLATE:** ${TEMPLATES.multiplas_companhias}
${regrasGerais}
${tabelaAeroportos}`;

            case 'aereo_conexao':
                return `Crie or√ßamento de VOO COM CONEX√ÉO DETALHADA para ${destinoFinal}.
                
**DADOS:** ${conteudoPrincipal}
**DESTINO:** ${destinoFinal}
**TEMPLATE:** ${TEMPLATES.aereo_conexao}
${regrasGerais}
${tabelaAeroportos}`;

            case 'aereo_somente_ida':
                return `Crie or√ßamento de A√âREO SOMENTE IDA.
                
**DADOS:** ${conteudoPrincipal}
**DESTINO:** ${destinoFinal}
**TEMPLATE:** ${TEMPLATES.aereo_somente_ida}
${regrasGerais}
${tabelaAeroportos}`;

            case 'multiplas_opcoes_3_planos':
                return `Crie or√ßamento com 3 PLANOS DE SERVI√áO.
                
**DADOS:** ${conteudoPrincipal}
**DESTINO:** ${destinoFinal}
**TEMPLATE:** ${TEMPLATES.multiplas_opcoes_3_planos}
${regrasGerais}
${tabelaAeroportos}`;

            case 'multiplas_opcoes_2_planos':
                return `Crie or√ßamento com 2 PLANOS DE SERVI√áO.
                
**DADOS:** ${conteudoPrincipal}
**DESTINO:** ${destinoFinal}
**TEMPLATE:** ${TEMPLATES.multiplas_opcoes_2_planos}
${regrasGerais}
${tabelaAeroportos}`;

            case 'roteiro_hoteis':
                return `Crie ROTEIRO DE HOT√âIS SEQUENCIAL.
                
**DADOS:** ${conteudoPrincipal}
**DESTINO:** ${destinoFinal}
**TEMPLATE:** ${TEMPLATES.roteiro_hoteis}
${regrasGerais}`;

            case 'hoteis_multiplas_opcoes':
                return `Crie or√ßamento de HOT√âIS - M√öLTIPLAS OP√á√ïES para ${destinoFinal}.
                
**DADOS:** ${conteudoPrincipal}
**DESTINO:** ${destinoFinal}
**TEMPLATE:** ${TEMPLATES.hoteis_multiplas_opcoes}
${regrasGerais}`;

            case 'pacote_completo':
                return `Crie PACOTE COMPLETO (A√©reo + Hotel + Servi√ßos) para ${destinoFinal}.
                
**DADOS:** ${conteudoPrincipal}
**DESTINO:** ${destinoFinal}
**TEMPLATE:** ${TEMPLATES.pacote_completo}
${regrasGerais}
${tabelaAeroportos}`;

            case 'multitrecho':
                return `Crie or√ßamento MULTITRECHO.
                
**DADOS:** ${conteudoPrincipal}
**TEMPLATE:** ${TEMPLATES.multitrecho}
${regrasGerais}
${tabelaAeroportos}`;

            case 'cruzeiro':
                return `Crie or√ßamento de CRUZEIRO.
                
**DADOS:** ${conteudoPrincipal}
**TEMPLATE:** ${TEMPLATES.cruzeiro}
${regrasGerais}`;

            case 'dicas_completas':
                return `Crie dicas de viagem completas para ${destinoFinal}.
                
**DESTINO:** ${destinoFinal}
Use informa√ß√µes REAIS e ESPEC√çFICAS de ${destinoFinal}.
**TEMPLATE:** ${TEMPLATES.dicas_completas}`;

            case 'ranking':
                return `Crie ranking dos melhores hot√©is em ${destinoFinal}.
                
**DESTINO:** ${destinoFinal}
Use hot√©is REAIS de ${destinoFinal} com avalia√ß√µes realistas.
**TEMPLATE:** ${TEMPLATES.ranking}`;

            default:
                return `Crie or√ßamento A√âREO IDA E VOLTA SIMPLES.
                
**DADOS:** ${conteudoPrincipal}
**DESTINO:** ${destinoFinal}
**TEMPLATE:** ${TEMPLATES.aereo_simples}
${regrasGerais}
${tabelaAeroportos}`;
        }
    } catch (error) {
        console.error('‚ùå v2.3: Erro ao gerar prompt:', error);
        return `Erro: ${error.message}`;
    }
}

// ================================================================================
// SE√á√ÉO 6: HANDLER PRINCIPAL
// ================================================================================

export default async function handler(req, res) {
    // Headers CORS
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    res.setHeader('Content-Type', 'application/json');

    // OPTIONS
    if (req.method === 'OPTIONS') {
        return res.status(200).end();
    }

    // GET - Status da API
    if (req.method === 'GET') {
        return res.status(200).json({
            success: true,
            status: 'operational',
            version: '2.3-ORGANIZADA',
            timestamp: new Date().toISOString(),
            message: 'CVC Itaqua API v2.3 - Sistema organizado com regras corrigidas',
            funcionalidades: [
                '‚úÖ 14 templates completos',
                '‚úÖ Regras de parcelamento corrigidas',
                '‚úÖ Regras de bagagem corrigidas',
                '‚úÖ Regras de assento corrigidas',
                '‚úÖ Estrutura modular e organizada',
                '‚úÖ Leitura: texto, imagem, PDF',
                '‚úÖ GPT-4o-mini + Claude Haiku',
                '‚úÖ 100% conforme manual CVC Itaqua'
            ],
            templates_disponiveis: Object.keys(TEMPLATES),
            total_templates: Object.keys(TEMPLATES).length
        });
    }

    // Verificar POST
    if (req.method !== 'POST') {
        return res.status(405).json({
            success: false,
            error: 'M√©todo n√£o permitido - use POST'
        });
    }

    try {
        console.log('üöÄ v2.3: Processando requisi√ß√£o...');
        
        // Validar body
        if (!req.body) {
            return res.status(400).json({
                success: false,
                error: 'Body obrigat√≥rio'
            });
        }

        // Extrair dados - SUPORTA TODOS OS TIPOS DE INPUT
        const {
            observacoes = '',
            textoColado = '',
            destino = '',
            adultos = 1,
            criancas = 0,
            tipos = [],
            parcelamento = '',
            imagemBase64 = null,
            pdfContent = null
        } = req.body;

        console.log('üìã v2.3: Dados recebidos:', {
            temTexto: !!(observacoes || textoColado),
            temImagem: !!imagemBase64,
            temPDF: !!pdfContent,
            destino,
            tipos,
            parcelamento
        });

        // Montar conte√∫do principal
        const conteudoPrincipal = (observacoes || textoColado || pdfContent || '').toString();
        
        if (!conteudoPrincipal.trim() && !imagemBase64) {
            return res.status(400).json({
                success: false,
                error: 'Adicione informa√ß√µes sobre a viagem'
            });
        }

        // Detectar tipo e gerar prompt
        const tipoOrcamento = detectOrcamentoType(conteudoPrincipal, tipos);
        const prompt = generatePrompt(tipoOrcamento, conteudoPrincipal, destino, parcelamento);
        console.log(`‚úÖ v2.3: Tipo detectado: ${tipoOrcamento}`);

        // Chamar IA
        let resultado, iaUsada;
        const usarClaude = imagemBase64 || conteudoPrincipal.length > 3000;
        const systemPrompt = `Voc√™ √© um assistente especialista da CVC Itaqua. 
        Sua fun√ß√£o √© analisar os dados e gerar um or√ßamento formatado para WhatsApp 
        seguindo EXATAMENTE o modelo e as regras fornecidas. 
        ATEN√á√ÉO ESPECIAL √†s regras v2.3 de parcelamento, bagagem e assento.
        Retorne apenas o texto final formatado, sem explica√ß√µes adicionais.`;

        if (usarClaude && process.env.ANTHROPIC_API_KEY) {
            console.log('üîÆ v2.3: Usando Claude Haiku...');
            iaUsada = 'claude-3-haiku';
            
            const messages = [{
                role: 'user',
                content: imagemBase64 ? [
                    { type: 'text', text: prompt },
                    {
                        type: 'image',
                        source: {
                            type: 'base64',
                            media_type: imagemBase64.split(';')[0].split(':')[1],
                            data: imagemBase64.split(',')[1]
                        }
                    }
                ] : prompt
            }];
            
            const response = await fetch('https://api.anthropic.com/v1/messages', {
                method: 'POST',
                headers: {
                    'x-api-key': process.env.ANTHROPIC_API_KEY,
                    'anthropic-version': '2023-06-01',
                    'content-type': 'application/json'
                },
                body: JSON.stringify({
                    model: 'claude-3-haiku-20240307',
                    max_tokens: 2048,
                    temperature: 0.1,
                    messages,
                    system: systemPrompt
                })
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`Claude erro ${response.status}: ${errorText}`);
            }

            const data = await response.json();
            resultado = data.content[0].text;
            
        } else {
            console.log('‚ö° v2.3: Usando GPT-4o-mini...');
            iaUsada = 'gpt-4o-mini';
            
            if (!process.env.OPENAI_API_KEY) {
                throw new Error('OPENAI_API_KEY n√£o configurada');
            }

            const response = await fetch('https://api.openai.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    model: 'gpt-4o-mini',
                    messages: [
                        { role: 'system', content: systemPrompt },
                        { role: 'user', content: prompt }
                    ],
                    temperature: 0.1,
                    max_tokens: 2048
                })
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`OpenAI erro ${response.status}: ${errorText}`);
            }

            const data = await response.json();
            resultado = data.choices[0].message.content;
        }

        // Limpar resultado
        resultado = resultado.replace(/```[\w]*\n?/g, '').replace(/```/g, '').trim();

        console.log('‚úÖ v2.3: Processamento conclu√≠do');
        
        return res.status(200).json({
            success: true,
            result: resultado,
            ia_usada: iaUsada,
            metadata: {
                version: '2.3-ORGANIZADA',
                timestamp: new Date().toISOString(),
                tipo: tipoOrcamento,
                destino_extraido: extrairDestinoDoConteudo(conteudoPrincipal),
                templates_disponiveis: Object.keys(TEMPLATES).length,
                regras_aplicadas: ['parcelamento_v2.3', 'bagagem_v2.3', 'assento_v2.3']
            }
        });

    } catch (error) {
        console.error('‚ùå v2.3: Erro:', error);
        
        return res.status(500).json({
            success: false,
            error: 'Erro interno do servidor',
            details: error.message,
            version: '2.3-ORGANIZADA'
        });
    }
}

// ================================================================================
// LOGS DE INICIALIZA√á√ÉO
// ================================================================================
console.log('‚úÖ CVC Itaqua v2.3-ORGANIZADA carregado com sucesso!');
console.log('üìã 14 templates dispon√≠veis');
console.log('üîß Regras corrigidas: Parcelamento, Bagagem, Assento');
console.log('üìÅ Estrutura modular e organizada');
console.log('üìå 100% conforme Manual CVC Itaqua');
console.log('üìÖ Atualiza√ß√£o: 18/12/2024');
