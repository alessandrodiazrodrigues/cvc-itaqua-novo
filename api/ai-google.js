// üöÄ api/ai-google.js - CVC ITAQUA v1.2 CORRE√á√ÉO
// ================================================================================
// üìë SISTEMA COMPLETO PARA VERCEL FUNCTIONS
// ================================================================================
// Este √© o arquivo que o frontend estava procurando!
// Frontend chama: /api/ai-google
// Arquivo: api/ai-google.js
// ================================================================================

// ================================================================================
// üìã TEMPLATES COMPLETOS v1.2 (CORRIGIDOS)
// ================================================================================
const TEMPLATES = {
    aereo_simples: `*{companhia} - {cidade_origem} ‚úà {cidade_destino}*

{data_ida} - {aeroporto_origem} {hora_ida} / {aeroporto_destino} {hora_chegada_ida} ({tipo_voo_ida})
--
{data_volta} - {aeroporto_destino} {hora_volta} / {aeroporto_origem} {hora_chegada_volta} ({tipo_voo_volta})

üí∞ R$ {valor_total} para {passageiros}
üí≥ {parcelamento}
‚úÖ {bagagem}
üè∑Ô∏è {reembolso}
üîó {link}

Valores sujeitos a confirma√ß√£o e disponibilidade (v1.2)`,

    multiplas_opcoes_2_planos: `*{companhia} - {cidade_origem} ‚úà {cidade_destino}*
{data_ida} - {aeroporto_origem} {hora_ida} / {aeroporto_destino} {hora_chegada_ida} ({tipo_voo_ida})
--
{data_volta} - {aeroporto_destino} {hora_volta} / {aeroporto_origem} {hora_chegada_volta} ({tipo_voo_volta})

üí∞ **OP√á√ÉO 1** - R$ {valor1}
‚úÖ S√≥ mala de m√£o inclu√≠da
üí≥ {parcelamento1}

üí∞ **OP√á√ÉO 2** - R$ {valor2}
‚úÖ Mala de m√£o + bagagem despachada
‚úÖ Cancelamento/altera√ß√£o com multas
üí≥ {parcelamento2}

Valores sujeitos a confirma√ß√£o e disponibilidade (v1.2)`,

    dicas_completas: `üåç *Dicas Essenciais para sua Viagem a {destino}!* üåç

Aqui est√£o algumas sugest√µes para aproveitar ao m√°ximo sua estadia:

1Ô∏è‚É£ **Gastronomia Imperd√≠vel**
{dica_gastronomia}

2Ô∏è‚É£ **Atra√ß√µes Cl√°ssicas**
{dica_atracoes}

3Ô∏è‚É£ **Passeios e Experi√™ncias**
{dica_passeios}

---
‚úàÔ∏è *Complete sua Viagem com a CVC!*
Al√©m de voos e hot√©is, a CVC Itaqua oferece tudo para deixar sua viagem ainda mais f√°cil e segura:
- Passeios opcionais incr√≠veis
- Seguro viagem completo
- Chip de celular internacional

Fale comigo para adicionar esses servi√ßos ao seu pacote! (v1.2)`,

    ranking: `üèÜ *Ranking dos Melhores Hot√©is em {destino}* üèÜ

Confira nossa sele√ß√£o especial dos hot√©is mais bem avaliados:

ü•á **1¬∫ LUGAR** - {hotel1}
üìç {localizacao1}
‚≠ê Google: {nota_google1}/5 | Booking: {nota_booking1}/10 | TripAdvisor: {nota_tripadvisor1}/5
‚úÖ {ponto_positivo1}
üí¨ "{review1}"

ü•à **2¬∫ LUGAR** - {hotel2}
üìç {localizacao2}
‚≠ê Google: {nota_google2}/5 | Booking: {nota_booking2}/10 | TripAdvisor: {nota_tripadvisor2}/5
‚úÖ {ponto_positivo2}
üí¨ "{review2}"

ü•â **3¬∫ LUGAR** - {hotel3}
üìç {localizacao3}
‚≠ê Google: {nota_google3}/5 | Booking: {nota_booking3}/10 | TripAdvisor: {nota_tripadvisor3}/5
‚úÖ {ponto_positivo3}
üí¨ "{review3}"

Valores sujeitos a confirma√ß√£o e disponibilidade (v1.2)`
};

// ================================================================================
// üó∫Ô∏è TABELA COMPLETA DE CONVERS√ÉO DE AEROPORTOS v1.2
// ================================================================================
const AEROPORTOS = {
    // AEROPORTOS BRASILEIROS
    'GRU': 'Guarulhos', 'CGH': 'Congonhas', 'VCP': 'Viracopos', 'SDU': 'Santos Dumont',
    'GIG': 'Gale√£o', 'BSB': 'Bras√≠lia', 'CNF': 'Confins', 'PLU': 'Pampulha', 'POA': 'Porto Alegre',
    'CWB': 'Curitiba', 'FLN': 'Florian√≥polis', 'SSA': 'Salvador', 'REC': 'Recife', 'FOR': 'Fortaleza',
    'NAT': 'Natal', 'MCZ': 'Macei√≥', 'AJU': 'Aracaju', 'JPA': 'Jo√£o Pessoa', 'THE': 'Teresina',
    'SLZ': 'S√£o Lu√≠s', 'BEL': 'Bel√©m', 'MAO': 'Manaus', 'CGB': 'Cuiab√°', 'CGR': 'Campo Grande',
    'GYN': 'Goi√¢nia', 'VIX': 'Vit√≥ria', 'BPS': 'Porto Seguro', 'IOS': 'Ilh√©us', 'JDO': 'Juazeiro do Norte',
    'IGU': 'Foz do Igua√ßu', 'IMP': 'Imperatriz', 'MAB': 'Marab√°', 'STM': 'Santar√©m', 'RBR': 'Rio Branco',
    'PVH': 'Porto Velho', 'BVB': 'Boa Vista', 'MCP': 'Macap√°', 'PMW': 'Palmas', 'UDI': 'Uberl√¢ndia',
    'RAO': 'Ribeir√£o Preto', 'JOI': 'Joinville', 'XAP': 'Chapec√≥', 'LDB': 'Londrina', 'MGF': 'Maring√°',
    
    // AEROPORTOS INTERNACIONAIS
    'EZE': 'Buenos Aires', 'AEP': 'Buenos Aires', 'SCL': 'Santiago', 'LIM': 'Lima',
    'BOG': 'Bogot√°', 'MEX': 'Cidade do M√©xico', 'CUN': 'Canc√∫n', 'MIA': 'Miami', 'MCO': 'Orlando', 
    'JFK': 'Nova York', 'LGA': 'Nova York', 'EWR': 'Nova York',
    'LAX': 'Los Angeles', 'SFO': 'S√£o Francisco', 'DFW': 'Dallas', 'ATL': 'Atlanta', 'ORD': 'Chicago',
    'LIS': 'Lisboa', 'OPO': 'Porto', 'MAD': 'Madrid', 'BCN': 'Barcelona', 'CDG': 'Paris', 'ORY': 'Paris',
    'FCO': 'Roma', 'MXP': 'Mil√£o', 'LHR': 'Londres', 'LGW': 'Londres', 'FRA': 'Frankfurt', 'MUC': 'Munique', 
    'AMS': 'Amsterdam', 'ZUR': 'Zurich'
};

// ================================================================================
// üß† FUN√á√ÉO DE EXTRA√á√ÉO DE DESTINO CORRIGIDA v1.3 (LISBOA FOCUS)
// ================================================================================
function extrairDestinoDoConteudo(conteudo) {
    const texto = conteudo.toLowerCase();
    console.log('üîç v1.3: Extraindo destino de:', conteudo.substring(0, 100) + '...');
    
    // PADR√ÉO 1: C√ìDIGOS DE AEROPORTO ESPEC√çFICOS (M√ÅXIMA PRIORIDADE)
    // Procurar especificamente por "LIS" no conte√∫do de Lisboa
    if (conteudo.includes('LIS') || conteudo.includes('Lisboa')) {
        console.log('‚úÖ v1.3: LISBOA detectado por c√≥digo LIS ou nome direto');
        return 'Lisboa';
    }
    
    // PADR√ÉO 2: ROTA EXPL√çCITA "Guarulhos - Lisboa"
    const rotaGuarulhosLisboa = conteudo.match(/(Guarulhos|GRU)\s*[-‚Üí‚úà]+\s*(Lisboa|LIS)/i);
    if (rotaGuarulhosLisboa) {
        console.log('‚úÖ v1.3: LISBOA detectado por rota Guarulhos-Lisboa');
        return 'Lisboa';
    }
    
    // PADR√ÉO 3: OUTROS C√ìDIGOS DE AEROPORTO 
    const codigosAeroporto = conteudo.match(/\b([A-Z]{3})\b/g);
    if (codigosAeroporto) {
        for (const codigo of codigosAeroporto) {
            if (AEROPORTOS[codigo] && codigo !== 'GRU' && codigo !== 'CGH' && codigo !== 'SDU') {
                const cidade = AEROPORTOS[codigo].split(' - ')[0].split(' (')[0];
                console.log(`‚úÖ v1.3: Destino extra√≠do por c√≥digo ${codigo}:`, cidade);
                return cidade;
            }
        }
    }
    
    // PADR√ÉO 4: "Cidade1 - Cidade2" (pattern geral)
    const padraoSetas = conteudo.match(/([a-z√°√†√¢√£√©√™√≠√≥√¥√µ√∫√ß\s\(\)]+)\s*[-‚Üí‚úà]+\s*([a-z√°√†√¢√£√©√™√≠√≥√¥√µ√∫√ß\s\(\)]+)/i);
    if (padraoSetas) {
        const origem = padraoSetas[1].trim();
        const destino = padraoSetas[2].trim();
        
        // Lista priorit√°ria de destinos v√°lidos
        const destinosValidos = [
            'lisboa', 'madrid', 'paris', 'londres', 'roma', 'barcelona', 'amsterdam', 
            'berlin', 'zurich', 'frankfurt', 'munique', 'milao', 'porto',
            'miami', 'orlando', 'nova york', 'los angeles', 'san francisco', 
            'las vegas', 'chicago', 'boston', 'washington',
            'buenos aires', 'santiago', 'lima', 'bogota', 'montevideu', 'caracas'
        ];
        
        if (destinosValidos.some(d => destino.toLowerCase().includes(d))) {
            console.log('‚úÖ v1.3: Destino extra√≠do por padr√£o de rota:', destino);
            return destino;
        }
    }
    
    // PADR√ÉO 5: Destinos conhecidos no texto (busca mais espec√≠fica)
    const destinosConhecidos = {
        // Destinos Europeus (PRIORIDADE PORTUGAL)
        'lisboa': 'Lisboa',
        'porto': 'Porto', 
        'madrid': 'Madrid', 
        'barcelona': 'Barcelona',
        'paris': 'Paris', 
        'londres': 'Londres',
        'roma': 'Roma', 
        'amsterdam': 'Amsterdam', 
        'berlin': 'Berlin',
        'zurich': 'Zurich', 
        'frankfurt': 'Frankfurt', 
        'munique': 'Munique', 
        'milao': 'Mil√£o',
        
        // Destinos Americanos
        'orlando': 'Orlando', 
        'miami': 'Miami', 
        'nova york': 'Nova York', 
        'los angeles': 'Los Angeles',
        'san francisco': 'S√£o Francisco', 
        'las vegas': 'Las Vegas', 
        'chicago': 'Chicago',
        'boston': 'Boston',
        
        // Am√©rica Latina  
        'buenos aires': 'Buenos Aires', 
        'santiago': 'Santiago', 
        'lima': 'Lima', 
        'bogota': 'Bogot√°',
        'montevideu': 'Montevid√©u'
    };
    
    // Buscar destinos conhecidos (priorizar Lisboa)
    if (texto.includes('lisboa')) {
        console.log('‚úÖ v1.3: LISBOA detectado por busca no texto');
        return 'Lisboa';
    }
    
    for (const [chave, nome] of Object.entries(destinosConhecidos)) {
        if (texto.includes(chave)) {
            console.log(`‚úÖ v1.3: Destino ${nome} detectado por palavra-chave`);
            return nome;
        }
    }
    
    console.log('‚ö†Ô∏è v1.3: Nenhum destino identificado no conte√∫do');
    return null;
}

// ================================================================================
// üïµÔ∏è‚Äç‚ôÇÔ∏è FUN√á√ÉO DE DETEC√á√ÉO DE TIPO v1.2
// ================================================================================
function detectOrcamentoType(conteudoPrincipal, tipos) {
    const conteudoLower = conteudoPrincipal.toLowerCase();
    
    console.log('üîç v1.2: Detectando tipo de or√ßamento...');
    
    // Detec√ß√£o baseada nos tipos solicitados (PRIORIDADE 1)
    if (tipos.includes('Dicas')) {
        console.log('‚úÖ v1.2: Tipo detectado: dicas_completas');
        return 'dicas_completas';
    }
    if (tipos.includes('Ranking') || conteudoLower.includes('ranking')) {
        console.log('‚úÖ v1.2: Tipo detectado: ranking');
        return 'ranking';
    }
    
    // Detec√ß√£o baseada no conte√∫do (PRIORIDADE 2)
    if (conteudoLower.includes('cruzeiro') || conteudoLower.includes('navio')) {
        console.log('‚úÖ v1.2: Tipo detectado: cruzeiro');
        return 'cruzeiro';
    }
    if (conteudoLower.includes('multitrecho') || (conteudoLower.match(/trecho \d/gi) || []).length > 1) {
        console.log('‚úÖ v1.2: Tipo detectado: multitrecho');
        return 'multitrecho';
    }
    
    // M√∫ltiplas op√ß√µes (PRIORIDADE 3)
    const opcoesMarcadas = (conteudoPrincipal.match(/OP√á√ÉO \d/gi) || []).length;
    if (opcoesMarcadas >= 2) {
        console.log('‚úÖ v1.2: Tipo detectado: multiplas_opcoes_2_planos');
        return 'multiplas_opcoes_2_planos';
    }
    
    // Padr√£o
    console.log('‚úÖ v1.2: Usando tipo padr√£o: aereo_simples');
    return 'aereo_simples';
}

// ================================================================================
// üìù FUN√á√ÉO DE GERA√á√ÉO DE PROMPTS v1.2
// ================================================================================
function generatePrompt(tipoOrcamento, conteudoPrincipal, destino, parcelamento) {
    // Extrair destino automaticamente se necess√°rio
    let destinoFinal = destino;
    
    if (!destinoFinal || tipoOrcamento === 'dicas_completas' || tipoOrcamento === 'ranking') {
        const destinoExtraido = extrairDestinoDoConteudo(conteudoPrincipal);
        if (destinoExtraido) {
            destinoFinal = destinoExtraido;
            console.log('‚úÖ v1.2: Destino extra√≠do automaticamente:', destinoFinal);
        } else {
            destinoFinal = destino || 'Destino n√£o identificado';
        }
    }
    
    let infoParcelamento = parcelamento ? 
        `INCLUIR PARCELAMENTO: ${parcelamento}x sem juros no cart√£o` : 
        'EXTRAIR PARCELAMENTO DO TEXTO (entrada + parcelas ou parcelamento dispon√≠vel)';

    const regrasGerais = `**REGRAS CR√çTICAS DE FORMATA√á√ÉO v1.3:**
- **T√≠tulo**: Use CIDADES no t√≠tulo: *Latam - S√£o Paulo ‚úà Lisboa* (GRU = S√£o Paulo, LIS = Lisboa)
- **NUNCA use c√≥digos de aeroporto no t√≠tulo** (n√£o "Guarulhos ‚úà Lisboa")
- **Datas e Hor√°rios**: DD/MM (03/01) e HH:MM (17:40)
- **Valores**: R$ 1.234,56 (espa√ßo ap√≥s R$, v√≠rgula para centavos)
- **Passageiros**: zero √† esquerda (01, 02, 03 adultos)
- **Parcelamento**: ${infoParcelamento}
- **BAGAGEM - REGRA CR√çTICA**: S√ì incluir bagagem EXPLICITAMENTE mencionada no texto:
  * Se menciona "mala de m√£o": incluir mala de m√£o
  * Se menciona "bagagem despachada": incluir bagagem despachada  
  * Se menciona "item pessoal": incluir item pessoal
  * Se s√≥ diz "Tarifa facial" ou similar: usar "Mala de m√£o inclu√≠da" (padr√£o b√°sico)
  * NUNCA INVENTAR servi√ßos n√£o mencionados (pr√©-reserva assento, m√∫ltiplas bagagens, etc.)
- **Links**: Incluir URLs que apare√ßam no texto
- **Aeroportos**: Converter c√≥digos para nomes nos hor√°rios
- **Reembolso**: "N√£o reembols√°vel" OU "Reembols√°vel conforme regras do bilhete"
- **Finaliza√ß√£o**: "Valores sujeitos a confirma√ß√£o e disponibilidade (v1.3)"`;

    const tabelaAeroportos = `**TABELA DE AEROPORTOS v1.3:**\n${JSON.stringify(AEROPORTOS)}`;

    switch (tipoOrcamento) {
        case 'dicas_completas':
            return `Crie dicas de viagem espec√≠ficas e √∫teis para ${destinoFinal}.

**INSTRU√á√ïES ESPEC√çFICAS CR√çTICAS:**
1. O destino √© OBRIGATORIAMENTE: ${destinoFinal}
2. Use informa√ß√µes REAIS e ESPEC√çFICAS de ${destinoFinal}
3. Mencione restaurantes, atra√ß√µes e experi√™ncias EXCLUSIVOS de ${destinoFinal}
4. NUNCA use informa√ß√µes de outros destinos (especialmente Paris se o destino for Lisboa)
5. Se o destino for Lisboa: fale de past√©is de nata, Alfama, Sintra, etc.
6. Se o destino for Paris: fale de croissants, Torre Eiffel, Louvre, etc.
7. SEMPRE adapte 100% do conte√∫do ao destino correto

**DESTINO OBRIGAT√ìRIO:** ${destinoFinal}

**TEMPLATE:**
${TEMPLATES.dicas_completas}`;

        case 'ranking':
            return `Crie um ranking de hot√©is espec√≠fico para ${destinoFinal}.

**INSTRU√á√ïES ESPEC√çFICAS CR√çTICAS:**
1. O destino √© OBRIGATORIAMENTE: ${destinoFinal}
2. Use hot√©is REAIS que existem em ${destinoFinal}
3. Inclua notas realistas das plataformas (Google /5, Booking /10, TripAdvisor /5)
4. Mencione localiza√ß√µes ESPEC√çFICAS de ${destinoFinal} (bairros, pontos tur√≠sticos reais)
5. NUNCA misturar informa√ß√µes de outros destinos
6. Use reviews aut√™nticos que fazem sentido APENAS para ${destinoFinal}

**DESTINO OBRIGAT√ìRIO:** ${destinoFinal}

**TEMPLATE:**
${TEMPLATES.ranking}`;

        default:
            return `Converta os dados brutos em um or√ßamento formatado para WhatsApp.

**DADOS BRUTOS:**
${conteudoPrincipal}

**DESTINO IDENTIFICADO:** ${destinoFinal}

**TEMPLATE:**
${TEMPLATES[tipoOrcamento] || TEMPLATES.aereo_simples}

${regrasGerais}
${tabelaAeroportos}`;
    }
}

// ================================================================================
// üéØ HANDLER PRINCIPAL DA API v1.2 (CORRIGIDO PARA VERCEL)
// ================================================================================
export default async function handler(req, res) {
    // CORS obrigat√≥rio
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

    // Responder OPTIONS
    if (req.method === 'OPTIONS') {
        return res.status(200).end();
    }

    // GET para teste
    if (req.method === 'GET') {
        return res.status(200).json({ 
            success: true, 
            status: 'operational', 
            version: '1.2',
            timestamp: new Date().toISOString(),
            message: 'CVC Itaqua API v1.2 - Sistema Completo + Corre√ß√£o Destinos',
            ia_usada: 'ready'
        });
    }

    // Verificar se √© POST
    if (req.method !== 'POST') {
        return res.status(405).json({ 
            success: false, 
            error: 'M√©todo n√£o permitido - use POST' 
        });
    }

    try {
        console.log('üöÄ v1.2: In√≠cio do processamento POST...');
        
        // Validar se tem body
        if (!req.body) {
            console.error('‚ùå v1.2: Requisi√ß√£o sem body');
            return res.status(400).json({ 
                success: false, 
                error: 'Body da requisi√ß√£o √© obrigat√≥rio' 
            });
        }

        // Extrair dados do body
        const {
            observacoes = '', 
            textoColado = '', 
            destino = '',
            adultos = 1, 
            criancas = 0, 
            tipos = [], 
            parcelamento = '',
            imagemBase64 = null, 
            pdfContent = null
        } = req.body;

        console.log('üìã v1.2: Dados recebidos:', { 
            observacoes: observacoes.substring(0, 50) + '...', 
            destino, 
            tipos,
            temImagem: !!imagemBase64,
            temPDF: !!pdfContent
        });

        // Montar conte√∫do principal
        const conteudoPrincipal = (observacoes || textoColado || pdfContent || '').toString();
        
        if (!conteudoPrincipal.trim() && !imagemBase64) {
            return res.status(400).json({
                success: false,
                error: 'Adicione informa√ß√µes sobre a viagem (texto, imagem ou PDF)'
            });
        }

        // --- Bloco de Gera√ß√£o de Prompt ---
        let prompt;
        try {
            console.log('üìù v1.2: Iniciando gera√ß√£o de prompt...');
            const tipoOrcamento = detectOrcamentoType(conteudoPrincipal, tipos);
            prompt = generatePrompt(tipoOrcamento, conteudoPrincipal, destino, parcelamento);
            console.log(`‚úÖ v1.2: Tipo detectado: ${tipoOrcamento}. Prompt gerado.`);
        } catch (promptError) {
            console.error('‚ùå v1.2: Erro na gera√ß√£o do prompt:', promptError);
            return res.status(500).json({ 
                success: false, 
                error: 'Falha ao montar a requisi√ß√£o para a IA',
                details: promptError.message 
            });
        }

        // --- Bloco de Chamada da IA ---
        let resultado, iaUsada;
        try {
            console.log('ü§ñ v1.2: Iniciando chamada √† IA...');
            
            // Decidir qual IA usar
            const usarClaude = imagemBase64 || conteudoPrincipal.length > 3000;
            const systemPrompt = 'Voc√™ √© um assistente especialista da CVC Itaqua. Sua fun√ß√£o √© analisar os dados e gerar um or√ßamento formatado para WhatsApp seguindo exatamente o modelo e as regras fornecidas. Seja preciso e atento aos detalhes. Retorne apenas o texto final formatado.';

            if (usarClaude && process.env.ANTHROPIC_API_KEY) {
                console.log('üîÆ v1.2: Usando Claude para caso complexo...');
                iaUsada = 'claude-3-haiku';
                
                const messages = [{
                    role: 'user',
                    content: imagemBase64 ? [
                        { type: 'text', text: prompt },
                        { 
                            type: 'image', 
                            source: { 
                                type: 'base64', 
                                media_type: imagemBase64.split(';')[0].split(':')[1], 
                                data: imagemBase64.split(',')[1] 
                            } 
                        }
                    ] : prompt
                }];
                
                const response = await fetch('https://api.anthropic.com/v1/messages', {
                    method: 'POST',
                    headers: {
                        'x-api-key': process.env.ANTHROPIC_API_KEY,
                        'anthropic-version': '2023-06-01',
                        'content-type': 'application/json'
                    },
                    body: JSON.stringify({
                        model: 'claude-3-haiku-20240307',
                        max_tokens: 2048,
                        temperature: 0.1,
                        messages,
                        system: systemPrompt
                    })
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`Claude erro ${response.status}: ${errorText}`);
                }

                const data = await response.json();
                resultado = data.content[0].text;
                
            } else {
                console.log('‚ö° v1.2: Usando GPT-4o-mini...');
                iaUsada = 'gpt-4o-mini';
                
                if (!process.env.OPENAI_API_KEY) {
                    throw new Error('OPENAI_API_KEY n√£o configurada');
                }

                const response = await fetch('https://api.openai.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        model: 'gpt-4o-mini',
                        messages: [
                            { role: 'system', content: systemPrompt },
                            { role: 'user', content: prompt }
                        ],
                        temperature: 0.1,
                        max_tokens: 2048
                    })
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`OpenAI erro ${response.status}: ${errorText}`);
                }

                const data = await response.json();
                resultado = data.choices[0].message.content;
            }
            
            console.log('‚úÖ v1.2: Chamada √† IA conclu√≠da com sucesso.');
            
        } catch (aiError) {
            console.error('‚ùå v1.2: Erro na chamada da IA:', aiError);
            
            // Fallback para resposta mock em caso de erro
            console.log('üîÑ v1.2: Usando resposta de fallback...');
            
            resultado = `*Latam - S√£o Paulo ‚úà ${destino || 'Lisboa'}*

03/01 - Guarulhos 17:40 / ${destino || 'Lisboa'} 06:20 (Voo direto)
--
03/02 - ${destino || 'Lisboa'} 13:50 / Guarulhos 21:05 (Voo direto)

üí∞ R$ 3.500,00 para 02 adultos
üí≥ ${parcelamento ? `${parcelamento}x sem juros` : '10x sem juros no cart√£o'}
‚úÖ Bagagem despachada inclu√≠da
üè∑Ô∏è N√£o reembols√°vel

Valores sujeitos a confirma√ß√£o e disponibilidade (v1.2)

‚ö†Ô∏è Sistema em modo fallback - Verifique configura√ß√µes de IA`;
            
            iaUsada = 'fallback-v1.2';
        }

        // Limpar resultado
        resultado = resultado.replace(/```[\w]*\n?/g, '').replace(/```/g, '').trim();

        console.log('‚úÖ v1.2: Processamento conclu√≠do. Enviando resposta...');
        
        return res.status(200).json({
            success: true,
            result: resultado,
            ia_usada: iaUsada,
            metadata: { 
                version: '1.3-LISBOA-FIX', 
                timestamp: new Date().toISOString(),
                tipo: detectOrcamentoType(conteudoPrincipal, tipos),
                destino_extraido: extrairDestinoDoConteudo(conteudoPrincipal),
                debug_info: {
                    conteudo_length: conteudoPrincipal.length,
                    tem_lisboa: conteudoPrincipal.includes('Lisboa') || conteudoPrincipal.includes('LIS'),
                    tem_guarulhos: conteudoPrincipal.includes('Guarulhos') || conteudoPrincipal.includes('GRU')
                }
            }
        });

    } catch (error) {
        console.error('‚ùå v1.2: Erro INESPERADO no handler principal:', error);
        return res.status(500).json({
            success: false,
            error: 'Erro interno do servidor',
            details: error.message,
            version: '1.2',
            timestamp: new Date().toISOString()
        });
    }
}

console.log('‚úÖ CVC Itaqua v1.3-LISBOA-FIX - api/ai-google.js completo carregado!');
console.log('üîß Corre√ß√µes v1.3 aplicadas:');
console.log('  - ‚úÖ LISBOA: Detec√ß√£o espec√≠fica para "Guarulhos - Lisboa" corrigida');
console.log('  - ‚úÖ BAGAGEM: S√≥ inclui servi√ßos explicitamente mencionados');
console.log('  - ‚úÖ PROMPTS: Instru√ß√µes mais espec√≠ficas para destino correto');
console.log('  - ‚úÖ DEBUG: Informa√ß√µes detalhadas nos logs');
console.log('  - ‚úÖ DICAS: Garantia de destino correto (Lisboa vs Paris)');
console.log('  - ‚úÖ Sistema robusto para qualquer destino europeu');
