// üöÄ CVC ITAQUA v6.0 - GOOGLE DOCS API
// L√™ o manual diretamente do Google Docs

import { google } from 'googleapis';

// Bloco de autentica√ß√£o corrigido que usa a vari√°vel de ambiente √∫nica
const credentialsJsonString = process.env.GOOGLE_CREDENTIALS_JSON;

if (!credentialsJsonString) {
  throw new Error('A vari√°vel de ambiente GOOGLE_CREDENTIALS_JSON n√£o foi definida.');
}

const credentials = JSON.parse(credentialsJsonString);

const auth = new google.auth.GoogleAuth({
  credentials: {
    client_email: credentials.client_email,
    private_key: credentials.private_key,
  },
  scopes: ['https://www.googleapis.com/auth/documents.readonly'],
});

// Fun√ß√£o para ler o Google Docs
async function lerManualGoogleDocs() {
  // ... (a fun√ß√£o lerManualGoogleDocs continua a mesma, n√£o precisa alterar)
  try {
    const docs = google.docs({ version: 'v1', auth });
    const documentId = process.env.GOOGLE_DOCS_ID || '1J6luZmr0Q_ldqsmEJ4kuMEfA7BYt3DInd7-Tt98hInY';
    const response = await docs.documents.get({ documentId });
    let manualTexto = '';
    const content = response.data.body?.content || [];
    content.forEach(element => {
      if (element.paragraph) {
        element.paragraph.elements?.forEach(elem => {
          if (elem.textRun?.content) {
            manualTexto += elem.textRun.content;
          }
        });
      }
    });
    console.log('‚úÖ Manual carregado do Google Docs:', manualTexto.length, 'caracteres');
    return manualTexto;
  } catch (error) {
    console.error('‚ùå Erro ao ler Google Docs:', error.message);
    throw new Error(`Erro ao conectar com Google Docs: ${error.message}`);
  }
}

export default async function handler(req, res) {
  // ... (o in√≠cio do handler continua o mesmo: CORS, GET, etc.)

  // POST - Processar or√ßamento
  if (req.method === 'POST') {
    try {
      const { 
        observacoes = '', 
        textoColado = '', 
        destino = '',
        // ... (resto da desestrutura√ß√£o)
      } = req.body;

      const manualCompleto = await lerManualGoogleDocs();
      const conteudoPrincipal = observacoes || textoColado || '';
      
      let prompt = '';
      
      // L√≥gica para Dicas e Ranking continua a mesma
      if (req.body.tipo === 'dicas' && destino) {
        // ... prompt para dicas
      } else if (req.body.tipo === 'ranking' && destino) {
        // ... prompt para ranking
      } else {
        // ======================================================================
        // PROMPT COMPLETO E FINAL PARA OR√áAMENTOS
        // ======================================================================
        prompt = `Voc√™ √© um assistente especialista da CVC Itaqua. Sua √∫nica fun√ß√£o √© receber DADOS de um cliente e um MANUAL de formata√ß√£o e retornar um or√ßamento perfeitamente formatado, seguindo a l√≥gica de decis√£o abaixo.

**MANUAL COMPLETO (Use para consultar os templates exatos):**
${manualCompleto}

**DADOS DO CLIENTE PARA PROCESSAR:**
${conteudoPrincipal}

// =================================================================
// L√ìGICA DE DECIS√ÉO OBRIGAT√ìRIA (SIGA ESTA √ÅRVORE DE DECIS√ÉO):
// =================================================================

1.  **PRIMEIRA VERIFICA√á√ÉO - TIPO DE SERVI√áO:**
    * **SE** os "DADOS DO CLIENTE" contiverem as palavras "cruzeiro", "navio" ou "cabine", **ENT√ÉO** use o template "üö¢ 6. CRUZEIRO".
    * **SEN√ÉO SE** os "DADOS DO CLIENTE" contiverem as palavras "pacote", "hospedagem", "hotel" ou a express√£o "a√©reo + hotel", **ENT√ÉO** use o template "üèñÔ∏è 7. PACOTE COMPLETO".
    * **SEN√ÉO**, prossiga para a verifica√ß√£o de voos.

2.  **SEGUNDA VERIFICA√á√ÉO - ESTRUTURA DO VOO:**
    * **SE** os "DADOS DO CLIENTE" contiverem "multitrecho" ou m√∫ltiplos "Trecho 1", "Trecho 2", etc., **ENT√ÉO** use o template "üó∫Ô∏è 5. MULTITRECHO".
    * **SEN√ÉO SE** os "DADOS DO CLIENTE" contiverem "op√ß√£o 1", "op√ß√£o 2" e "op√ß√£o 3", **ENT√ÉO** use o template "üî¢ 4. M√öLTIPLAS OP√á√ïES - 3 PLANOS".
    * **SEN√ÉO SE** os "DADOS DO CLIENTE" contiverem "op√ß√£o 1" e "op√ß√£o 2":
        * **SE** as companhias a√©reas forem diferentes (ex: "OP√á√ÉO 1 - Copa", "OP√á√ÉO 2 - American Airlines"), **ENT√ÉO** use o template "üåç 6. M√öLTIPLAS COMPANHIAS INTERNACIONAIS".
        * **SEN√ÉO** (se for a mesma companhia), **ENT√ÉO** use o template "üî¢ 3. M√öLTIPLAS OP√á√ïES - 2 PLANOS".
    * **SEN√ÉO SE** os "DADOS DO CLIENTE" mencionarem explicitamente "conex√£o" junto com um tempo de espera (ex: "2h05 de espera"), **ENT√ÉO** use o template "‚úàÔ∏è 2. A√âREO IDA E VOLTA COM CONEX√ÉO DETALHADA".
    * **SEN√ÉO SE** os "DADOS DO CLIENTE" contiverem as palavras "somente ida" ou "apenas ida", **ENT√ÉO** use o template "‚úàÔ∏è 2. A√âREO SOMENTE IDA".
    * **SEN√ÉO** (para todos os outros casos de voo ida e volta), **ENT√ÉO** use o template padr√£o "‚úàÔ∏è 1. A√âREO IDA E VOLTA SIMPLES".

3.  **REGRA ESPECIAL PARA M√öLTIPLOS OR√áAMENTOS:**
    * **SE** os "DADOS DO CLIENTE" contiverem or√ßamentos claramente distintos e n√£o relacionados (ex: um voo Salvador-Rio e outro Guarulhos-Rio), **ENT√ÉO** aplique a l√≥gica de decis√£o acima para **CADA OR√áAMENTO SEPARADAMENTE** e apresente os resultados formatados um abaixo do outro.

4.  **REGRAS FINAIS DE FORMATA√á√ÉO (APLIQUE AP√ìS ESCOLHER O TEMPLATE):**
    * Use estritamente as regras de formata√ß√£o de datas, hor√°rios, valores e passageiros descritas no manual.
    * Converta todos os c√≥digos de aeroporto para nomes completos (GRU -> Guarulhos).
    * O t√≠tulo deve ser sempre entre cidades (S√£o Paulo ‚úà Rio de Janeiro).
    * A resposta final deve ser **APENAS** o or√ßamento formatado, sem nenhuma conversa, sauda√ß√£o ou explica√ß√£o.
    * Sempre termine a resposta com "Valores sujeitos a confirma√ß√£o e disponibilidade", se o modelo escolhido incluir essa frase.`;
      }
      
      // ... (Resto do c√≥digo para chamar a IA, que permanece o mesmo)
      // ...
    } catch (error) {
      // ... (bloco catch permanece o mesmo)
    }
  }
  
  // ... (resto do handler para m√©todos n√£o suportados)
}
