// üöÄ CVC ITAQUA v9.1 - L√ìGICA DE DICAS E RANKING CORRIGIDA
// ================================================================================
// üìë √çNDICE GERAL DO SISTEMA
// ================================================================================
// 1. TEMPLATES DE OR√áAMENTOS (COM NOVOS MODELOS DE DICAS/RANKING)
// 2. TABELA DE CONVERS√ÉO DE AEROPORTOS
// 3. HANDLER PRINCIPAL DA API
// 4. PROCESSAMENTO DE DADOS (COM L√ìGICA DE PRIORIDADE)
// 5. GERA√á√ÉO DE PROMPTS (MAIS INTELIGENTES)
// 6. PROCESSAMENTO COM IA
// 7. RESPOSTA FINAL
// ================================================================================

// ================================================================================
// 1. üìã TEMPLATES DE OR√áAMENTOS (COM NOVOS MODELOS DE DICAS/RANKING)
// ================================================================================
const TEMPLATES = {
    // ‚úÖ Modelo para M√∫ltiplas Op√ß√µes A√©reas
    multiplas_opcoes_voos: `*Cota√ß√£o A√©reo ‚úà {destino}*
üìÖ Per√≠odo: {data_inicio} a {data_fim}
üë• Passageiros: {passageiros}

Abaixo est√£o as op√ß√µes que encontramos:
---
{opcoes_formatadas}
---
Valores sujeitos a confirma√ß√£o e disponibilidade.`,

    // ‚úÖ Modelo para Voo com Conex√£o Detalhada
    aereo_conexao_detalhada: `*Iberia ‚úà {destino}*

üõ´ **Ida: {data_ida}**
{detalhes_ida}
--
üõ¨ **Volta: {data_volta}**
{detalhes_volta}

üí∞ **Valor total:** R$ {valor_total} para {passageiros}
üí≥ **Pagamento:** {pagamento}
üéí **Bagagem:** {bagagem}
üè∑Ô∏è {reembolso}
üîó {link}

Valores sujeitos a confirma√ß√£o e disponibilidade.`,
    
    // Modelo Padr√£o para Voo Simples
    aereo_simples: `*{companhia} ‚úà {destino}*

{data_ida} - {aeroporto_origem} {hora_ida} / {aeroporto_destino} {hora_chegada_ida} ({tipo_voo_ida})
--
{data_volta} - {aeroporto_destino} {hora_volta} / {aeroporto_origem} {hora_chegada_volta} ({tipo_voo_volta})

üí∞ **Valor total:** R$ {valor_total} para {passageiros}
üí≥ **Pagamento:** {pagamento}
üéí **Bagagem:** {bagagem}
üè∑Ô∏è {reembolso}
üîó {link}

Valores sujeitos a confirma√ß√£o e disponibilidade.`,

    // ‚úÖ NOVO TEMPLATE DE DICAS COMPLETO
    dicas_completas: `üåç *Dicas Essenciais para sua Viagem a {destino}!* üåç

Aqui est√£o algumas sugest√µes para aproveitar ao m√°ximo sua estadia:

1Ô∏è‚É£ **Gastronomia Imperd√≠vel**
{dica_gastronomia}

2Ô∏è‚É£ **Atra√ß√µes Cl√°ssicas**
{dica_atracoes}

3Ô∏è‚É£ **Passeios e Experi√™ncias**
{dica_passeios}

4Ô∏è‚É£ **Dicas Locais**
{dica_insider}

---
‚úàÔ∏è *Complete sua Viagem com a CVC!*
Al√©m de voos e hot√©is, a CVC Itaqua oferece tudo para deixar sua viagem ainda mais f√°cil e segura:
- Passeios opcionais incr√≠veis
- Seguro viagem completo
- Chip de celular internacional

Fale comigo para adicionar esses servi√ßos ao seu pacote!`,

    // Outros templates mantidos
    pacote_completo: `*Pacote ‚úà {destino}*
Embarque: {data_embarque}
Pacote para {passageiros}

*O Pacote Inclui:*
‚úÖ Passagem A√©rea ida e volta para {destino}
‚úÖ Taxas de Embarque
{traslado}
{passeios}
{seguro}
‚úÖ {noites} de hospedagem no hotel escolhido

‚úàÔ∏è *Voos {companhia}:*
{data_ida} - {aeroporto_origem} {hora_ida} / {aeroporto_destino} {hora_chegada} ({tipo_voo})
--
{data_volta} - {aeroporto_destino} {hora_volta} / {aeroporto_origem} {hora_chegada_volta} ({tipo_voo_volta})

üè® *Op√ß√µes de Hot√©is:*
{opcoes_hoteis}

{reembolso}
Valores sujeitos a confirma√ß√£o e disponibilidade`,
};

// ================================================================================
// 2. üó∫Ô∏è TABELA DE CONVERS√ÉO DE AEROPORTOS
// ================================================================================
const AEROPORTOS = {
    'GRU': 'Guarulhos', 'CGH': 'Congonhas', 'VCP': 'Viracopos', 'SDU': 'Santos Dumont',
    'GIG': 'Gale√£o', 'BSB': 'Bras√≠lia', 'CNF': 'Confins', 'PLU': 'Pampulha', 'POA': 'Porto Alegre',
    'CWB': 'Curitiba', 'FLN': 'Florian√≥polis', 'SSA': 'Salvador', 'REC': 'Recife', 'FOR': 'Fortaleza',
    'NAT': 'Natal', 'MCZ': 'Macei√≥', 'AJU': 'Aracaju', 'JPA': 'Jo√£o Pessoa', 'THE': 'Teresina',
    'SLZ': 'S√£o Lu√≠s', 'BEL': 'Bel√©m', 'MAO': 'Manaus', 'CGB': 'Cuiab√°', 'CGR': 'Campo Grande',
    'GYN': 'Goi√¢nia', 'VIX': 'Vit√≥ria', 'BPS': 'Porto Seguro', 'IOS': 'Ilh√©us', 'JDO': 'Juazeiro do Norte',
    'IGU': 'Foz do Igua√ßu', 'IMP': 'Imperatriz', 'MAB': 'Marab√°', 'STM': 'Santar√©m', 'RBR': 'Rio Branco',
    'PVH': 'Porto Velho', 'BVB': 'Boa Vista', 'MCP': 'Macap√°', 'PMW': 'Palmas', 'UDI': 'Uberl√¢ndia',
    'RAO': 'Ribeir√£o Preto', 'JOI': 'Joinville', 'XAP': 'Chapec√≥', 'LDB': 'Londrina', 'MGF': 'Maring√°',
    'EZE': 'Buenos Aires EZE', 'AEP': 'Buenos Aires AEP', 'SCL': 'Santiago', 'LIM': 'Lima',
    'PCL': 'Pucallpa', 'CUZ': 'Cusco', 'AQP': 'Arequipa', 'BOG': 'Bogot√°', 'GYE': 'Guayaquil',
    'UIO': 'Quito', 'CCS': 'Caracas', 'MVD': 'Montevid√©u', 'ASU': 'Assun√ß√£o', 'LPB': 'La Paz',
    'VVI': 'Santa Cruz de la Sierra', 'BRA': 'Barreiras', 'MAD': 'Madrid',
    'MEX': 'Cidade do M√©xico', 'CUN': 'Canc√∫n', 'MIA': 'Miami', 'MCO': 'Orlando', 'FLL': 'Fort Lauderdale',
    'JFK': 'Nova York JFK', 'LGA': 'Nova York LGA', 'EWR': 'Nova York EWR', 'LAX': 'Los Angeles',
    'SFO': 'San Francisco', 'ORD': 'Chicago', 'YYZ': 'Toronto',
    'LIS': 'Lisboa', 'OPO': 'Porto', 'BCN': 'Barcelona', 'CDG': 'Paris CDG',
    'ORY': 'Paris ORY', 'FCO': 'Roma Fiumicino', 'MXP': 'Mil√£o MXP', 'MIL': 'Mil√£o MIL',
    'LHR': 'Londres Heathrow', 'LGW': 'Londres Gatwick', 'FRA': 'Frankfurt', 'AMS': 'Amsterd√£',
    'ZRH': 'Zurique',
    'NRT': 'T√≥quio NRT', 'HND': 'T√≥quio HND'
};

// ================================================================================
// 3. üéØ HANDLER PRINCIPAL DA API v9.1
// ================================================================================
export default async function handler(req, res) {
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

    if (req.method === 'OPTIONS') return res.status(200).end();
    if (req.method === 'GET') return res.status(200).json({ success: true, status: 'operational', version: '9.1' });
    if (req.method !== 'POST') return res.status(405).json({ success: false, error: 'M√©todo n√£o suportado.' });

    try {
        if (!req.body) {
            console.error('v9.1: ‚ùå Erro: Requisi√ß√£o sem corpo.');
            return res.status(400).json({ success: false, error: 'Requisi√ß√£o inv√°lida: corpo n√£o encontrado.' });
        }
        
        console.log('v9.1: üì• In√≠cio do processamento POST.');
        const {
            observacoes = '', textoColado = '', destino = '',
            tipos = [], imagemBase64 = null, arquivoBase64 = null, temImagem = false
        } = req.body;

        let prompt, resultado, iaUsada;

        // --- Bloco de Processamento e Gera√ß√£o de Prompt ---
        try {
            console.log('v9.1: üìù Iniciando gera√ß√£o de prompt...');
            const conteudoPrincipal = (observacoes || textoColado || '').toString();
            const conteudoLower = conteudoPrincipal.toLowerCase();
            
            // ‚úÖ EXTRA√á√ÉO DE DESTINO PRIMEIRO, PARA ESTAR SEMPRE DISPON√çVEL
            let destinoFinal = destino || null;
            if (!destinoFinal && conteudoPrincipal) {
                const padraoDestino = conteudoLower.match(/(?:porto seguro|macei√≥|fortaleza|lisboa|porto|paris|buenos aires|santiago|nova york|rio de janeiro|gramado|natal|jo√£o pessoa|foz do igua√ßu|salvador|recife|roma|londres|barcelona|madrid|orlando|miami|canc√∫n)/i);
                if (padraoDestino) {
                    let cidade = padraoDestino[0];
                    destinoFinal = cidade.charAt(0).toUpperCase() + cidade.slice(1);
                }
            }
            
            const isDicas = tipos.includes('Dicas');
            const isRanking = tipos.includes('Ranking');
            const isHotel = tipos.includes('Hotel') || conteudoLower.includes('hotel');
            const temAereo = tipos.includes('A√©reo') || conteudoLower.includes('voo');
            const isPacote = (isHotel && temAereo) || conteudoLower.includes('pacote inclui');
            const numeroDeOpcoes = (conteudoPrincipal.match(/Total \(/gi) || []).length;
            const isMultiplasOpcoes = numeroDeOpcoes > 1;

            // ‚úÖ L√ìGICA DE PRIORIDADE: DICAS E RANKING PRIMEIRO
            if (isDicas) {
                if (!destinoFinal) {
                    resultado = "Por favor, informe um destino para que eu possa gerar as dicas!";
                } else {
                    prompt = `Sua tarefa √© criar um texto com dicas de viagem para ${destinoFinal}, usando o template 'dicas_completas'.

**TEMPLATE A SER PREENCHIDO:**
${TEMPLATES.dicas_completas}

**REGRAS CR√çTICAS:**
1.  **CONTE√öDO REAL**: Preencha cada campo do template com informa√ß√µes REAIS, √∫teis e interessantes sobre ${destinoFinal}. N√£o use placeholders como "dica1".
2.  **SEJA ESPECIALISTA**: Aja como um agente de viagens experiente. D√™ sugest√µes de pratos, restaurantes, passeios e segredos locais.
3.  **VENDA CVC**: Mantenha a se√ß√£o final "Complete sua Viagem com a CVC!" exatamente como est√° no template.
4.  **SA√çDA LIMPA**: Sua resposta final deve ser APENAS o texto do template preenchido, sem nenhum outro coment√°rio ou explica√ß√£o.

Agora, gere as dicas para ${destinoFinal}.`;
                }
            } else if (isRanking) {
                 prompt = `// L√≥gica para Ranking (a ser implementada se necess√°rio)`;
            } else if (isMultiplasOpcoes) {
                prompt = `Sua tarefa √© converter os dados brutos de uma cota√ß√£o com M√öLTIPLAS OP√á√ïES de voos em um √∫nico or√ßamento formatado para WhatsApp.

**DADOS BRUTOS:**
${conteudoPrincipal}

**TABELA DE AEROPORTOS PARA CONSULTA:**
${JSON.stringify(AEROPORTOS)}

**MODELO DE SA√çDA / EXEMPLO:**
*Cota√ß√£o A√©reo ‚úà Lisboa*
üìÖ Per√≠odo: 11/07 a 23/07
üë• Passageiros: 04 adultos e 01 crian√ßa

Abaixo est√£o as op√ß√µes que encontramos:
---
*OP√á√ÉO 1 - Iberia (Com bagagem despachada)*

11/07 - Guarulhos 19:15 / Lisboa 16:05 (com conex√£o)
--
23/07 - Lisboa 08:25 / Guarulhos 17:35 (com conex√£o)

üí∞ **Valor:** R$ 28.975,58
üí≥ **Pagamento:** Entrada de R$ 8.698,70 + 4x de R$ 5.069,22
üè∑Ô∏è N√£o reembols√°vel
üîó https://www.cvc.com.br/link-exemplo-1
---
*OP√á√ÉO 2 - Tap Portugal (Sem bagagem despachada)*

11/07 - Guarulhos 15:30 / Lisboa 05:20 (voo direto)
--
23/07 - Lisboa 17:05 / Guarulhos 23:10 (voo direto)

üí∞ **Valor:** R$ 32.630,75
üí≥ **Pagamento:** Entrada de R$ 7.406,99 + 9x de R$ 2.802,64
üè∑Ô∏è N√£o reembols√°vel
üîó https://www.cvc.com.br/link-exemplo-2
---
Valores sujeitos a confirma√ß√£o e disponibilidade.

**REGRAS CR√çTICAS:**
1.  **IDENTIFIQUE AS OP√á√ïES**: Separe cada bloco de cota√ß√£o. Cada bloco come√ßa com a companhia a√©rea e termina com um link.
2.  **CABE√áALHO GERAL**: Crie o cabe√ßalho com o destino, per√≠odo e passageiros (extraia do primeiro bloco).
3.  **PARA CADA OP√á√ÉO**:
    - Crie um t√≠tulo claro, ex: "*OP√á√ÉO X - Companhia (Com/Sem bagagem despachada)*".
    - Formate os voos com o separador "--".
    - Extraia o valor, a forma de pagamento, a pol√≠tica de reembolso ("N√£o reembols√°vel") e o link.
    - Limpe o link, removendo o texto "Ol√°, Vasti!...".
4.  **AEROPORTOS**: Converta TODOS os c√≥digos de aeroporto (GRU, LIS) para seus nomes completos.
5.  **BAGAGEM**: Analise CADA op√ß√£o para determinar se a bagagem despachada est√° inclusa e mencione isso no t√≠tulo da op√ß√£o.

Agora, gere o or√ßamento final seguindo o modelo e as regras √† risca.`;
            } else {
                 prompt = `Sua tarefa √© converter os dados brutos de uma viagem em um or√ßamento formatado para WhatsApp.
 
**DADOS BRUTOS:**
${conteudoPrincipal}

**INFORMA√á√ïES ADICIONAIS:**
- Tabela de Aeroportos para convers√£o: ${JSON.stringify(AEROPORTOS)}

**REGRAS GERAIS:**
1.  Determine o tipo de or√ßamento (Pacote, A√©reo Simples, etc.).
2.  Use o template apropriado de: ${JSON.stringify(TEMPLATES)}
3.  Converta todos os c√≥digos de aeroportos.
4.  Extraia e formate todas as informa√ß√µes dispon√≠veis (pre√ßo, pagamento, links, etc.).
5.  Sempre finalize com "Valores sujeitos a confirma√ß√£o e disponibilidade."

Agora, gere o or√ßamento final.`;
            }
            
            console.log('v9.1: ‚úÖ Gera√ß√£o de prompt conclu√≠da.');
        } catch (promptError) {
            console.error('v9.1: ‚ùå Erro na gera√ß√£o do prompt:', promptError);
            return res.status(500).json({ success: false, error: 'Falha ao montar a requisi√ß√£o para a IA.', details: promptError.message, stage: 'prompt-generation' });
        }

        // --- Bloco de Chamada da IA ---
        // Se o resultado j√° foi definido (ex: erro de destino nas dicas), pula a chamada da IA
        if (!resultado) {
            try {
                console.log('v9.1: ü§ñ Iniciando chamada √† IA...');
                iaUsada = 'gpt-4o-mini';
                const usarClaude = imagemBase64 || arquivoBase64 || temImagem || (observacoes.length + textoColado.length > 2000);
                const systemPrompt = 'Voc√™ √© um assistente especialista da CVC Itaqua. Sua √∫nica fun√ß√£o √© analisar os dados brutos e gerar um or√ßamento ou texto formatado para WhatsApp, seguindo o modelo, o exemplo e as regras fornecidas no prompt do usu√°rio. Seja preciso e atento aos detalhes. Sua resposta deve ser apenas o texto final, sem coment√°rios.';

                if (usarClaude && process.env.ANTHROPIC_API_KEY) {
                    iaUsada = 'claude-3-haiku';
                    const messages = [{ role: 'user', content: (imagemBase64 || arquivoBase64) ? [{ type: 'text', text: prompt }, { type: 'image', source: { type: 'base64', media_type: (imagemBase64 || arquivoBase64).split(';')[0].split(':')[1], data: (imagemBase64 || arquivoBase64).split(',')[1] } }] : prompt }];
                    const apiResponse = await fetch('https://api.anthropic.com/v1/messages', { method: 'POST', headers: { 'x-api-key': process.env.ANTHROPIC_API_KEY, 'anthropic-version': '2023-06-01', 'content-type': 'application/json' }, body: JSON.stringify({ model: 'claude-3-haiku-20240307', max_tokens: 2000, temperature: 0.1, messages, system: systemPrompt }) });
                    if (!apiResponse.ok) { const errorText = await apiResponse.text(); throw new Error(`Erro Claude: ${errorText}`); }
                    const responseData = await apiResponse.json();
                    resultado = responseData.content[0].text;
                } else {
                    const OPENAI_KEY = process.env.OPENAI_API_KEY;
                    if (!OPENAI_KEY) throw new Error('OpenAI API key n√£o configurada (OPENAI_API_KEY).');
                    const apiResponse = await fetch('https://api.openai.com/v1/chat/completions', { method: 'POST', headers: { 'Authorization': `Bearer ${OPENAI_KEY}`, 'Content-Type': 'application/json' }, body: JSON.stringify({ model: 'gpt-4o-mini', messages: [{ role: 'system', content: systemPrompt }, { role: 'user', content: prompt }], temperature: 0.1, max_tokens: 2000 }) });
                    if (!apiResponse.ok) { const errorText = await apiResponse.text(); throw new Error(`Erro GPT: ${errorText}`); }
                    const responseData = await apiResponse.json();
                    resultado = responseData.choices[0].message.content;
                }
                console.log('v9.1: ‚úÖ Chamada √† IA conclu√≠da.');
            } catch (aiError) {
                console.error('v9.1: ‚ùå Erro na chamada da IA:', aiError);
                return res.status(500).json({ success: false, error: 'Falha ao comunicar com o servi√ßo de IA.', details: aiError.message, stage: 'ai-call' });
            }
        }

        console.log('v9.1: ‚úÖ Processamento geral conclu√≠do. Enviando resposta...');
        return res.status(200).json({
            success: true,
            result: resultado,
            metadata: { version: '9.1', ia_usada: iaUsada }
        });

    } catch (error) {
        console.error('v9.1: ‚ùå Erro INESPERADO no handler principal:', error);
        return res.status(500).json({
            success: false,
            error: 'Ocorreu um erro inesperado no servidor.',
            details: error.message,
            version: '9.1',
            stage: 'handler-main'
        });
    }
}
