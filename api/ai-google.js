// ================================================================================
// üöÄ CVC ITAQUA v3.2 - SISTEMA COMPLETO FUNCIONANDO
// ================================================================================
// ARQUIVO: api/ai-google.js - SEM IMPORTS, TUDO INTEGRADO
// ================================================================================

const { Anthropic } = require('@anthropic-ai/sdk');
const OpenAI = require('openai');

// ================================================================================
// üéØ CONFIGURA√á√ïES E CONSTANTES (INTEGRADAS)
// ================================================================================

const CONFIG = {
    VERSION: '3.2',
    SISTEMA: 'CVC ITAQUA'
};

const AEROPORTOS = {
    // Brasil
    'GRU': 'Guarulhos', 'CGH': 'Congonhas', 'VCP': 'Viracopos',
    'GIG': 'Gale√£o', 'SDU': 'Santos Dumont', 'BSB': 'Bras√≠lia',
    'CNF': 'Confins', 'SSA': 'Salvador', 'REC': 'Recife',
    'FOR': 'Fortaleza', 'POA': 'Porto Alegre', 'FLN': 'Florian√≥polis',
    'CWB': 'Curitiba', 'MAO': 'Manaus', 'BEL': 'Bel√©m',
    
    // Internacional
    'LIS': 'Lisboa', 'OPO': 'Porto', 'MAD': 'Madrid',
    'BCN': 'Barcelona', 'CDG': 'Paris', 'FCO': 'Roma',
    'LHR': 'Londres', 'JFK': 'Nova York', 'MIA': 'Miami',
    'EZE': 'Buenos Aires', 'SCL': 'Santiago', 'LIM': 'Lima'
};

// ================================================================================
// üìù TEMPLATES DO MANUAL (INTEGRADOS)
// ================================================================================

const TEMPLATES = {
    AEREO_SIMPLES: `*{companhia} - {cidade_origem} ‚úà {cidade_destino}*
{data_ida} - {aeroporto_origem} {hora_ida} / {aeroporto_destino} {hora_chegada_ida} ({tipo_voo_ida})
--
{data_volta} - {aeroporto_destino} {hora_volta} / {aeroporto_origem} {hora_chegada_volta} ({tipo_voo_volta})

üí∞ R$ {valor_total} para {passageiros}
‚úÖ {bagagem}
üè∑Ô∏è {reembolso}

Valores sujeitos a confirma√ß√£o e disponibilidade`,

    AEREO_CONEXAO_DETALHADA: `*{companhia} - {cidade_origem} ‚úà {cidade_destino}*
{data_ida} - {aeroporto_origem} {hora_ida} / {aeroporto_conexao} {hora_chegada_conexao} (voo direto)
(conex√£o em {cidade_conexao} - {tempo_espera} de espera)
{data_ida} - {aeroporto_conexao} {hora_saida_conexao} / {aeroporto_destino} {hora_chegada_ida} (voo direto)
--
{data_volta} - {aeroporto_destino} {hora_volta} / {aeroporto_origem} {hora_chegada_volta} ({tipo_voo_volta})

üí∞ R$ {valor_total} para {passageiros}
üí≥ {parcelamento}
‚úÖ {bagagem}
üè∑Ô∏è {reembolso}

Valores sujeitos a confirma√ß√£o e disponibilidade`,

    MULTIPLAS_OPCOES: `Use este formato quando houver m√∫ltiplas op√ß√µes de voo/hotel.
Para cada op√ß√£o, formate como:

*OP√á√ÉO 1 - {companhia} - {origem} ‚úà {destino}*
[detalhes do voo]
üí∞ R$ {valor}
[outros detalhes]

*OP√á√ÉO 2 - {companhia} - {origem} ‚úà {destino}*
[detalhes do voo]
üí∞ R$ {valor}
[outros detalhes]`
};

// ================================================================================
// üîß FUN√á√ïES DE P√ìS-PROCESSAMENTO (INTEGRADAS)
// ================================================================================

function posProcessar(texto, conteudoOriginal, parcelamento) {
    let resultado = texto;
    
    // 1. Converter c√≥digos de aeroporto
    for (const [codigo, nome] of Object.entries(AEROPORTOS)) {
        const regex = new RegExp(`\\b${codigo}\\b`, 'g');
        resultado = resultado.replace(regex, nome);
    }
    
    // 2. Corrigir formatos de data
    resultado = resultado.replace(/(\d{1,2})\s+de\s+(\w+)/gi, (match, dia, mes) => {
        const meses = {
            'janeiro': '01', 'jan': '01', 'fevereiro': '02', 'fev': '02',
            'mar√ßo': '03', 'mar': '03', 'abril': '04', 'abr': '04',
            'maio': '05', 'mai': '05', 'junho': '06', 'jun': '06',
            'julho': '07', 'jul': '07', 'agosto': '08', 'ago': '08',
            'setembro': '09', 'set': '09', 'outubro': '10', 'out': '10',
            'novembro': '11', 'nov': '11', 'dezembro': '12', 'dez': '12'
        };
        const mesNum = meses[mes.toLowerCase()] || mes;
        return `${dia.padStart(2, '0')}/${mesNum}`;
    });
    
    // 3. Aplicar parcelamento se fornecido
    if (parcelamento && !resultado.includes('üí≥')) {
        const valorMatch = resultado.match(/R\$\s*([\d.,]+)/);
        if (valorMatch) {
            const valor = parseFloat(valorMatch[1].replace('.', '').replace(',', '.'));
            const parcela = (valor / parseInt(parcelamento)).toFixed(2).replace('.', ',');
            const linhaParcelamento = `üí≥ ${parcelamento}x de R$ ${parcela} s/ juros no cart√£o`;
            
            // Inserir ap√≥s o valor
            resultado = resultado.replace(/(üí∞[^\n]+)/, `$1\n${linhaParcelamento}`);
        }
    }
    
    // 4. Garantir vers√£o no final
    if (!resultado.includes('(v')) {
        resultado = resultado.replace(
            /Valores sujeitos a confirma√ß√£o e disponibilidade/,
            `Valores sujeitos a confirma√ß√£o e disponibilidade (v${CONFIG.VERSION})`
        );
    }
    
    // 5. Remover linhas vazias extras
    resultado = resultado.replace(/\n{3,}/g, '\n\n');
    
    return resultado.trim();
}

// ================================================================================
// üéØ FUN√á√ÉO PRINCIPAL - HANDLER DA API
// ================================================================================

module.exports = async function handler(req, res) {
    console.log('[v3.2] üöÄ CVC ITAQUA API iniciada');
    
    // Configurar CORS
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    
    if (req.method === 'OPTIONS') {
        return res.status(200).end();
    }
    
    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'M√©todo n√£o permitido' });
    }
    
    try {
        const dados = req.body;
        console.log('[v3.2] üìã Dados recebidos:', {
            temImagem: !!dados.imagemBase64,
            temPDF: !!dados.pdfContent,
            temTexto: !!dados.observacoes || !!dados.textoColado,
            destino: dados.destino,
            tipos: dados.tipos
        });
        
        // Processar or√ßamento
        const resultado = await processarOrcamento(dados);
        
        // Retornar sucesso
        return res.status(200).json({
            success: true,
            result: resultado,
            ia_usada: dados.imagemBase64 ? 'Claude' : 'GPT-4o-mini',
            version: CONFIG.VERSION
        });
        
    } catch (error) {
        console.error('[v3.2] ‚ùå Erro:', error);
        return res.status(500).json({
            success: false,
            error: error.message || 'Erro ao processar or√ßamento'
        });
    }
};

// ================================================================================
// üéØ PROCESSAMENTO PRINCIPAL DO OR√áAMENTO
// ================================================================================

async function processarOrcamento(dados) {
    console.log('[v3.2] üîß Iniciando processamento...');
    
    // 1. Preparar conte√∫do principal
    const conteudoPrincipal = prepararConteudo(dados);
    
    // 2. Detectar tipo de or√ßamento
    const tipoOrcamento = detectarTipoOrcamento(conteudoPrincipal, dados.tipos);
    console.log('[v3.2] üìä Tipo detectado:', tipoOrcamento);
    
    // 3. Buscar template apropriado
    const template = TEMPLATES[tipoOrcamento] || TEMPLATES.AEREO_SIMPLES;
    
    // 4. Montar prompt espec√≠fico para IA
    const prompt = montarPrompt(template, conteudoPrincipal, dados, tipoOrcamento);
    
    // 5. Decidir qual IA usar
    const usarClaude = dados.imagemBase64 || 
                      conteudoPrincipal.length > 3000 ||
                      tipoOrcamento.includes('PACOTE');
    
    // 6. Chamar IA apropriada
    let respostaIA;
    if (usarClaude && process.env.ANTHROPIC_API_KEY) {
        respostaIA = await chamarClaude(prompt, dados.imagemBase64);
    } else if (process.env.OPENAI_API_KEY) {
        respostaIA = await chamarGPT(prompt);
    } else {
        throw new Error('Nenhuma API key configurada');
    }
    
    // 7. Aplicar p√≥s-processamento
    const resultado = posProcessar(respostaIA, conteudoPrincipal, dados.parcelamento);
    
    return resultado;
}

// ================================================================================
// üîç DETEC√á√ÉO DE TIPO DE OR√áAMENTO (CORRIGIDA)
// ================================================================================

function detectarTipoOrcamento(conteudo, tipos) {
    const conteudoLower = conteudo.toLowerCase();
    
    // Verificar se tem DETALHES REAIS de conex√£o
    const temDetalhesConexao = verificarDetalhesConexao(conteudo);
    
    // Se tem m√∫ltiplas op√ß√µes
    if (conteudoLower.includes('op√ß√£o 1') || conteudoLower.includes('op√ß√£o 2')) {
        return 'MULTIPLAS_OPCOES';
    }
    
    // Se tem detalhes de conex√£o REAIS
    if (temDetalhesConexao) {
        return 'AEREO_CONEXAO_DETALHADA';
    }
    
    // Padr√£o: a√©reo simples
    return 'AEREO_SIMPLES';
}

// ================================================================================
// üîç VERIFICAR SE TEM DETALHES REAIS DE CONEX√ÉO
// ================================================================================

function verificarDetalhesConexao(conteudo) {
    // Procurar por padr√µes que indicam DETALHES REAIS de conex√£o
    const padroes = [
        /conex√£o em (\w+)/i,           // "conex√£o em Madrid"
        /escala em (\w+)/i,             // "escala em Lisboa"
        /(\d+h?\s*\d*\s*min?\s*de espera)/i,  // "2h de espera"
        /parada em (\w+)/i,             // "parada em Paris"
        /via (\w+)/i                    // "via Londres"
    ];
    
    // Verificar se N√ÉO √© apenas tempo total de voo
    const tempoTotal = /(\d+h\s*\d*min)\s*(uma escala|1 escala)/i;
    if (tempoTotal.test(conteudo) && !conteudo.match(/de espera/i)) {
        return false; // √â tempo total, n√£o tempo de espera
    }
    
    for (let padrao of padroes) {
        if (padrao.test(conteudo)) {
            return true;
        }
    }
    
    return false;
}

// ================================================================================
// üìù MONTAGEM DO PROMPT PARA IA
// ================================================================================

function montarPrompt(template, conteudo, dados, tipoOrcamento) {
    const instrucaoConexao = `
REGRA CR√çTICA SOBRE CONEX√ïES:
- Se o texto diz "Uma escala" mas N√ÉO fornece detalhes do aeroporto de conex√£o, use formato SIMPLES: (com conex√£o)
- NUNCA invente aeroportos de conex√£o que n√£o foram mencionados
- "16h 50min Uma escala" significa tempo TOTAL do voo com uma parada, N√ÉO √© tempo de espera
- Exemplo CORRETO sem detalhes: "Guarulhos 19:15 / Lisboa 16:05 (+1) (com conex√£o)"
- Exemplo ERRADO: inventar "conex√£o em Madrid" quando n√£o foi mencionado
`;
    
    let prompt = `Voc√™ √© especialista em formata√ß√£o de or√ßamentos CVC.

${instrucaoConexao}

TEMPLATE A SEGUIR:
${template}

DADOS FORNECIDOS:
${conteudo}

REGRAS:
1. Use o template EXATAMENTE como fornecido
2. Converta c√≥digos de aeroporto para nomes completos
3. NUNCA invente informa√ß√µes n√£o fornecidas
4. Se h√° "Uma escala" sem detalhes, use apenas "(com conex√£o)"
5. Mantenha formata√ß√£o para WhatsApp
6. Sempre termine com "Valores sujeitos a confirma√ß√£o e disponibilidade"

PASSAGEIROS: ${montarTextoPassageiros(dados)}

Retorne APENAS o or√ßamento formatado.`;

    return prompt;
}

// ================================================================================
// ü§ñ CHAMADAS PARA AS IAs
// ================================================================================

async function chamarClaude(prompt, imagemBase64 = null) {
    console.log('[v3.2] ü§ñ Chamando Claude...');
    
    const anthropic = new Anthropic({
        apiKey: process.env.ANTHROPIC_API_KEY
    });
    
    const messages = [{
        role: 'user',
        content: imagemBase64 ? [
            {
                type: 'image',
                source: {
                    type: 'base64',
                    media_type: imagemBase64.split(',')[0].split(':')[1].split(';')[0],
                    data: imagemBase64.split(',')[1]
                }
            },
            { type: 'text', text: prompt }
        ] : prompt
    }];
    
    try {
        const response = await anthropic.messages.create({
            model: 'claude-3-haiku-20240307',
            max_tokens: 2000,
            temperature: 0.3,
            messages: messages
        });
        
        return response.content[0].text;
    } catch (error) {
        console.error('[v3.2] ‚ùå Erro Claude:', error);
        // Fallback para GPT se Claude falhar
        return await chamarGPT(prompt);
    }
}

async function chamarGPT(prompt) {
    console.log('[v3.2] ü§ñ Chamando GPT-4o-mini...');
    
    const openai = new OpenAI({
        apiKey: process.env.OPENAI_API_KEY
    });
    
    try {
        const response = await openai.chat.completions.create({
            model: 'gpt-4o-mini',
            messages: [
                {
                    role: 'system',
                    content: 'Voc√™ √© especialista em formata√ß√£o de or√ßamentos CVC. NUNCA invente informa√ß√µes. Siga o template fornecido EXATAMENTE.'
                },
                { role: 'user', content: prompt }
            ],
            temperature: 0.3,
            max_tokens: 2000
        });
        
        return response.choices[0].message.content;
    } catch (error) {
        console.error('[v3.2] ‚ùå Erro GPT:', error);
        throw new Error('Erro ao processar com GPT: ' + error.message);
    }
}

// ================================================================================
// üîß FUN√á√ïES AUXILIARES
// ================================================================================

function prepararConteudo(dados) {
    const partes = [];
    
    if (dados.observacoes) partes.push(dados.observacoes);
    if (dados.textoColado) partes.push(dados.textoColado);
    if (dados.pdfContent) partes.push(dados.pdfContent);
    if (dados.destino) partes.push(`Destino: ${dados.destino}`);
    
    return partes.join('\n\n').trim();
}

function montarTextoPassageiros(dados) {
    const partes = [];
    
    if (dados.adultos) {
        const num = parseInt(dados.adultos);
        partes.push(`${String(num).padStart(2, '0')} ${num === 1 ? 'adulto' : 'adultos'}`);
    }
    
    if (dados.criancas && dados.criancas > 0) {
        const num = parseInt(dados.criancas);
        partes.push(`${String(num).padStart(2, '0')} ${num === 1 ? 'crian√ßa' : 'crian√ßas'}`);
    }
    
    return partes.length > 0 ? partes.join(' + ') : '01 adulto';
}

// ================================================================================
// üéØ LOG FINAL
// ================================================================================

console.log('[v3.2] ‚úÖ CVC ITAQUA API carregada!');
console.log('[v3.2] üîß Corre√ß√£o: N√£o inventa conex√µes');
console.log('[v3.2] üìã Vers√£o:', CONFIG.VERSION);
