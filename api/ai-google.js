// üöÄ CVC ITAQUA v11.0 - L√ìGICA COMPLETA BASEADA NO MANUAL OFICIAL
// ================================================================================
// üìë √çNDICE GERAL DO SISTEMA
// ================================================================================
// 1. TEMPLATES DE OR√áAMENTOS (FI√âIS AOS MODELOS APROVADOS)
// 2. TABELA DE CONVERS√ÉO DE AEROPORTOS
// 3. HANDLER PRINCIPAL DA API
// 4. PROCESSAMENTO E DETEC√á√ÉO DE TIPO (L√ìGICA DO MANUAL)
// 5. GERA√á√ÉO DE PROMPTS (ESPEC√çFICOS POR MODELO)
// 6. PROCESSAMENTO COM IA
// 7. RESPOSTA FINAL
// ================================================================================

// ================================================================================
// 1. üìã TEMPLATES DE OR√áAMENTOS (FI√âIS AOS MODELOS APROVADOS)
// ================================================================================
const TEMPLATES = {
    aereo_simples: `*{companhia} - {cidade_origem} ‚úà {cidade_destino}*

{data_ida} - {aeroporto_origem} {hora_ida} / {aeroporto_destino} {hora_chegada_ida} ({tipo_voo_ida})
--
{data_volta} - {aeroporto_destino} {hora_volta} / {aeroporto_origem} {hora_chegada_volta} ({tipo_voo_volta})

üí∞ R$ {valor_total} para {passageiros}
üéí Bagagem: {bagagem}
üè∑Ô∏è {reembolso}

Valores sujeitos a confirma√ß√£o e disponibilidade.`,

    aereo_conexao_detalhada: `*{companhia} - {cidade_origem} ‚úà {cidade_destino}*

üõ´ **Ida: {data_ida}**
{detalhes_ida}
--
üõ¨ **Volta: {data_volta}**
{detalhes_volta}

üí∞ R$ {valor_total} para {passageiros}
üí≥ Pagamento: {pagamento}
üéí Bagagem: {bagagem}
üè∑Ô∏è {reembolso}
üîó {link}

Valores sujeitos a confirma√ß√£o e disponibilidade.`,

    multiplas_opcoes_voos: `*Cota√ß√£o A√©reo ‚úà {destino}*
üìÖ Per√≠odo: {data_inicio} a {data_fim}
üë• Passageiros: {passageiros}

Abaixo est√£o as op√ß√µes que encontramos:
---
{opcoes_formatadas}
---
Valores sujeitos a confirma√ß√£o e disponibilidade.`,

    multitrecho: `*Multitrecho - {companhias}*
üìÖ Per√≠odo: {data_inicio} a {data_fim}

{trechos_formatados}

üí∞ R$ {valor_total} para {passageiros}
üí≥ Pagamento: {pagamento}
üéí Bagagem: {bagagem}
üîó {link}

Valores sujeitos a confirma√ß√£o e disponibilidade.`,

    pacote_completo: `*Pacote ‚úà {destino}*
Embarque: {data_embarque}
Pacote para {passageiros}

*O Pacote Inclui:*
‚úÖ Passagem A√©rea ida e volta para {destino}
‚úÖ Taxas de Embarque
‚úÖ Traslado aeroporto/hotel/aeroporto
‚úÖ {noites} noites de hospedagem no hotel escolhido

‚úàÔ∏è *Voos {companhia}:*
{data_ida} - {aeroporto_origem} {hora_ida} / {aeroporto_destino} {hora_chegada} ({tipo_voo})
--
{data_volta} - {aeroporto_destino} {hora_volta} / {aeroporto_origem} {hora_chegada_volta} ({tipo_voo_volta})

{opcoes_hoteis}

Valores sujeitos a confirma√ß√£o e disponibilidade.`,

    dicas_completas: `üåç *Dicas Essenciais para sua Viagem a {destino}!* üåç

Aqui est√£o algumas sugest√µes para aproveitar ao m√°ximo sua estadia:

1Ô∏è‚É£ **Gastronomia Imperd√≠vel**
{dica_gastronomia}

2Ô∏è‚É£ **Atra√ß√µes Cl√°ssicas**
{dica_atracoes}

3Ô∏è‚É£ **Passeios e Experi√™ncias**
{dica_passeios}

---
‚úàÔ∏è *Complete sua Viagem com a CVC!*
Al√©m de voos e hot√©is, a CVC Itaqua oferece tudo para deixar sua viagem ainda mais f√°cil e segura:
- Passeios opcionais incr√≠veis
- Seguro viagem completo
- Chip de celular internacional

Fale comigo para adicionar esses servi√ßos ao seu pacote!`,
};

// ================================================================================
// 2. üó∫Ô∏è TABELA DE CONVERS√ÉO DE AEROPORTOS
// ================================================================================
const AEROPORTOS = {
    'GRU': 'Guarulhos', 'CGH': 'Congonhas', 'VCP': 'Viracopos', 'SDU': 'Santos Dumont',
    'GIG': 'Gale√£o', 'BSB': 'Bras√≠lia', 'CNF': 'Confins', 'PLU': 'Pampulha', 'POA': 'Porto Alegre',
    'CWB': 'Curitiba', 'FLN': 'Florian√≥polis', 'SSA': 'Salvador', 'REC': 'Recife', 'FOR': 'Fortaleza',
    'NAT': 'Natal', 'MCZ': 'Macei√≥', 'AJU': 'Aracaju', 'JPA': 'Jo√£o Pessoa', 'THE': 'Teresina',
    'SLZ': 'S√£o Lu√≠s', 'BEL': 'Bel√©m', 'MAO': 'Manaus', 'CGB': 'Cuiab√°', 'CGR': 'Campo Grande',
    'GYN': 'Goi√¢nia', 'VIX': 'Vit√≥ria', 'BPS': 'Porto Seguro', 'IOS': 'Ilh√©us', 'JDO': 'Juazeiro do Norte',
    'IGU': 'Foz do Igua√ßu', 'IMP': 'Imperatriz', 'MAB': 'Marab√°', 'STM': 'Santar√©m', 'RBR': 'Rio Branco',
    'PVH': 'Porto Velho', 'BVB': 'Boa Vista', 'MCP': 'Macap√°', 'PMW': 'Palmas', 'UDI': 'Uberl√¢ndia',
    'RAO': 'Ribeir√£o Preto', 'JOI': 'Joinville', 'XAP': 'Chapec√≥', 'LDB': 'Londrina', 'MGF': 'Maring√°',
    'EZE': 'Ezeiza - Buenos Aires', 'AEP': 'Aeroparque - Buenos Aires', 'SCL': 'Santiago', 'LIM': 'Lima',
    'BOG': 'Bogot√°', 'MEX': 'Cidade do M√©xico', 'CUN': 'Canc√∫n', 'MIA': 'Miami', 'MCO': 'Orlando', 'JFK': 'Nova York - JFK',
    'LAX': 'Los Angeles', 'LIS': 'Lisboa', 'OPO': 'Porto', 'MAD': 'Madrid', 'BCN': 'Barcelona', 'CDG': 'Paris - Charles de Gaulle',
    'FCO': 'Roma - Fiumicino', 'LHR': 'Londres - Heathrow'
};

// ================================================================================
// 3. üéØ HANDLER PRINCIPAL DA API v11.0
// ================================================================================
export default async function handler(req, res) {
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

    if (req.method === 'OPTIONS') return res.status(200).end();
    if (req.method === 'GET') return res.status(200).json({ success: true, status: 'operational', version: '11.0', message: 'API CVC Itaqua com L√≥gica do Manual' });
    if (req.method !== 'POST') return res.status(405).json({ success: false, error: 'M√©todo n√£o suportado.' });

    try {
        if (!req.body) {
            console.error('v11.0: ‚ùå Erro: Requisi√ß√£o sem corpo.');
            return res.status(400).json({ success: false, error: 'Requisi√ß√£o inv√°lida: corpo n√£o encontrado.' });
        }
        
        console.log('v11.0: üì• In√≠cio do processamento POST.');
        const {
            observacoes = '', textoColado = '', destino = '',
            tipos = [], imagemBase64 = null, arquivoBase64 = null, temImagem = false
        } = req.body;

        let prompt, resultado, iaUsada;
        const conteudoPrincipal = (observacoes || textoColado || '').toString();
        
        // --- Bloco de Gera√ß√£o de Prompt ---
        try {
            console.log('v11.0: üìù Iniciando gera√ß√£o de prompt...');
            const tipoOrcamento = detectOrcamentoType(conteudoPrincipal, tipos);
            prompt = generatePrompt(tipoOrcamento, conteudoPrincipal, destino);
            
            console.log(`v11.0: ‚úÖ Tipo detectado: ${tipoOrcamento}. Prompt gerado.`);
        } catch (promptError) {
            console.error('v11.0: ‚ùå Erro na gera√ß√£o do prompt:', promptError);
            return res.status(500).json({ success: false, error: 'Falha ao montar a requisi√ß√£o para a IA.', details: promptError.message, stage: 'prompt-generation' });
        }

        // --- Bloco de Chamada da IA ---
        try {
            console.log('v11.0: ü§ñ Iniciando chamada √† IA...');
            iaUsada = 'gpt-4o-mini';
            const usarClaude = imagemBase64 || arquivoBase64 || temImagem || (conteudoPrincipal.length > 2500);
            const systemPrompt = 'Voc√™ √© um assistente especialista da CVC Itaqua. Sua √∫nica fun√ß√£o √© analisar os dados brutos e gerar um or√ßamento formatado para WhatsApp, seguindo o modelo, o exemplo e as regras fornecidas no prompt do usu√°rio. Seja preciso e atento aos detalhes. Sua resposta deve ser apenas o texto final, sem coment√°rios ou explica√ß√µes.';

            if (usarClaude && process.env.ANTHROPIC_API_KEY) {
                iaUsada = 'claude-3-haiku';
                const messages = [{ role: 'user', content: (imagemBase64 || arquivoBase64) ? [{ type: 'text', text: prompt }, { type: 'image', source: { type: 'base64', media_type: (imagemBase64 || arquivoBase64).split(';')[0].split(':')[1], data: (imagemBase64 || arquivoBase64).split(',')[1] } }] : prompt }];
                const apiResponse = await fetch('https://api.anthropic.com/v1/messages', { method: 'POST', headers: { 'x-api-key': process.env.ANTHROPIC_API_KEY, 'anthropic-version': '2023-06-01', 'content-type': 'application/json' }, body: JSON.stringify({ model: 'claude-3-haiku-20240307', max_tokens: 2048, temperature: 0.1, messages, system: systemPrompt }) });
                if (!apiResponse.ok) { const errorText = await apiResponse.text(); throw new Error(`Erro Claude: ${errorText}`); }
                const responseData = await apiResponse.json();
                resultado = responseData.content[0].text;
            } else {
                const OPENAI_KEY = process.env.OPENAI_API_KEY;
                if (!OPENAI_KEY) throw new Error('OpenAI API key n√£o configurada (OPENAI_API_KEY).');
                const apiResponse = await fetch('https://api.openai.com/v1/chat/completions', { method: 'POST', headers: { 'Authorization': `Bearer ${OPENAI_KEY}`, 'Content-Type': 'application/json' }, body: JSON.stringify({ model: 'gpt-4o-mini', messages: [{ role: 'system', content: systemPrompt }, { role: 'user', content: prompt }], temperature: 0.1, max_tokens: 2048 }) });
                if (!apiResponse.ok) { const errorText = await apiResponse.text(); throw new Error(`Erro GPT: ${errorText}`); }
                const responseData = await apiResponse.json();
                resultado = responseData.choices[0].message.content;
            }
            console.log('v11.0: ‚úÖ Chamada √† IA conclu√≠da.');
        } catch (aiError) {
            console.error('v11.0: ‚ùå Erro na chamada da IA:', aiError);
            return res.status(500).json({ success: false, error: 'Falha ao comunicar com o servi√ßo de IA.', details: aiError.message, stage: 'ai-call' });
        }

        console.log('v11.0: ‚úÖ Processamento geral conclu√≠do. Enviando resposta...');
        return res.status(200).json({
            success: true,
            result: resultado,
            metadata: { version: '11.0', ia_usada: iaUsada }
        });

    } catch (error) {
        console.error('v11.0: ‚ùå Erro INESPERADO no handler principal:', error);
        return res.status(500).json({
            success: false,
            error: 'Ocorreu um erro inesperado no servidor.',
            details: error.message,
            version: '11.0',
            stage: 'handler-main'
        });
    }
}

// ================================================================================
// 4. üïµÔ∏è‚Äç‚ôÇÔ∏è FUN√á√ÉO DE DETEC√á√ÉO DE TIPO (L√ìGICA DO MANUAL)
// ================================================================================
function detectOrcamentoType(conteudoPrincipal, tipos) {
    const conteudoLower = conteudoPrincipal.toLowerCase();
    
    if (tipos.includes('Dicas')) return 'dicas';
    if (conteudoLower.includes('cruzeiro') || conteudoLower.includes('navio')) return 'cruzeiro';
    if (conteudoLower.includes('multitrecho') || (conteudoLower.match(/trecho \d/gi) || []).length > 1) return 'multitrecho';
    if ((conteudoPrincipal.match(/Total \(/gi) || []).length > 1 || (conteudoPrincipal.match(/OP√á√ÉO \d/gi) || []).length > 1 || (conteudoPrincipal.match(/Plano \d/gi) || []).length > 1) return 'multiplas_opcoes_voos';
    if (tipos.includes('Hotel') && tipos.includes('A√©reo')) return 'pacote_completo';
    if (conteudoLower.includes('conex√£o em') && conteudoLower.includes('espera')) return 'aereo_conexao_detalhada';
    
    // Padr√£o para voo simples se nenhuma outra condi√ß√£o for atendida
    return 'aereo_simples';
}

// ================================================================================
// 5. üìù FUN√á√ÉO DE GERA√á√ÉO DE PROMPTS (ESPEC√çFICOS POR MODELO)
// ================================================================================
function generatePrompt(tipoOrcamento, conteudoPrincipal, destino) {
    let prompt = '';
    let destinoFinal = destino || 'EXTRAIR DO CONTE√öDO';

    const regrasGerais = `**REGRAS GERAIS DE FORMATA√á√ÉO (SEMPRE SEGUIR):**
- **T√≠tulo**: Use o formato \`*{Companhia} - {Cidade Origem} ‚úà {Cidade Destino}*\`. NUNCA use c√≥digos de aeroporto no t√≠tulo.
- **Datas e Hor√°rios**: Formate datas como \`DD/MM\` e hor√°rios como \`HH:MM\`.
- **Passageiros**: Use zero √† esquerda e idades. Ex: \`02 adultos + 01 crian√ßa (7 anos)\`.
- **Pagamento**: Use "Primeira parcela" em vez de "Entrada".
- **Bagagem**: Use os termos exatos do manual: "S√≥ mala de m√£o inclu√≠da", "Mala de m√£o + bagagem despachada", etc.
- **Reembolso**: Use "N√£o reembols√°vel" ou "Reembols√°vel conforme regras do bilhete".
- **Links**: Limpe o texto extra, deixando apenas a URL.
- **Aeroportos**: Converta TODOS os c√≥digos de aeroporto para nomes completos usando a tabela fornecida.
- **Finaliza√ß√£o**: SEMPRE termine com "Valores sujeitos a confirma√ß√£o e disponibilidade."`;

    const tabelaAeroportos = `**TABELA DE AEROPORTOS PARA CONSULTA:**\n${JSON.stringify(AEROPORTOS)}`;

    switch (tipoOrcamento) {
        case 'dicas':
            return `Sua tarefa √© criar um texto com dicas de viagem para ${destinoFinal}, usando o template 'dicas_completas'. Preencha cada campo com informa√ß√µes REAIS e √∫teis. Mantenha a se√ß√£o final da CVC exatamente como est√°. Sua resposta final deve ser APENAS o texto do template preenchido.\n\n**TEMPLATE:**\n${TEMPLATES.dicas_completas}`;

        case 'multitrecho':
            return `Sua tarefa √© converter os dados brutos de uma cota√ß√£o MULTITRECHO em um or√ßamento formatado para WhatsApp.

**DADOS BRUTOS:**
${conteudoPrincipal}

**TEMPLATE A SER PREENCHIDO:**
${TEMPLATES.multitrecho}

**INSTRU√á√ïES:**
1.  **IDENTIFIQUE OS TRECHOS**: Encontre e liste CADA trecho da viagem (Trecho 1, 2, 3, etc.).
2.  **FORMATE CADA TRECHO**: Para cada um, formate a linha do voo como: \`*Trecho X:* {Origem} ‚Üí {Destino}\\n{Data} - {Aeroporto Origem} {Hora} / {Aeroporto Destino} {Hora} ({Tipo de Voo})\`.
3.  **EXTRAIA DADOS GERAIS**: Encontre o valor total, a forma de pagamento, a pol√≠tica de bagagem e o link.
${regrasGerais}\n${tabelaAeroportos}`;

        case 'multiplas_opcoes_voos':
            return `Sua tarefa √© converter os dados brutos de uma cota√ß√£o com M√öLTIPLAS OP√á√ïES de voos em um √∫nico or√ßamento formatado para WhatsApp.

**DADOS BRUTOS:**
${conteudoPrincipal}

**MODELO DE SA√çDA / EXEMPLO:**
*Cota√ß√£o A√©reo ‚úà Lisboa*
üìÖ Per√≠odo: 11/07 a 23/07
üë• Passageiros: 04 adultos e 01 crian√ßa

Abaixo est√£o as op√ß√µes que encontramos:
---
*OP√á√ÉO 1 - Iberia (Com bagagem despachada)*

11/07 - Guarulhos 19:15 / Lisboa 16:05 (com conex√£o)
--
23/07 - Lisboa 08:25 / Guarulhos 17:35 (com conex√£o)

üí∞ **Valor:** R$ 28.975,58
üí≥ **Pagamento:** Primeira parcela de R$ 8.698,70 + 4x de R$ 5.069,22
üè∑Ô∏è N√£o reembols√°vel
üîó https://www.cvc.com.br/link-exemplo-1
---
Valores sujeitos a confirma√ß√£o e disponibilidade.

**INSTRU√á√ïES:**
1.  **CABE√áALHO GERAL**: Crie o cabe√ßalho com o destino, per√≠odo e passageiros.
2.  **PARA CADA OP√á√ÉO**: Crie um t√≠tulo claro, formate os voos, extraia valor, pagamento, reembolso e o link limpo.
3.  **BAGAGEM**: Analise CADA op√ß√£o para determinar a bagagem e mencione no t√≠tulo da op√ß√£o.
${regrasGerais}\n${tabelaAeroportos}`;

        case 'aereo_conexao_detalhada':
             return `Sua tarefa √© converter os dados brutos de um voo com CONEX√ÉO DETALHADA em um or√ßamento formatado.

**DADOS BRUTOS:**
${conteudoPrincipal}

**TEMPLATE A SER PREENCHIDO:**
${TEMPLATES.aereo_conexao_detalhada}

**INSTRU√á√ïES:**
1.  Extraia os detalhes de cada trecho da conex√£o, incluindo os hor√°rios e o tempo de espera.
2.  Preencha os campos \`{detalhes_ida}\` e \`{detalhes_volta}\` com as informa√ß√µes formatadas.
${regrasGerais}\n${tabelaAeroportos}`;

        case 'pacote_completo':
            return `Sua tarefa √© converter os dados brutos de um PACOTE COMPLETO em um or√ßamento formatado.

**DADOS BRUTOS:**
${conteudoPrincipal}

**TEMPLATE A SER PREENCHIDO:**
${TEMPLATES.pacote_completo}

**INSTRU√á√ïES:**
1.  Extraia os detalhes do voo.
2.  Liste TODAS as op√ß√µes de hot√©is encontradas no texto, formatando cada uma com Localiza√ß√£o, Quarto, Regime, Pre√ßo e Link.
${regrasGerais}\n${tabelaAeroportos}`;
            
        default: // aereo_simples e outros
            return `Sua tarefa √© converter os dados brutos de um voo em um or√ßamento formatado para WhatsApp.

**DADOS BRUTOS:**
${conteudoPrincipal}

**TEMPLATE A SER PREENCHIDO:**
${TEMPLATES.aereo_simples}

**INSTRU√á√ïES:**
1.  Extraia todas as informa√ß√µes do voo (companhia, datas, hor√°rios, etc.).
2.  Preencha o template com os dados encontrados.
${regrasGerais}\n${tabelaAeroportos}`;
    }
}
