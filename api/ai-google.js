// üöÄ CVC ITAQUA v6.0 - GOOGLE DOCS API (COM CACHE)
import { google } from 'googleapis';

// ================================================================================
// üìã SISTEMA DE CACHE DO MANUAL
// ================================================================================
let cache = {
  manual: null,
  timestamp: 0,
};
const CACHE_DURATION = 10 * 60 * 1000; // 10 minutos

// ================================================================================
// üîê AUTENTICA√á√ÉO GOOGLE
// ================================================================================
const credentialsJsonString = process.env.GOOGLE_CREDENTIALS_JSON;
if (!credentialsJsonString) {
  throw new Error('A vari√°vel de ambiente GOOGLE_CREDENTIALS_JSON n√£o foi definida.');
}
const credentials = JSON.parse(credentialsJsonString);

const auth = new google.auth.GoogleAuth({
  credentials: {
    client_email: credentials.client_email,
    private_key: credentials.private_key,
  },
  scopes: ['https://www.googleapis.com/auth/documents.readonly'],
});

// ================================================================================
// üìö FUN√á√ÉO PARA LER O MANUAL DO GOOGLE DOCS
// ================================================================================
async function lerManualGoogleDocs() {
  const agora = Date.now();
  
  // Verificar cache
  if (cache.manual && (agora - cache.timestamp < CACHE_DURATION)) {
    console.log('‚úÖ Manual carregado do CACHE');
    return cache.manual;
  }
  
  try {
    console.log('üîÑ Baixando novo manual do Google Docs...');
    const docs = google.docs({ version: 'v1', auth });
    const documentId = process.env.GOOGLE_DOCS_ID || '1J6luZmr0Q_ldqsmEJ4kuMEfA7BYt3DInd7-Tt98hInY';
    
    const response = await docs.documents.get({ documentId });
    let manualTexto = '';
    
    const content = response.data.body?.content || [];
    content.forEach(element => {
      if (element.paragraph) {
        element.paragraph.elements?.forEach(elem => {
          if (elem.textRun?.content) {
            manualTexto += elem.textRun.content;
          }
        });
      }
    });
    
    // Salvar no cache
    cache.manual = manualTexto;
    cache.timestamp = agora;
    
    console.log('‚úÖ Manual carregado do Google Docs:', manualTexto.length, 'caracteres');
    return manualTexto;
    
  } catch (error) {
    console.error('‚ùå Erro ao ler Google Docs:', error.message);
    throw new Error(`Erro ao conectar com Google Docs: ${error.message}`);
  }
}

// ================================================================================
// üéØ HANDLER PRINCIPAL DA API
// ================================================================================
export default async function handler(req, res) {
  // Configura√ß√£o de CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  
  // Handle OPTIONS para CORS
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  // GET - Status da API
  if (req.method === 'GET') {
    const hasOpenAI = !!process.env.OPENAI_API_KEY;
    const hasAnthropic = !!process.env.ANTHROPIC_API_KEY;
    const hasGoogle = !!process.env.GOOGLE_CREDENTIALS_JSON;
    
    return res.status(200).json({
      success: true,
      message: 'API CVC Itaqua v6.0 - Online',
      services: {
        openai: hasOpenAI ? 'Configurado' : 'N√£o configurado',
        anthropic: hasAnthropic ? 'Configurado' : 'N√£o configurado',
        googleDocs: hasGoogle ? 'Configurado' : 'N√£o configurado'
      },
      cache: {
        hasManual: !!cache.manual,
        age: cache.manual ? `${Math.floor((Date.now() - cache.timestamp) / 1000)}s` : 'N/A'
      }
    });
  }
  
  // POST - Processar or√ßamento
  if (req.method === 'POST') {
    try {
      console.log('üì• Requisi√ß√£o recebida');
      
      const { 
        observacoes = '', 
        textoColado = '',
        destino = '',
        adultos = '',
        criancas = 0,
        tipos = [],
        parcelamento = null,
        imagemBase64 = null,
        pdfContent = null
      } = req.body;
      
      // Buscar manual do Google Docs
      const manualCompleto = await lerManualGoogleDocs();
      
      // Determinar conte√∫do principal
      const conteudoPrincipal = observacoes || textoColado || pdfContent || '';
      
      // Verificar se √© requisi√ß√£o de dicas ou ranking
      const isDicas = tipos.includes('Dicas');
      const isRanking = tipos.includes('Ranking');
      
      let prompt = '';
      
      // ================================================================================
      // üí° PROMPT PARA DICAS
      // ================================================================================
      if (isDicas) {
        prompt = `Voc√™ √© um especialista em viagens da CVC Itaqua. 
        Crie dicas pr√°ticas e √∫teis sobre ${destino || 'o destino'}.
        
        Use este formato EXATO:
        
        üåü DICAS SOBRE [DESTINO] üåü
        
        üìç MELHOR √âPOCA PARA VISITAR:
        [Informa√ß√£o sobre clima e temporadas]
        
        üí∞ DICAS DE ECONOMIA:
        [3-4 dicas para economizar]
        
        üçΩÔ∏è GASTRONOMIA LOCAL:
        [Pratos t√≠picos e onde comer]
        
        üéØ PRINCIPAIS ATRA√á√ïES:
        [Top 5 lugares imperd√≠veis]
        
        üí° DICAS IMPORTANTES:
        [Documenta√ß√£o, moeda, fuso hor√°rio, etc.]
        
        üöï TRANSPORTE:
        [Como se locomover na cidade]
        
        üõçÔ∏è COMPRAS:
        [O que comprar e onde]
        
        ‚ö†Ô∏è CUIDADOS:
        [Avisos de seguran√ßa e sa√∫de]`;
      }
      // ================================================================================
      // üèÜ PROMPT PARA RANKING
      // ================================================================================
      else if (isRanking) {
        prompt = `Voc√™ √© um especialista em hot√©is da CVC Itaqua.
        Crie um ranking dos TOP 5 hot√©is em ${destino || 'o destino'}.
        
        Use este formato EXATO:
        
        üèÜ TOP 5 HOT√âIS - [DESTINO] üèÜ
        
        1Ô∏è‚É£ [Nome do Hotel] ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê
        üìç [Localiza√ß√£o/Bairro]
        ‚ú® [Principal diferencial]
        üí∞ Di√°ria m√©dia: R$ [valor]
        
        2Ô∏è‚É£ [Nome do Hotel] ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê
        üìç [Localiza√ß√£o/Bairro]
        ‚ú® [Principal diferencial]
        üí∞ Di√°ria m√©dia: R$ [valor]
        
        3Ô∏è‚É£ [Nome do Hotel] ‚≠ê‚≠ê‚≠ê‚≠ê
        üìç [Localiza√ß√£o/Bairro]
        ‚ú® [Principal diferencial]
        üí∞ Di√°ria m√©dia: R$ [valor]
        
        4Ô∏è‚É£ [Nome do Hotel] ‚≠ê‚≠ê‚≠ê‚≠ê
        üìç [Localiza√ß√£o/Bairro]
        ‚ú® [Principal diferencial]
        üí∞ Di√°ria m√©dia: R$ [valor]
        
        5Ô∏è‚É£ [Nome do Hotel] ‚≠ê‚≠ê‚≠ê
        üìç [Localiza√ß√£o/Bairro]
        ‚ú® [Boa rela√ß√£o custo-benef√≠cio]
        üí∞ Di√°ria m√©dia: R$ [valor]`;
      }
      // ================================================================================
      // üìã PROMPT PRINCIPAL PARA OR√áAMENTOS (OTIMIZADO)
      // ================================================================================
      else {
        prompt = `Voc√™ √© um assistente especialista da CVC Itaqua. Sua √∫nica fun√ß√£o √© receber DADOS de um cliente e um MANUAL de formata√ß√£o e retornar um or√ßamento perfeitamente formatado, seguindo a l√≥gica de decis√£o abaixo.

**MANUAL COMPLETO (Use para consultar os templates exatos):**
${manualCompleto}

**DADOS DO CLIENTE PARA PROCESSAR:**
${conteudoPrincipal}
${destino ? `\nDestino adicional informado: ${destino}` : ''}
${adultos ? `\nAdultos: ${adultos}` : ''}
${criancas > 0 ? `\nCrian√ßas: ${criancas}` : ''}
${parcelamento ? `\nParcelamento solicitado: ${parcelamento}x sem juros` : ''}

// =================================================================
// L√ìGICA DE DECIS√ÉO OBRIGAT√ìRIA (SIGA ESTA √ÅRVORE DE DECIS√ÉO):
// =================================================================

**AN√ÅLISE PRIORIT√ÅRIA - IDENTIFIQUE O TIPO:**

0. **VERIFICA√á√ÉO INICIAL - M√öLTIPLOS BLOCOS DE VOOS**
   - CONTE quantos blocos separados de voos existem nos dados
   - SE houver 2 ou mais blocos com:
     * Diferentes datas de viagem OU
     * Diferentes destinos OU  
     * Diferentes origens OU
     * Separados por "Selecionar" ou "Excluir"
   - ENT√ÉO: Formate CADA bloco como uma OP√á√ÉO separada (OP√á√ÉO 1, OP√á√ÉO 2, etc.)
   - Use a estrutura: Um t√≠tulo para cada op√ß√£o, depois as informa√ß√µes de cada voo

1. **M√öLTIPLOS VOOS DIFERENTES (Prioridade m√°xima)**
   - SE existem 2+ blocos de voos com datas OU destinos OU origens diferentes
   - E N√ÉO s√£o apenas op√ß√µes de tarifa do mesmo voo
   - ENT√ÉO: Use template "7. M√öLTIPLAS COMPANHIAS INTERNACIONAIS" com OP√á√ÉO 1, OP√á√ÉO 2, etc.
   - IMPORTANTE: Cada voo diferente deve ser uma OP√á√ÉO separada

2. **CRUZEIRO**
   - SE cont√©m: "cruzeiro", "navio", "cabine", "MSC", "Costa"
   - ENT√ÉO: Use template "11. CRUZEIRO"

3. **PACOTE COMPLETO**
   - SE cont√©m: "pacote" OU ("hotel" E "a√©reo") OU "hospedagem inclu√≠da"
   - ENT√ÉO: Use template "10. PACOTE COMPLETO"

4. **HOT√âIS (sem a√©reo)**
   - SE cont√©m apenas hot√©is, sem men√ß√£o a voos:
     - Com datas sequenciais diferentes: Use "9. ROTEIRO DE HOT√âIS"
     - Com mesma data, m√∫ltiplas op√ß√µes: Use "8. HOT√âIS - M√öLTIPLAS OP√á√ïES"

5. **MULTITRECHO**
   - SE cont√©m: "multitrecho" OU "Trecho 1, Trecho 2, Trecho 3" 
   - OU roteiro tipo A‚ÜíB‚ÜíC‚ÜíD
   - ENT√ÉO: Use template "6. MULTITRECHO"

6. **M√öLTIPLAS OP√á√ïES DO MESMO VOO**
   - SE s√£o 2-3 op√ß√µes de tarifa para o MESMO voo (mesma data/rota):
     - 2 op√ß√µes: Use template "4. M√öLTIPLAS OP√á√ïES - 2 PLANOS"
     - 3 op√ß√µes: Use template "5. M√öLTIPLAS OP√á√ïES - 3 PLANOS"

7. **VOO SOMENTE IDA**
   - SE cont√©m: "somente ida", "apenas ida", "one way" OU n√£o tem volta
   - ENT√ÉO: Use template "3. A√âREO SOMENTE IDA"

8. **CONEX√ÉO DETALHADA**
   - SE mostra tempo de espera E aeroporto de conex√£o explicitamente
   - ENT√ÉO: Use template "2. A√âREO IDA E VOLTA COM CONEX√ÉO DETALHADA"

9. **IDA E VOLTA SIMPLES (padr√£o)**
   - TODOS os outros casos de voo com ida e volta
   - Use template "1. A√âREO IDA E VOLTA SIMPLES"

// =================================================================
// REGRAS CR√çTICAS DE FORMATA√á√ÉO:
// =================================================================

**CONVERS√ïES OBRIGAT√ìRIAS DE AEROPORTOS:**
- GRU ‚Üí Guarulhos
- CGH ‚Üí Congonhas  
- SDU ‚Üí Santos Dumont
- GIG ‚Üí Gale√£o
- SSA ‚Üí Salvador
- REC ‚Üí Recife
- FOR ‚Üí Fortaleza
- BSB ‚Üí Bras√≠lia
- POA ‚Üí Porto Alegre
- CWB ‚Üí Curitiba
- FLN ‚Üí Florian√≥polis
- NAT ‚Üí Natal
- MCZ ‚Üí Macei√≥
- CNF ‚Üí Confins
- VCP ‚Üí Viracopos
- (veja tabela completa no manual)

**FORMATA√á√ÉO ESSENCIAL:**
1. T√çTULO: Sempre apenas "*Companhia*" (SEM cidades, SEM rotas)
   - Correto: "*Latam*" ou "*GOL*" ou "*Azul*"
   - ERRADO: "*Latam - S√£o Paulo ‚úà Rio*"
2. DATAS: Formato "15/11" (sempre 2 d√≠gitos)
3. HOR√ÅRIOS: Formato "06:20" (24h, sem espa√ßos)
4. VALORES: "R$ 1.234,56" (espa√ßo ap√≥s R$, v√≠rgula decimal)
5. PASSAGEIROS: "02 adultos" (zero √† esquerda)
6. SEPARADOR IDA/VOLTA: Sempre usar "--"
7. LINKS: Se houver URL no texto, adicionar linha: üîó URL (SEM colchetes)
8. BAGAGEM: SEMPRE incluir informa√ß√£o de bagagem:
   - Padr√£o (quando n√£o informado): "‚úÖ Inclui 1 item pessoal + 1 mala de m√£o 10kg"
   - Com despachada: "‚úÖ Inclui 1 item pessoal + 1 mala de m√£o 10kg + 1 mala despachada 23kg"
   - Internacional espec√≠fico: Seguir o que estiver descrito
9. FINALIZA√á√ÉO: Sempre terminar com "Valores sujeitos a confirma√ß√£o e disponibilidade"

**PARCELAMENTO - REGRAS IMPORTANTES:**
- COM ENTRADA: "Em at√© Xx sem juros no cart√£o, sendo a primeira de R$ xxx + (X-1)x de R$ xxx"
- Exemplo: "Em at√© 10x sem juros no cart√£o, sendo a primeira de R$ 1.288,99 + 9x de R$ 576,73"
- NUNCA usar a palavra "Entrada", sempre "primeira parcela" ou "sendo a primeira"
- SEM ENTRADA: "10x de R$ xxx s/ juros no cart√£o"

**CASOS ESPECIAIS:**
- Crian√ßas: idade em ANOS (2-11 anos)
- Beb√™s: idade em MESES (0-23 meses)
- Chegada dia seguinte: "23:30 (15/11)"
- M√∫ltiplos voos: Cada um pode ter seu pr√≥prio link e parcelamento

**INSTRU√á√ÉO FINAL:**
- Use EXATAMENTE o formato do template escolhido
- N√ÉO invente informa√ß√µes n√£o fornecidas
- MANTENHA todos os emojis do template
- SEMPRE inclua informa√ß√£o de bagagem (se n√£o houver, use o padr√£o)
- Responda APENAS com o or√ßamento formatado, sem explica√ß√µes adicionais

**EXEMPLO DE M√öLTIPLOS VOOS COM TODOS OS DETALHES:**
Se receber 2 voos diferentes com parcelamento e links, formate assim:

*OP√á√ÉO 1 - Latam*
29/12 - Guarulhos 12:15 / Santos Dumont 13:15 (voo direto)
--
04/01 - Gale√£o 14:00 / Guarulhos 15:10 (voo direto)

üí∞ R$ 6.479,56 para 01 adulto
‚úÖ Inclui 1 item pessoal + 1 mala de m√£o 10kg
üí≥ Em at√© 10x sem juros no cart√£o, sendo a primeira de R$ 1.288,99 + 9x de R$ 576,73
üè∑Ô∏è N√£o reembols√°vel
üîó https://www.cvc.com.br/carrinho-dinamico/68989c87bd7224e8db4acfb6

*OP√á√ÉO 2 - Latam*
18/09 - Salvador 05:00 / Gale√£o 07:10 (voo direto)
--
25/09 - Gale√£o 22:30 / Salvador 00:30 (voo direto)

üí∞ R$ 845,96 para 01 adulto
‚úÖ Inclui 1 item pessoal + 1 mala de m√£o 10kg
üí≥ Em at√© 9x sem juros no cart√£o, sendo a primeira de R$ 225,72 + 8x de R$ 77,53
üè∑Ô∏è N√£o reembols√°vel
üîó https://www.cvc.com.br/carrinho-dinamico/68989d6121c4f74e9d1e9fd5

Valores sujeitos a confirma√ß√£o e disponibilidade`;
      }
      
      // ================================================================================
      // ü§ñ DECIS√ÉO: USAR GPT OU CLAUDE?
      // ================================================================================
      let resultado = '';
      let iaUsada = 'gpt-4o-mini'; // padr√£o
      
      // Usar Claude para imagens ou casos complexos
      const usarClaude = imagemBase64 || 
                        (conteudoPrincipal.length > 2000) ||
                        tipos.includes('Cruzeiro') ||
                        tipos.includes('Multitrecho');
      
      if (usarClaude && process.env.ANTHROPIC_API_KEY) {
        // ================================================================================
        // ü§ñ PROCESSAMENTO COM CLAUDE
        // ================================================================================
        console.log('ü§ñ Usando Claude 3 Haiku...');
        iaUsada = 'claude-3-haiku';
        
        const messages = [{
          role: 'user',
          content: imagemBase64 ? [
            { type: 'text', text: prompt },
            { 
              type: 'image', 
              source: {
                type: 'base64',
                media_type: imagemBase64.split(';')[0].split(':')[1],
                data: imagemBase64.split(',')[1]
              }
            }
          ] : prompt
        }];
        
        const claudeResponse = await fetch('https://api.anthropic.com/v1/messages', {
          method: 'POST',
          headers: {
            'x-api-key': process.env.ANTHROPIC_API_KEY,
            'anthropic-version': '2023-06-01',
            'content-type': 'application/json'
          },
          body: JSON.stringify({
            model: 'claude-3-haiku-20240307',
            max_tokens: 1500,
            temperature: 0.2,
            messages
          })
        });
        
        if (!claudeResponse.ok) {
          const errorText = await claudeResponse.text();
          console.error('‚ùå Erro Claude:', errorText);
          throw new Error(`Erro ao processar com Claude: ${errorText}`);
        }
        
        const claudeData = await claudeResponse.json();
        resultado = claudeData.content[0].text;
        
      } else {
        // ================================================================================
        // ü§ñ PROCESSAMENTO COM GPT-4o-mini
        // ================================================================================
        console.log('ü§ñ Usando GPT-4o-mini...');
        
        const OPENAI_KEY = process.env.OPENAI_API_KEY;
        if (!OPENAI_KEY) {
          throw new Error('OpenAI API key n√£o configurada.');
        }
        
        const gptResponse = await fetch('https://api.openai.com/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${OPENAI_KEY}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            model: 'gpt-4o-mini',
            messages: [{ role: 'user', content: prompt }],
            temperature: 0.2,
            max_tokens: 1500
          })
        });
        
        if (!gptResponse.ok) {
          const errorText = await gptResponse.text();
          console.error('‚ùå Erro GPT:', errorText);
          throw new Error(`Erro ao processar com GPT: ${errorText}`);
        }
        
        const gptData = await gptResponse.json();
        resultado = gptData.choices[0].message.content;
      }
      
      // ================================================================================
      // ‚úÖ RESPOSTA FINAL
      // ================================================================================
      console.log('‚úÖ Processamento conclu√≠do com', iaUsada);
      
      return res.status(200).json({
        success: true,
        result: resultado,
        ia_usada: iaUsada,
        cache_info: {
          manual_cached: cache.manual ? true : false,
          cache_age_seconds: cache.manual ? Math.floor((Date.now() - cache.timestamp) / 1000) : 0
        }
      });
      
    } catch (error) {
      console.error('‚ùå Erro no processamento:', error);
      return res.status(500).json({
        success: false,
        error: error.message || 'Erro desconhecido ao processar or√ßamento'
      });
    }
  }
  
  // M√©todo n√£o suportado
  return res.status(405).json({
    success: false,
    error: 'M√©todo n√£o suportado. Use GET para status ou POST para processar.'
  });
}
