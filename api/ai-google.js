// ================================================================================
// üöÄ CVC ITAQUA v3.2 - CORRE√á√ÉO DE CONEX√ïES
// ================================================================================
// ARQUIVO: api/ai-google.js - BACKEND PRINCIPAL CORRIGIDO
// ================================================================================

import { Anthropic } from '@anthropic-ai/sdk';
import OpenAI from 'openai';

// Importar templates e corre√ß√µes
import { TEMPLATES, AEROPORTOS, CONFIG } from './templates.js';
import { posProcessar } from './corrections.js';

// Configurar APIs
const anthropic = new Anthropic({
    apiKey: process.env.ANTHROPIC_API_KEY
});

const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY
});

// ================================================================================
// üéØ FUN√á√ÉO PRINCIPAL - HANDLER DA API
// ================================================================================

export default async function handler(req, res) {
    console.log('[v3.2] üöÄ CVC ITAQUA API iniciada');
    
    // Configurar CORS
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    
    if (req.method === 'OPTIONS') {
        return res.status(200).end();
    }
    
    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'M√©todo n√£o permitido' });
    }
    
    try {
        const dados = req.body;
        console.log('[v3.2] üìã Dados recebidos:', {
            temImagem: !!dados.imagemBase64,
            temPDF: !!dados.pdfContent,
            temTexto: !!dados.observacoes || !!dados.textoColado,
            destino: dados.destino,
            tipos: dados.tipos,
            parcelamento: dados.parcelamento
        });
        
        // Processar or√ßamento
        const resultado = await processarOrcamento(dados);
        
        // Retornar sucesso
        return res.status(200).json({
            success: true,
            result: resultado,
            ia_usada: dados.imagemBase64 ? 'Claude' : 'GPT-4o-mini',
            version: CONFIG.VERSION
        });
        
    } catch (error) {
        console.error('[v3.2] ‚ùå Erro:', error);
        return res.status(500).json({
            success: false,
            error: error.message || 'Erro ao processar or√ßamento'
        });
    }
}

// ================================================================================
// üéØ PROCESSAMENTO PRINCIPAL DO OR√áAMENTO
// ================================================================================

async function processarOrcamento(dados) {
    console.log('[v3.2] üîß Iniciando processamento...');
    
    // 1. Preparar conte√∫do principal
    const conteudoPrincipal = prepararConteudo(dados);
    
    // 2. Detectar tipo de or√ßamento
    const tipoOrcamento = detectarTipoOrcamento(conteudoPrincipal, dados.tipos);
    console.log('[v3.2] üìä Tipo detectado:', tipoOrcamento);
    
    // 3. Buscar template apropriado
    const template = buscarTemplate(tipoOrcamento);
    
    // 4. Montar prompt espec√≠fico para IA
    const prompt = montarPrompt(template, conteudoPrincipal, dados, tipoOrcamento);
    
    // 5. Decidir qual IA usar
    const usarClaude = dados.imagemBase64 || 
                      conteudoPrincipal.length > 3000 ||
                      tipoOrcamento.includes('PACOTE') ||
                      tipoOrcamento.includes('MULTITRECHO');
    
    // 6. Chamar IA apropriada
    let respostaIA;
    if (usarClaude) {
        respostaIA = await chamarClaude(prompt, dados.imagemBase64);
    } else {
        respostaIA = await chamarGPT(prompt);
    }
    
    // 7. Aplicar p√≥s-processamento
    const resultado = posProcessar(respostaIA, conteudoPrincipal, dados.parcelamento);
    
    return resultado;
}

// ================================================================================
// üîç DETEC√á√ÉO DE TIPO DE OR√áAMENTO
// ================================================================================

function detectarTipoOrcamento(conteudo, tipos) {
    const conteudoLower = conteudo.toLowerCase();
    
    // Se solicitado dicas espec√≠ficas
    if (tipos && tipos.includes('Dicas')) {
        return 'DICAS';
    }
    
    // Se solicitado ranking espec√≠fico
    if (tipos && tipos.includes('Ranking')) {
        return 'RANKING_HOTEIS';
    }
    
    // Cruzeiro
    if (conteudoLower.includes('cruzeiro') || conteudoLower.includes('navio') || 
        conteudoLower.includes('cabine')) {
        return 'CRUZEIRO';
    }
    
    // Pacote completo
    if (conteudoLower.includes('pacote') || 
        (conteudoLower.includes('hotel') && conteudoLower.includes('a√©reo'))) {
        return 'PACOTE_COMPLETO';
    }
    
    // Multitrecho
    if (conteudoLower.includes('multitrecho') || conteudoLower.includes('trecho 1')) {
        return 'MULTITRECHO';
    }
    
    // M√∫ltiplas op√ß√µes
    if (conteudoLower.includes('op√ß√£o 1') || conteudoLower.includes('plano 1')) {
        return 'MULTIPLAS_OPCOES';
    }
    
    // Somente ida
    if (conteudoLower.includes('somente ida') || conteudoLower.includes('apenas ida') ||
        conteudoLower.includes('one way')) {
        return 'AEREO_SOMENTE_IDA';
    }
    
    // ‚ö†Ô∏è CORRE√á√ÉO PRINCIPAL: Verificar se tem DETALHES reais de conex√£o
    const temDetalhesConexao = verificarDetalhesConexao(conteudo);
    
    if (temDetalhesConexao) {
        return 'AEREO_CONEXAO_DETALHADA';
    }
    
    // Padr√£o: a√©reo simples
    return 'AEREO_SIMPLES';
}

// ================================================================================
// üîç NOVA FUN√á√ÉO: VERIFICAR SE TEM DETALHES REAIS DE CONEX√ÉO
// ================================================================================

function verificarDetalhesConexao(conteudo) {
    // Procurar por padr√µes que indicam DETALHES REAIS de conex√£o:
    // - Aeroporto de conex√£o mencionado (ex: "conex√£o em Madrid")
    // - Hor√°rios espec√≠ficos da conex√£o
    // - Tempo de espera mencionado (ex: "2h de espera")
    
    const padroes = [
        /conex√£o em (\w+)/i,           // "conex√£o em Madrid"
        /escala em (\w+)/i,             // "escala em Lisboa"
        /(\d+h?\s*\d*\s*min?\s*de espera)/i,  // "2h de espera"
        /parada em (\w+)/i,             // "parada em Paris"
        /via (\w+)/i                    // "via Londres"
    ];
    
    for (let padrao of padroes) {
        if (padrao.test(conteudo)) {
            // Verificar se n√£o √© apenas "Uma escala" gen√©rico
            if (!conteudo.match(/uma escala\s*\d+h/i)) {
                return true;
            }
        }
    }
    
    return false;
}

// ================================================================================
// üìù MONTAGEM DO PROMPT PARA IA
// ================================================================================

function montarPrompt(template, conteudo, dados, tipoOrcamento) {
    // ‚ö†Ô∏è INSTRU√á√ÉO CR√çTICA ADICIONADA
    const instrucaoConexao = `
REGRA CR√çTICA SOBRE CONEX√ïES:
- Se o texto diz "Uma escala" mas N√ÉO fornece detalhes (aeroporto, hor√°rios), use formato SIMPLES: (com conex√£o)
- NUNCA invente aeroportos de conex√£o que n√£o foram mencionados
- "16h 50min" √© o tempo TOTAL do voo, N√ÉO √© tempo de espera
- Se n√£o h√° detalhes espec√≠ficos da conex√£o, N√ÉO use o template de conex√£o detalhada
- Exemplo correto sem detalhes: "Guarulhos 19:15 / Lisboa 16:05 (+1) (com conex√£o)"
- Exemplo ERRADO: inventar "conex√£o em Madrid" quando n√£o foi mencionado
`;
    
    let prompt = `
Voc√™ √© especialista em formata√ß√£o de or√ßamentos de viagem para WhatsApp da CVC Itaquaquecetuba.
SIGA O MANUAL v3.2 COM PRECIS√ÉO ABSOLUTA.

${instrucaoConexao}

TEMPLATE A SEGUIR EXATAMENTE:
${template}

DADOS FORNECIDOS:
${conteudo}

REGRAS OBRIGAT√ìRIAS:
1. Use o template EXATAMENTE como fornecido
2. Converta TODOS os c√≥digos de aeroporto para nomes completos
3. NUNCA invente informa√ß√µes n√£o fornecidas
4. Se h√° "Uma escala" sem detalhes, use apenas "(com conex√£o)"
5. Mantenha formata√ß√£o para WhatsApp
6. Sempre termine com "Valores sujeitos a confirma√ß√£o e disponibilidade"
7. N√ÉO adicione vers√£o no final (ser√° adicionada automaticamente)

PASSAGEIROS: ${montarTextoPassageiros(dados)}
PARCELAMENTO: ${dados.parcelamento ? dados.parcelamento + 'x sem juros' : 'detectar do texto'}

Retorne APENAS o or√ßamento formatado, sem explica√ß√µes.`;

    return prompt;
}

// ================================================================================
// üéØ BUSCAR TEMPLATE APROPRIADO
// ================================================================================

function buscarTemplate(tipo) {
    const mapa = {
        'AEREO_SIMPLES': TEMPLATES.AEREO_SIMPLES,
        'AEREO_CONEXAO_DETALHADA': TEMPLATES.AEREO_CONEXAO_DETALHADA,
        'AEREO_SOMENTE_IDA': TEMPLATES.AEREO_SOMENTE_IDA,
        'MULTIPLAS_OPCOES': TEMPLATES.MULTIPLAS_OPCOES,
        'MULTITRECHO': TEMPLATES.MULTITRECHO,
        'CRUZEIRO': TEMPLATES.CRUZEIRO,
        'PACOTE_COMPLETO': TEMPLATES.PACOTE_COMPLETO,
        'HOTEIS': TEMPLATES.HOTEIS,
        'ROTEIRO_HOTEIS': TEMPLATES.ROTEIRO_HOTEIS,
        'DICAS': TEMPLATES.DICAS,
        'RANKING_HOTEIS': TEMPLATES.RANKING_HOTEIS
    };
    
    return mapa[tipo] || TEMPLATES.AEREO_SIMPLES;
}

// ================================================================================
// ü§ñ CHAMADAS PARA AS IAs
// ================================================================================

async function chamarClaude(prompt, imagemBase64 = null) {
    console.log('[v3.2] ü§ñ Chamando Claude...');
    
    const messages = [{
        role: 'user',
        content: imagemBase64 ? [
            {
                type: 'image',
                source: {
                    type: 'base64',
                    media_type: imagemBase64.split(',')[0].split(':')[1].split(';')[0],
                    data: imagemBase64.split(',')[1]
                }
            },
            { type: 'text', text: prompt }
        ] : prompt
    }];
    
    try {
        const response = await anthropic.messages.create({
            model: 'claude-3-haiku-20240307',
            max_tokens: 2000,
            temperature: 0.3,
            messages: messages
        });
        
        return response.content[0].text;
    } catch (error) {
        console.error('[v3.2] ‚ùå Erro Claude:', error);
        throw new Error('Erro ao processar com Claude: ' + error.message);
    }
}

async function chamarGPT(prompt) {
    console.log('[v3.2] ü§ñ Chamando GPT-4o-mini...');
    
    try {
        const response = await openai.chat.completions.create({
            model: 'gpt-4o-mini',
            messages: [
                {
                    role: 'system',
                    content: 'Voc√™ √© especialista em formata√ß√£o de or√ßamentos CVC. NUNCA invente informa√ß√µes.'
                },
                { role: 'user', content: prompt }
            ],
            temperature: 0.3,
            max_tokens: 2000
        });
        
        return response.choices[0].message.content;
    } catch (error) {
        console.error('[v3.2] ‚ùå Erro GPT:', error);
        throw new Error('Erro ao processar com GPT: ' + error.message);
    }
}

// ================================================================================
// üîß FUN√á√ïES AUXILIARES
// ================================================================================

function prepararConteudo(dados) {
    const partes = [];
    
    if (dados.observacoes) partes.push(dados.observacoes);
    if (dados.textoColado) partes.push(dados.textoColado);
    if (dados.pdfContent) partes.push(dados.pdfContent);
    if (dados.destino) partes.push(`Destino: ${dados.destino}`);
    
    return partes.join('\n\n').trim();
}

function montarTextoPassageiros(dados) {
    const partes = [];
    
    if (dados.adultos) {
        const num = parseInt(dados.adultos);
        partes.push(`${String(num).padStart(2, '0')} ${num === 1 ? 'adulto' : 'adultos'}`);
    }
    
    if (dados.criancas && dados.criancas > 0) {
        const num = parseInt(dados.criancas);
        partes.push(`${String(num).padStart(2, '0')} ${num === 1 ? 'crian√ßa' : 'crian√ßas'}`);
    }
    
    return partes.length > 0 ? partes.join(' + ') : 'detectar do texto';
}

// ================================================================================
// üéØ LOG FINAL
// ================================================================================

console.log('[v3.2] ‚úÖ CVC ITAQUA API carregada com sucesso!');
console.log('[v3.2] üìã Vers√£o:', CONFIG.VERSION);
console.log('[v3.2] üîß Corre√ß√£o aplicada: N√£o inventa detalhes de conex√£o');
