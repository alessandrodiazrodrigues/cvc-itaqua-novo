// ================================================================================================
// üîß CVC ITAQUA v4.02 - VERS√ÉO DEBUG PARA DIAGNOSTICAR ERRO 500
// ================================================================================================
// Esta vers√£o tem logs detalhados e tratamento de erros robusto para identificar o problema
// ================================================================================================

const CONFIG = {
    VERSION: '4.02-debug',
    SISTEMA: 'CVC ITAQUA DEBUG'
};

// ================================================================================================
// üõ†Ô∏è HANDLER PRINCIPAL COM DEBUG COMPLETO
// ================================================================================================

export default async function handler(req, res) {
    console.log('üîç DEBUG: Iniciando handler...');
    
    // Headers CORS b√°sicos primeiro
    try {
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
        res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
        res.setHeader('Content-Type', 'application/json');
        console.log('‚úÖ DEBUG: Headers configurados');
    } catch (headerError) {
        console.error('‚ùå DEBUG: Erro ao configurar headers:', headerError);
        return res.status(500).json({
            success: false,
            error: 'Erro ao configurar headers',
            debug: headerError.message
        });
    }
    
    try {
        console.log('üîç DEBUG: M√©todo recebido:', req.method);
        
        // OPTIONS
        if (req.method === 'OPTIONS') {
            console.log('‚úÖ DEBUG: Respondendo OPTIONS');
            return res.status(200).json({ success: true, debug: 'OPTIONS OK' });
        }
        
        // GET - Status b√°sico
        if (req.method === 'GET') {
            console.log('‚úÖ DEBUG: Respondendo GET');
            return res.status(200).json({
                success: true,
                status: 'operational',
                version: CONFIG.VERSION,
                timestamp: new Date().toISOString(),
                message: 'CVC Itaqua API v4.02 - DEBUG MODE',
                debug: {
                    node_version: process.version,
                    platform: process.platform,
                    memory: process.memoryUsage(),
                    env_check: {
                        has_openai: !!process.env.OPENAI_API_KEY,
                        has_anthropic: !!process.env.ANTHROPIC_API_KEY
                    }
                }
            });
        }
        
        // POST - Valida√ß√£o b√°sica
        if (req.method === 'POST') {
            console.log('üîç DEBUG: Processando POST...');
            
            try {
                const body = req.body || {};
                console.log('‚úÖ DEBUG: Body recebido:', Object.keys(body));
                
                const {
                    observacoes = '',
                    textoColado = '',
                    destino = '',
                    tipos = []
                } = body;
                
                console.log('üîç DEBUG: Dados extra√≠dos:', {
                    observacoes_length: observacoes.length,
                    textoColado_length: textoColado.length,
                    destino,
                    tipos
                });
                
                // Resposta b√°sica por enquanto
                return res.status(200).json({
                    success: true,
                    result: 'API v4.02 DEBUG funcionando!\n\nDados recebidos:\n- Observa√ß√µes: ' + observacoes.length + ' caracteres\n- Texto colado: ' + textoColado.length + ' caracteres\n- Destino: ' + (destino || 'n√£o informado')\n- Tipos: ' + tipos.join(', '),
                    debug: {
                        timestamp: new Date().toISOString(),
                        body_keys: Object.keys(body),
                        memory_after: process.memoryUsage()
                    }
                });
                
            } catch (postError) {
                console.error('‚ùå DEBUG: Erro ao processar POST:', postError);
                return res.status(500).json({
                    success: false,
                    error: 'Erro ao processar POST',
                    debug: {
                        message: postError.message,
                        stack: postError.stack,
                        name: postError.name
                    }
                });
            }
        }
        
        // M√©todo n√£o suportado
        console.log('‚ö†Ô∏è DEBUG: M√©todo n√£o suportado:', req.method);
        return res.status(405).json({
            success: false,
            error: `M√©todo ${req.method} n√£o permitido`,
            debug: 'Use GET ou POST'
        });
        
    } catch (globalError) {
        console.error('‚ùå DEBUG: Erro global no handler:', globalError);
        
        try {
            return res.status(500).json({
                success: false,
                error: 'Erro interno do servidor',
                debug: {
                    message: globalError.message,
                    stack: globalError.stack,
                    name: globalError.name,
                    timestamp: new Date().toISOString()
                }
            });
        } catch (responseError) {
            console.error('‚ùå DEBUG: Erro ao enviar resposta de erro:', responseError);
            // √öltimo recurso
            return res.end('ERRO CR√çTICO NO SERVIDOR');
        }
    }
}

// ================================================================================================
// üéØ LOGS DE INICIALIZA√á√ÉO DEBUG
// ================================================================================================

console.log('üîß DEBUG: Arquivo carregado');
console.log('üîß DEBUG: Node.js version:', process.version);
console.log('üîß DEBUG: Platform:', process.platform);
console.log('üîß DEBUG: Memory usage:', process.memoryUsage());
console.log('üîß DEBUG: Environment variables check:');
console.log('  - OPENAI_API_KEY:', !!process.env.OPENAI_API_KEY);
console.log('  - ANTHROPIC_API_KEY:', !!process.env.ANTHROPIC_API_KEY);
console.log('üîß DEBUG: Handler function defined');

// ================================================================================================
// üìã INSTRU√á√ïES DE DEBUG
// ================================================================================================
/*
üîß VERS√ÉO DEBUG v4.02

Esta vers√£o simplificada serve para:
1. ‚úÖ Verificar se a fun√ß√£o b√°sica funciona
2. ‚úÖ Identificar onde est√° o erro 500
3. ‚úÖ Checar vari√°veis de ambiente
4. ‚úÖ Validar estrutura b√°sica

PASSOS PARA USAR:
1. Substitua temporariamente o arquivo da API por este
2. Fa√ßa deploy
3. Teste GET /api/ai-google (deve retornar status)
4. Teste POST com dados b√°sicos
5. Analise os logs para identificar o problema

DEPOIS DE IDENTIFICAR O PROBLEMA:
- Volte para a vers√£o completa v4.02
- Aplique a corre√ß√£o espec√≠fica identificada

POSS√çVEIS CAUSAS DO ERRO 500:
‚ùå Erro de sintaxe no c√≥digo principal
‚ùå Vari√°veis de ambiente n√£o configuradas  
‚ùå Import/export com problema
‚ùå Timeout na inicializa√ß√£o
‚ùå Mem√≥ria insuficiente
‚ùå Depend√™ncias faltando
*/
