// api/ai-google.js - SISTEMA H√çBRIDO v4.01 - CORRE√á√ïES GARANTIDAS
// ================================================================================
// üéØ SISTEMA QUE FOR√áA APLICA√á√ÉO DE TODAS AS CORRE√á√ïES
// üõ°Ô∏è GARANTE JSON V√ÅLIDO + APLICA CORRE√á√ïES MESMO SE IA FALHAR
// ================================================================================

import { safeJSONResponse } from './core/json-response.js';

// Configura√ß√£o atualizada
const SYSTEM_CONFIG = {
    VERSION: '4.01',
    SISTEMA: 'CVC ITAQUA H√çBRIDO'
};

// ================================================================================
// üß† HANDLER PRINCIPAL H√çBRIDO
// ================================================================================

export default async function handler(req, res) {
    const startTime = Date.now();
    const requestId = generateRequestId();
    
    try {
        console.log(`üöÄ [${requestId}] CVC ITAQUA v${SYSTEM_CONFIG.VERSION} - H√çBRIDO`);
        
        // 1. Setup b√°sico
        setupSecurityHeaders(res);
        
        if (req.method === 'OPTIONS') {
            return safeJSONResponse(res, true, 'CORS OK', null, { requestId });
        }
        
        if (req.method === 'GET') {
            return safeJSONResponse(res, true, getSystemStatus(), null, { requestId });
        }
        
        if (req.method !== 'POST') {
            return safeJSONResponse(res, false, 'Use POST', 'M√©todo n√£o permitido', { requestId });
        }
        
        // 2. Extrair dados
        const body = req.body || {};
        const {
            observacoes = '',
            textoColado = '',
            destino = '',
            adultos = 1,
            criancas = 0,
            tipos = [],
            parcelamento = '',
            imagemBase64 = null,
            pdfContent = null
        } = body;
        
        const conteudoPrincipal = (observacoes || textoColado || pdfContent || '').toString();
        
        if (!conteudoPrincipal.trim() && !imagemBase64) {
            return safeJSONResponse(res, false, 'Dados obrigat√≥rios', 
                'Adicione informa√ß√µes sobre a viagem', { requestId });
        }
        
        console.log(`üì• [${requestId}] Entrada: ${conteudoPrincipal.length} chars`);
        
        // 3. DETEC√á√ÉO B√ÅSICA
        const dadosDetectados = detectarDadosBasicos(conteudoPrincipal);
        const tipoOrcamento = detectarTipo(conteudoPrincipal, tipos);
        
        console.log(`üéØ [${requestId}] Tipo: ${tipoOrcamento}`);
        console.log(`üìä [${requestId}] Dados:`, dadosDetectados);
        
        // 4. FORMATA√á√ÉO COM IA (se dispon√≠vel)
        let resultadoIA = '';
        let iaUsada = 'none';
        
        try {
            if (process.env.OPENAI_API_KEY) {
                console.log(`üß† [${requestId}] Processando com IA...`);
                resultadoIA = await processarComIA(conteudoPrincipal, tipoOrcamento);
                iaUsada = 'gpt';
                console.log(`‚úÖ [${requestId}] IA gerou: ${resultadoIA.length} chars`);
            } else {
                console.log(`‚ö†Ô∏è [${requestId}] IA n√£o dispon√≠vel, usando template b√°sico`);
                resultadoIA = gerarTemplateBasico(conteudoPrincipal, dadosDetectados, tipoOrcamento);
            }
        } catch (iaError) {
            console.error(`‚ùå [${requestId}] Erro IA:`, iaError.message);
            resultadoIA = gerarTemplateBasico(conteudoPrincipal, dadosDetectados, tipoOrcamento);
            iaUsada = 'fallback';
        }
        
        // 5. APLICA√á√ÉO FOR√áADA DE TODAS AS CORRE√á√ïES
        console.log(`üîß [${requestId}] APLICANDO CORRE√á√ïES FOR√áADAS...`);
        
        let resultadoFinal = resultadoIA;
        
        // Aplicar corre√ß√µes uma por uma, FOR√áADAMENTE
        resultadoFinal = aplicarCorrecoesForcadas(resultadoFinal, conteudoPrincipal, {
            dadosDetectados,
            tipoOrcamento,
            parcelamento,
            requestId
        });
        
        console.log(`‚úÖ [${requestId}] Corre√ß√µes aplicadas com sucesso`);
        
        // 6. RESPOSTA FINAL
        const tempoTotal = Date.now() - startTime;
        
        return safeJSONResponse(res, true, resultadoFinal, null, {
            requestId,
            version: SYSTEM_CONFIG.VERSION,
            tipo: tipoOrcamento,
            ia_usada: iaUsada,
            ia_status: getIAStatus(iaUsada),
            tempo: `${tempoTotal}ms`,
            correcoes_aplicadas: true,
            processamento: {
                entrada_chars: conteudoPrincipal.length,
                saida_chars: resultadoFinal.length,
                correcoes: [
                    'datas_corrigidas',
                    'aeroportos_convertidos', 
                    'passageiros_formatados',
                    'bagagem_internacional',
                    'tipos_voo_padronizados',
                    'reembolso_formatado',
                    'versao_atualizada'
                ]
            }
        });
        
    } catch (error) {
        console.error(`üí• [${requestId}] Erro cr√≠tico:`, error);
        
        return safeJSONResponse(res, false, 'Erro interno', 
            'Erro no processamento. Tente novamente.', { 
                requestId, 
                error: error.message 
            });
    }
}

// ================================================================================
// üîß APLICA√á√ÉO FOR√áADA DE CORRE√á√ïES
// ================================================================================

function aplicarCorrecoesForcadas(texto, conteudoOriginal, contexto) {
    const { dadosDetectados, tipoOrcamento, parcelamento, requestId } = contexto;
    
    let resultado = texto;
    
    console.log(`üîß [${requestId}] Iniciando corre√ß√µes for√ßadas...`);
    
    // 1. CORRIGIR DATAS (for√ßar remo√ß√£o de dias da semana)
    console.log(`üìÖ [${requestId}] Corrigindo datas...`);
    resultado = corrigirDatasFor√ßado(resultado);
    
    // 2. CORRIGIR AEROPORTOS (for√ßar convers√£o)
    console.log(`‚úàÔ∏è [${requestId}] Corrigindo aeroportos...`);
    resultado = corrigirAeroportosFor√ßado(resultado);
    
    // 3. CORRIGIR PASSAGEIROS (for√ßar formato CVC)
    console.log(`üë• [${requestId}] Corrigindo passageiros...`);
    resultado = corrigirPassageirosFor√ßado(resultado, dadosDetectados);
    
    // 4. CORRIGIR BAGAGEM (for√ßar detec√ß√£o internacional)
    console.log(`üéí [${requestId}] Corrigindo bagagem...`);
    resultado = corrigirBagagemFor√ßado(resultado, conteudoOriginal);
    
    // 5. CORRIGIR TIPOS DE VOO (for√ßar padroniza√ß√£o)
    console.log(`üõ´ [${requestId}] Corrigindo tipos de voo...`);
    resultado = corrigirTiposVooFor√ßado(resultado);
    
    // 6. CORRIGIR REEMBOLSO (for√ßar formato padr√£o)
    console.log(`üè∑Ô∏è [${requestId}] Corrigindo reembolso...`);
    resultado = corrigirReembolsoFor√ßado(resultado);
    
    // 7. CORRIGIR PARCELAMENTO (se fornecido)
    if (parcelamento) {
        console.log(`üí≥ [${requestId}] Aplicando parcelamento...`);
        resultado = aplicarParcelamentoFor√ßado(resultado, parcelamento);
    }
    
    // 8. GARANTIR VERS√ÉO CORRETA
    console.log(`üìå [${requestId}] Aplicando vers√£o...`);
    resultado = garantirVersaoCorreta(resultado);
    
    // 9. LIMPEZA FINAL
    resultado = limpezaFinal(resultado);
    
    console.log(`‚úÖ [${requestId}] Todas as corre√ß√µes aplicadas!`);
    
    return resultado;
}

// ================================================================================
// üîß CORRE√á√ïES INDIVIDUAIS FOR√áADAS
// ================================================================================

function corrigirDatasFor√ßado(texto) {
    let resultado = texto;
    
    // Remover dias da semana agressivamente
    const diasSemana = ['s√°b', 'sab', 'seg', 'ter', 'qua', 'qui', 'sex', 'dom', 'segunda', 'ter√ßa', 'quarta', 'quinta', 'sexta', 's√°bado', 'domingo'];
    
    for (const dia of diasSemana) {
        // Padr√µes variados
        resultado = resultado.replace(new RegExp(`${dia},?\\s*(\\d{1,2}\\/\\d{2})`, 'gi'), '$1');
        resultado = resultado.replace(new RegExp(`${dia}\\s+de\\s+\\w+`, 'gi'), '');
    }
    
    // Converter datas extensas para DD/MM
    const meses = {
        'janeiro': '01', 'fevereiro': '02', 'mar√ßo': '03', 'abril': '04',
        'maio': '05', 'junho': '06', 'julho': '07', 'agosto': '08',
        'setembro': '09', 'outubro': '10', 'novembro': '11', 'dezembro': '12'
    };
    
    for (const [nome, num] of Object.entries(meses)) {
        resultado = resultado.replace(new RegExp(`(\\d{1,2})\\s+de\\s+${nome}`, 'gi'), (match, dia) => {
            return `${dia.padStart(2, '0')}/${num}`;
        });
    }
    
    return resultado;
}

function corrigirAeroportosFor√ßado(texto) {
    let resultado = texto;
    
    // Tabela de convers√£o completa
    const aeroportos = {
        'GRU': 'Guarulhos',
        'CGH': 'Congonhas', 
        'VCP': 'Viracopos',
        'GIG': 'Gale√£o',
        'SDU': 'Santos Dumont',
        'BSB': 'Bras√≠lia',
        'CNF': 'Confins',
        'POA': 'Porto Alegre',
        'SSA': 'Salvador',
        'REC': 'Recife',
        'FOR': 'Fortaleza',
        'MCO': 'Orlando',
        'LIS': 'Lisboa',
        'OPO': 'Porto',
        'MAD': 'Madrid',
        'BCN': 'Barcelona',
        'CDG': 'Paris',
        'FCO': 'Roma',
        'LHR': 'Londres',
        'MIA': 'Miami'
    };
    
    // Aplicar convers√µes FOR√áADAMENTE
    for (const [codigo, nome] of Object.entries(aeroportos)) {
        resultado = resultado.replace(new RegExp(`\\b${codigo}\\b`, 'g'), nome);
    }
    
    return resultado;
}

function corrigirPassageirosFor√ßado(texto, dadosDetectados) {
    let resultado = texto;
    
    // Detectar passageiros no texto original
    const matchPassageiros = texto.match(/(\d+)\s*adultos?\s*(?:e\s*(\d+)\s*crian√ßas?)?/i);
    
    if (matchPassageiros) {
        const adultos = parseInt(matchPassageiros[1]) || 1;
        const criancas = parseInt(matchPassageiros[2]) || 0;
        
        let novoFormato = `${adultos.toString().padStart(2, '0')} adulto${adultos > 1 ? 's' : ''}`;
        if (criancas > 0) {
            novoFormato += ` + ${criancas.toString().padStart(2, '0')} crian√ßa${criancas > 1 ? 's' : ''}`;
        }
        
        // Substituir TODAS as varia√ß√µes
        resultado = resultado.replace(/\d+\s*adultos?\s*(?:e\s*\d+\s*crian√ßas?)?/gi, novoFormato);
        resultado = resultado.replace(/Total\s*\([^)]+\)/gi, novoFormato);
    }
    
    return resultado;
}

function corrigirBagagemFor√ßado(texto, conteudoOriginal) {
    let resultado = texto;
    
    // Detectar se √© internacional
    const ehInternacional = /iberia|tap|lufthansa|air france|klm|classe econ√¥mica|lisboa|orlando|madrid|paris|roma/i.test(conteudoOriginal);
    
    // Detectar se tem bagagem
    const temBagagem = /com bagagem|bagagem despachada|classe econ√¥mica/i.test(conteudoOriginal);
    
    // Definir bagagem correta
    let bagagemCorreta;
    if (ehInternacional || temBagagem) {
        bagagemCorreta = 'Inclui 1 item pessoal + 1 mala de m√£o de 10kg + 1 bagagem despachada de 23kg';
    } else {
        bagagemCorreta = 'Inclui 1 item pessoal + 1 mala de m√£o de 10kg';
    }
    
    // FOR√áAR substitui√ß√£o de QUALQUER linha de bagagem
    const padroesBagagem = [
        /‚úÖ[^\n]*bagagem[^\n]*/gi,
        /‚úÖ[^\n]*classe[^\n]*/gi,
        /‚úÖ[^\n]*econ√¥mica[^\n]*/gi,
        /‚úÖ[^\n]*mala[^\n]*/gi,
        /‚úÖ[^\n]*item[^\n]*/gi,
        /‚úÖ[^\n]*s√≥[^\n]*/gi,
        /‚úÖ[^\n]*inclui[^\n]*/gi
    ];
    
    let substitucaoFeita = false;
    for (const padrao of padroesBagagem) {
        if (padrao.test(resultado)) {
            resultado = resultado.replace(padrao, `‚úÖ ${bagagemCorreta}`);
            substitucaoFeita = true;
            break;
        }
    }
    
    // Se n√£o encontrou, adicionar ap√≥s valor
    if (!substitucaoFeita) {
        resultado = resultado.replace(/(üí∞[^\n]+)/, `$1\n‚úÖ ${bagagemCorreta}`);
    }
    
    return resultado;
}

function corrigirTiposVooFor√ßado(texto) {
    let resultado = texto;
    
    // Corre√ß√µes de tipos de voo - FOR√áADAS
    const correcoes = [
        { pattern: /\(?Uma escala\)?/gi, replacement: '(com conex√£o)' },
        { pattern: /\(?Duas escalas\)?/gi, replacement: '(com m√∫ltiplas conex√µes)' },
        { pattern: /\(?Direto\)?/gi, replacement: '(voo direto)' },
        { pattern: /\(?Voo direto\)?/gi, replacement: '(voo direto)' },
        { pattern: /\(voo\s+voo direto\)/gi, replacement: '(voo direto)' }
    ];
    
    for (const { pattern, replacement } of correcoes) {
        resultado = resultado.replace(pattern, replacement);
    }
    
    return resultado;
}

function corrigirReembolsoFor√ßado(texto) {
    let resultado = texto;
    
    // Padr√µes de reembolso para corrigir
    const padroes = [
        /üè∑Ô∏è\s*Tarifa\s+n√£o\s+reembols√°vel/gi,
        /üè∑Ô∏è\s*Tarifa\s+reembols√°vel/gi,
        /üè∑Ô∏è\s*N√£o\s+reembols√°vel/gi,
        /üè∑Ô∏è\s*Reembols√°vel/gi
    ];
    
    // Detectar se √© reembols√°vel no texto original
    const ehReembolsavel = /reembols√°vel(?!\s*n√£o)/i.test(texto) && !/n√£o\s+reembols√°vel/i.test(texto);
    
    const reembolsoCorreto = ehReembolsavel 
        ? 'üè∑Ô∏è Reembols√°vel conforme regras do bilhete'
        : 'üè∑Ô∏è N√£o reembols√°vel';
    
    // Aplicar corre√ß√£o
    for (const padrao of padroes) {
        resultado = resultado.replace(padrao, reembolsoCorreto);
    }
    
    return resultado;
}

function aplicarParcelamentoFor√ßado(texto, parcelamento) {
    const numParcelas = parseInt(parcelamento);
    if (!numParcelas) return texto;
    
    // Encontrar valor para calcular parcelas
    const matchValor = texto.match(/R\$\s*([\d.,]+)/);
    if (matchValor) {
        const valor = matchValor[1];
        const valorNum = parseFloat(valor.replace(/\./g, '').replace(',', '.'));
        const valorParcela = (valorNum / numParcelas).toFixed(2).replace('.', ',');
        
        const linhaParcelamento = `üí≥ ${numParcelas}x de R$ ${valorParcela} s/ juros no cart√£o`;
        
        // Adicionar ap√≥s valor
        return texto.replace(/(üí∞[^\n]+)/, `$1\n${linhaParcelamento}`);
    }
    
    return texto;
}

function garantirVersaoCorreta(texto) {
    // Remover vers√µes antigas
    let resultado = texto.replace(/\(v[\d.]+\)/g, '');
    resultado = resultado.replace(/Valores sujeitos a confirma√ß√£o e disponibilidade.*$/m, '');
    
    // Adicionar vers√£o correta
    const versaoCorreta = `Valores sujeitos a confirma√ß√£o e disponibilidade (v${SYSTEM_CONFIG.VERSION})`;
    
    if (!resultado.includes(versaoCorreta)) {
        resultado = resultado.trim() + '\n\n' + versaoCorreta;
    }
    
    return resultado;
}

function limpezaFinal(texto) {
    let resultado = texto;
    
    // Remover linhas vazias extras
    resultado = resultado.replace(/\n{3,}/g, '\n\n');
    
    // Remover espa√ßos no final das linhas
    resultado = resultado.split('\n').map(linha => linha.trimEnd()).join('\n');
    
    // Garantir separador correto
    resultado = resultado.replace(/\n--\n/g, '\n--\n');
    
    return resultado.trim();
}

// ================================================================================
// üîç DETEC√á√ÉO B√ÅSICA
// ================================================================================

function detectarDadosBasicos(conteudo) {
    const dados = {
        passageiros: null,
        valor: null,
        destino: null,
        ehInternacional: false,
        temBagagem: false
    };
    
    // Detectar passageiros
    const matchPassageiros = conteudo.match(/(\d+)\s*adultos?\s*(?:e\s*(\d+)\s*crian√ßas?)?/i);
    if (matchPassageiros) {
        dados.passageiros = {
            adultos: parseInt(matchPassageiros[1]),
            criancas: parseInt(matchPassageiros[2]) || 0
        };
    }
    
    // Detectar valor
    const matchValor = conteudo.match(/R\$\s*([\d.,]+)/);
    if (matchValor) {
        dados.valor = matchValor[1];
    }
    
    // Detectar internacional
    dados.ehInternacional = /iberia|tap|lufthansa|classe econ√¥mica|lisboa|orlando|madrid/i.test(conteudo);
    
    // Detectar bagagem
    dados.temBagagem = /com bagagem|bagagem despachada|classe econ√¥mica/i.test(conteudo);
    
    return dados;
}

function detectarTipo(conteudo, tipos) {
    // L√≥gica simples de detec√ß√£o
    if (tipos.includes('Hotel')) return 'HOTEIS_MULTIPLAS';
    if (tipos.includes('Cruzeiro')) return 'CRUZEIRO';
    if (tipos.includes('Multitrecho')) return 'MULTITRECHO';
    
    // Detectar por conte√∫do
    if (/hotel|pousada|resort/i.test(conteudo) && !/aeroporto|voo/i.test(conteudo)) {
        return 'HOTEIS_MULTIPLAS';
    }
    
    return 'AEREO_SIMPLES'; // Default
}

// ================================================================================
// üß† PROCESSAMENTO COM IA
// ================================================================================

async function processarComIA(conteudo, tipo) {
    const prompt = `Formate este or√ßamento de viagem para WhatsApp seguindo o padr√£o CVC.

TEXTO:
${conteudo}

REGRAS:
1. T√≠tulo: *Companhia - Origem ‚úà Destino*
2. Formato de data: DD/MM
3. Separador ida/volta: --
4. Valor: üí∞ R$ XXX para XXX
5. Bagagem: ‚úÖ (descri√ß√£o)
6. Reembolso: üè∑Ô∏è (condi√ß√£o)
7. Final: Valores sujeitos a confirma√ß√£o e disponibilidade (v4.01)

Use APENAS informa√ß√µes do texto fornecido.`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            model: 'gpt-4o-mini',
            messages: [{ role: 'user', content: prompt }],
            temperature: 0.1,
            max_tokens: 1500
        })
    });
    
    if (!response.ok) {
        throw new Error(`OpenAI erro ${response.status}`);
    }
    
    const data = await response.json();
    return data.choices[0].message.content;
}

// ================================================================================
// üìã TEMPLATE B√ÅSICO DE FALLBACK
// ================================================================================

function gerarTemplateBasico(conteudo, dados, tipo) {
    // Template b√°sico quando IA n√£o est√° dispon√≠vel
    return `*Companhia - Origem ‚úà Destino*
Data - Aeroporto Hora / Aeroporto Hora (tipo voo)
--
Data - Aeroporto Hora / Aeroporto Hora (tipo voo)

üí∞ R$ ${dados.valor || '0,00'} para passageiros
‚úÖ Informa√ß√µes de bagagem
üè∑Ô∏è Condi√ß√µes de reembolso

Valores sujeitos a confirma√ß√£o e disponibilidade (v${SYSTEM_CONFIG.VERSION})`;
}

// ================================================================================
// üîß UTILIT√ÅRIOS
// ================================================================================

function getIAStatus(iaUsada) {
    const status = {
        'gpt': '‚úÖ OpenAI GPT-4o-mini usado com sucesso',
        'claude': '‚úÖ Anthropic Claude usado com sucesso', 
        'fallback': '‚ö†Ô∏è IA falhou, template b√°sico aplicado',
        'none': '‚ö†Ô∏è IA n√£o configurada, template b√°sico usado'
    };
    
    return status[iaUsada] || '‚ùì Status desconhecido';
}

function generateRequestId() {
    return Math.random().toString(36).substr(2, 9);
}

function setupSecurityHeaders(res) {
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    res.setHeader('Content-Type', 'application/json');
}

function getSystemStatus() {
    return {
        status: 'operational',
        version: SYSTEM_CONFIG.VERSION,
        sistema: SYSTEM_CONFIG.SISTEMA,
        correcoes_forcadas: [
            'datas (remo√ß√£o dias da semana)',
            'aeroportos (GRU ‚Üí Guarulhos)',
            'passageiros (formato CVC)',
            'bagagem (detec√ß√£o internacional)',
            'tipos de voo (padroniza√ß√£o)',
            'reembolso (formato padr√£o)',
            'vers√£o (v4.01)'
        ]
    };
}

// ================================================================================
// üìã LOG DE INICIALIZA√á√ÉO
// ================================================================================

console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
console.log('‚ïë            CVC ITAQUA v4.01 - SISTEMA H√çBRIDO                 ‚ïë');
console.log('‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£');
console.log('‚ïë üéØ IA gera estrutura + Processadores corrigem TUDO            ‚ïë');
console.log('‚ïë üîß Corre√ß√µes FOR√áADAS sempre aplicadas                        ‚ïë');
console.log('‚ïë üìÖ Datas: remove dias da semana                               ‚ïë');
console.log('‚ïë ‚úàÔ∏è Aeroportos: GRU ‚Üí Guarulhos                                ‚ïë');
console.log('‚ïë üë• Passageiros: formato CVC (04 adultos)                      ‚ïë');
console.log('‚ïë üéí Bagagem: detecta internacional                             ‚ïë');
console.log('‚ïë üõ´ Tipos: Uma escala ‚Üí (com conex√£o)                          ‚ïë');
console.log('‚ïë üè∑Ô∏è Reembolso: formato padronizado                             ‚ïë');
console.log('‚ïë üìå Vers√£o: sempre v4.01                                       ‚ïë');
console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
console.log(`üöÄ Sistema H√≠brido v${SYSTEM_CONFIG.VERSION} - CORRE√á√ïES GARANTIDAS!`);
