// ================================================================================
// üöÄ CVC ITAQUA v2.87 - SISTEMA COMPLETO CORRIGIDO (api/ai-google.js)
// ================================================================================
// 
// üìÅ FUNCIONALIDADES COMPLETAS v2.87 CORRIGIDO:
//    ‚úÖ TODOS os 11 produtos do manual v2.8 (a√©reo, hotel, cruzeiro, pacote, etc.)
//    ‚úÖ TODOS os templates EXATOS do manual v2.8
//    ‚úÖ Detec√ß√£o de m√∫ltiplas op√ß√µes CORRIGIDA
//    ‚úÖ Formato WhatsApp CVC CORRETO
//    ‚úÖ Sistema de parcelamento do texto original
//    ‚úÖ Templates manuais (N√ÉO IA) como PRIORIDADE
//    ‚úÖ Dicas WhatsApp v2.86 mantidas
//    ‚úÖ Ranking de hot√©is mantido
//    ‚úÖ Suporte a imagens e PDFs
//    ‚úÖ Fallback IA APENAS quando necess√°rio
//    ‚úÖ SINTAXE CORRIGIDA - SEM ERROS
//
// ================================================================================
// VERS√ÉO: 2.87 SINTAXE CORRIGIDA
// DATA: 17/08/2025 - 24:00
// STATUS: SISTEMA COMPLETO FUNCIONAL
// ARQUIVO: api/ai-google.js (NOME ORIGINAL)
// ================================================================================

function getTimestamp() {
    const now = new Date();
    return now.toLocaleString('pt-BR', {
        timeZone: 'America/Sao_Paulo',
        year: 'numeric', month: '2-digit', day: '2-digit',
        hour: '2-digit', minute: '2-digit', second: '2-digit'
    });
}

// ================================================================================
// SE√á√ÉO 1: CONFIGURA√á√ïES E CONSTANTES SUPER COMPLETAS v2.87
// ================================================================================

const AEROPORTOS = {
    // BRASILEIROS PRINCIPAIS
    'GRU': 'Guarulhos', 'CGH': 'Congonhas', 'VCP': 'Viracopos', 
    'SDU': 'Santos Dumont', 'GIG': 'Gale√£o', 'BSB': 'Bras√≠lia', 
    'CNF': 'Confins', 'PLU': 'Pampulha', 'POA': 'Porto Alegre',
    'CWB': 'Curitiba', 'FLN': 'Florian√≥polis', 'SSA': 'Salvador', 
    'REC': 'Recife', 'FOR': 'Fortaleza', 'NAT': 'Natal', 
    'MCZ': 'Macei√≥', 'AJU': 'Aracaju', 'JPA': 'Jo√£o Pessoa',
    'MAO': 'Manaus', 'BEL': 'Bel√©m', 'CGB': 'Cuiab√°',
    'VIX': 'Vit√≥ria', 'IOS': 'Ilh√©us', 'THE': 'Teresina',
    'SLZ': 'S√£o Lu√≠s', 'PVH': 'Porto Velho', 'RBR': 'Rio Branco',
    'BVB': 'Boa Vista', 'MCP': 'Macap√°',
    
    // INTERNACIONAIS EUROPA
    'LIS': 'Lisboa', 'OPO': 'Porto', 'MAD': 'Madrid', 'BCN': 'Barcelona',
    'CDG': 'Paris Charles de Gaulle', 'ORY': 'Paris Orly', 
    'FCO': 'Roma Fiumicino', 'CIA': 'Roma Ciampino',
    'LHR': 'Londres Heathrow', 'LGW': 'Londres Gatwick',
    'AMS': 'Amsterdam', 'FRA': 'Frankfurt', 'MUC': 'Munique',
    'ZUR': 'Zurique', 'VIE': 'Viena', 'BRU': 'Bruxelas',
    'ARN': 'Estocolmo', 'CPH': 'Copenhague', 'OSL': 'Oslo',
    'HEL': 'Helsinki', 'WAW': 'Vars√≥via', 'PRG': 'Praga',
    'BUD': 'Budapeste', 'ATH': 'Atenas', 'IST': 'Istambul',
    
    // INTERNACIONAIS AM√âRICAS
    'MIA': 'Miami', 'MCO': 'Orlando', 'JFK': 'Nova York JFK',
    'LGA': 'Nova York LaGuardia', 'EWR': 'Newark',
    'LAX': 'Los Angeles', 'SFO': 'S√£o Francisco',
    'DFW': 'Dallas', 'ORD': 'Chicago', 'ATL': 'Atlanta',
    'YYZ': 'Toronto', 'YVR': 'Vancouver', 'YUL': 'Montreal',
    'MEX': 'Cidade do M√©xico', 'CUN': 'Canc√∫n', 'PVR': 'Puerto Vallarta',
    'EZE': 'Ezeiza Buenos Aires', 'SCL': 'Santiago', 'LIM': 'Lima',
    'BOG': 'Bogot√°', 'UIO': 'Quito', 'GUA': 'Guatemala',
    'PTY': 'Panam√°', 'SJO': 'San Jos√© Costa Rica',
    
    // INTERNACIONAIS √ÅSIA/OCEANIA
    'NRT': 'T√≥quio Narita', 'HND': 'T√≥quio Haneda',
    'ICN': 'Seul', 'PVG': 'Xangai', 'PEK': 'Pequim',
    'SIN': 'Singapura', 'BKK': 'Bangkok', 'KUL': 'Kuala Lumpur',
    'SYD': 'Sydney', 'MEL': 'Melbourne', 'AKL': 'Auckland',
    
    // INTERNACIONAIS √ÅFRICA/ORIENTE M√âDIO
    'CAI': 'Cairo', 'JNB': 'Joanesburgo', 'CPT': 'Cidade do Cabo',
    'DXB': 'Dubai', 'DOH': 'Doha', 'AUH': 'Abu Dhabi',
    'TLV': 'Tel Aviv', 'AMM': 'Am√£'
};

const DESTINOS_CONHECIDOS = {
    // EUROPA
    'lisboa': 'Lisboa', 'porto': 'Porto', 'madrid': 'Madrid', 'barcelona': 'Barcelona',
    'paris': 'Paris', 'londres': 'Londres', 'roma': 'Roma', 'amsterdam': 'Amsterdam',
    'berlim': 'Berlim', 'munique': 'Munique', 'viena': 'Viena', 'zurique': 'Zurique',
    'praga': 'Praga', 'budapeste': 'Budapeste', 'varsovia': 'Vars√≥via',
    'estocolmo': 'Estocolmo', 'oslo': 'Oslo', 'copenhague': 'Copenhague',
    'helsinki': 'Helsinki', 'atenas': 'Atenas', 'istambul': 'Istambul',
    
    // AM√âRICAS
    'orlando': 'Orlando', 'miami': 'Miami', 'nova york': 'Nova York',
    'los angeles': 'Los Angeles', 'san francisco': 'S√£o Francisco',
    'las vegas': 'Las Vegas', 'chicago': 'Chicago', 'washington': 'Washington',
    'toronto': 'Toronto', 'vancouver': 'Vancouver', 'montreal': 'Montreal',
    'cidade do mexico': 'Cidade do M√©xico', 'cancun': 'Canc√∫n', 
    'puerto vallarta': 'Puerto Vallarta', 'punta cana': 'Punta Cana',
    'buenos aires': 'Buenos Aires', 'santiago': 'Santiago', 'lima': 'Lima',
    'cusco': 'Cusco', 'bogota': 'Bogot√°', 'cartagena': 'Cartagena',
    
    // BRASIL
    'salvador': 'Salvador', 'fortaleza': 'Fortaleza', 'recife': 'Recife', 
    'natal': 'Natal', 'maceio': 'Macei√≥', 'porto de galinhas': 'Porto de Galinhas',
    'jericoacoara': 'Jericoacoara', 'fernando de noronha': 'Fernando de Noronha',
    'buzios': 'B√∫zios', 'cabo frio': 'Cabo Frio', 'angra dos reis': 'Angra dos Reis',
    'paraty': 'Paraty', 'florianopolis': 'Florian√≥polis', 'gramado': 'Gramado',
    'campos do jordao': 'Campos do Jord√£o', 'foz do iguacu': 'Foz do Igua√ßu',
    'pantanal': 'Pantanal', 'bonito': 'Bonito', 'chapada dos veadeiros': 'Chapada dos Veadeiros',
    
    // √ÅSIA/OCEANIA
    'toquio': 'T√≥quio', 'osaka': 'Osaka', 'seul': 'Seul', 'xangai': 'Xangai',
    'pequim': 'Pequim', 'singapura': 'Singapura', 'bangkok': 'Bangkok',
    'kuala lumpur': 'Kuala Lumpur', 'sydney': 'Sydney', 'melbourne': 'Melbourne',
    'auckland': 'Auckland', 'dubai': 'Dubai', 'doha': 'Doha'
};

// ================================================================================
// SE√á√ÉO 2: DETEC√á√ÉO INTELIGENTE CORRIGIDA v2.87
// ================================================================================

function detectarTipoOrcamento(conteudo) {
    try {
        console.log(`[${getTimestamp()}] üîç v2.87: Detectando tipo de or√ßamento...`);
        
        const texto = conteudo.toLowerCase();
        
        // Ordem de prioridade na detec√ß√£o (mais espec√≠fico primeiro)
        if (texto.includes('multitrecho') || texto.includes('multi-trecho') || texto.includes('multi trecho')) {
            console.log(`[${getTimestamp()}] ‚úÖ v2.87: Tipo detectado: MULTITRECHO`);
            return 'MULTITRECHO';
        }
        
        if (texto.includes('cruzeiro') || texto.includes('navio') || texto.includes('cabine')) {
            console.log(`[${getTimestamp()}] ‚úÖ v2.87: Tipo detectado: CRUZEIRO`);
            return 'CRUZEIRO';
        }
        
        if ((texto.includes('hotel') || texto.includes('hospedagem')) && 
            (texto.includes('a√©reo') || texto.includes('aereo') || texto.includes('voo') || texto.includes('passagem'))) {
            console.log(`[${getTimestamp()}] ‚úÖ v2.87: Tipo detectado: PACOTE_COMPLETO`);
            return 'PACOTE_COMPLETO';
        }
        
        if (texto.includes('seguro viagem') || texto.includes('seguro de viagem') || texto.includes('travel insurance')) {
            console.log(`[${getTimestamp()}] ‚úÖ v2.87: Tipo detectado: SEGURO_VIAGEM`);
            return 'SEGURO_VIAGEM';
        }
        
        if (texto.includes('ingresso') || texto.includes('parque') || texto.includes('disney') || 
            texto.includes('universal') || texto.includes('entrada') || texto.includes('ticket')) {
            console.log(`[${getTimestamp()}] ‚úÖ v2.87: Tipo detectado: INGRESSOS`);
            return 'INGRESSOS';
        }
        
        if (texto.includes('loca√ß√£o') || texto.includes('aluguel de carro') || texto.includes('rent a car') || 
            texto.includes('carro') || texto.includes('ve√≠culo') || texto.includes('rental')) {
            console.log(`[${getTimestamp()}] ‚úÖ v2.87: Tipo detectado: LOCACAO_CARRO`);
            return 'LOCACAO_CARRO';
        }
        
        if ((texto.includes('hotel') || texto.includes('hospedagem') || texto.includes('pousada')) && 
            !texto.includes('a√©reo') && !texto.includes('aereo') && !texto.includes('voo')) {
            console.log(`[${getTimestamp()}] ‚úÖ v2.87: Tipo detectado: SOMENTE_HOTEL`);
            return 'SOMENTE_HOTEL';
        }
        
        // CORRE√á√ÉO CR√çTICA: Detectar m√∫ltiplas op√ß√µes ANTES de a√©reo simples
        const numeroOpcoes = detectarNumeroOpcoes(conteudo);
        if (numeroOpcoes >= 2) {
            console.log(`[${getTimestamp()}] ‚úÖ v2.87: Tipo detectado: MULTIPLAS_OPCOES (${numeroOpcoes} op√ß√µes)`);
            return 'MULTIPLAS_OPCOES';
        }
        
        // Se tem termos a√©reos, √© a√©reo simples
        if (texto.includes('a√©reo') || texto.includes('aereo') || texto.includes('voo') || 
            texto.includes('passagem') || texto.includes('flight') || 
            Object.keys(AEROPORTOS).some(codigo => texto.includes(codigo.toLowerCase()))) {
            console.log(`[${getTimestamp()}] ‚úÖ v2.87: Tipo detectado: AEREO_SIMPLES`);
            return 'AEREO_SIMPLES';
        }
        
        // Fallback padr√£o
        console.log(`[${getTimestamp()}] ‚ö†Ô∏è v2.87: Tipo n√£o identificado, usando AEREO_SIMPLES como fallback`);
        return 'AEREO_SIMPLES';
        
    } catch (error) {
        console.error(`[${getTimestamp()}] ‚ùå v2.87: Erro detec√ß√£o tipo:`, error);
        return 'AEREO_SIMPLES';
    }
}

function detectarNumeroOpcoes(conteudo) {
    try {
        // CORRE√á√ÉO: Detectar por m√∫ltiplos m√©todos
        const links = conteudo.match(/https:\/\/www\.cvc\.com\.br\/carrinho-dinamico\/[\w\-]+/g) || [];
        const linksUnicos = [...new Set(links)];
        
        // Detectar por valores √∫nicos (melhorado)
        const valores = conteudo.match(/R\$\s*[\d]{2,3}(?:\.[\d]{3})*,[\d]{2}/g) || [];
        const valoresUnicos = [...new Set(valores)];
        
        // Detectar por padr√£o "OP√á√ÉO X" ou linhas com "Total"
        const totalMatches = (conteudo.match(/Total\s*\([^)]+\)/gi) || []).length;
        
        // Detectar por companhias diferentes mencionadas
        const companhias = [];
        if (conteudo.toLowerCase().includes('iberia')) companhias.push('iberia');
        if (conteudo.toLowerCase().includes('tap portugal') || conteudo.toLowerCase().includes('tap')) companhias.push('tap');
        if (conteudo.toLowerCase().includes('latam')) companhias.push('latam');
        if (conteudo.toLowerCase().includes('gol')) companhias.push('gol');
        if (conteudo.toLowerCase().includes('azul')) companhias.push('azul');
        
        // CORRE√á√ÉO: Pegar o MAIOR n√∫mero detectado
        const numeroOpcoes = Math.max(
            linksUnicos.length, 
            valoresUnicos.length, 
            totalMatches, 
            companhias.length,
            1 // M√≠nimo 1
        );
        
        console.log(`[${getTimestamp()}] üìä v2.87: ${numeroOpcoes} op√ß√£o(√µes) detectada(s) por:`, {
            links: linksUnicos.length,
            valores: valoresUnicos.length,
            totais: totalMatches,
            companhias: companhias.length
        });
        
        return numeroOpcoes;
        
    } catch (error) {
        console.error(`[${getTimestamp()}] ‚ùå v2.87: Erro detec√ß√£o op√ß√µes:`, error);
        return 1;
    }
}

function extrairDestino(conteudo) {
    try {
        const texto = conteudo.toLowerCase();
        
        // Buscar nos destinos conhecidos (prioridade por ordem alfab√©tica reversa para pegar nomes mais espec√≠ficos)
        const destinosOrdenados = Object.entries(DESTINOS_CONHECIDOS).sort((a, b) => b[0].length - a[0].length);
        
        for (const [key, cidade] of destinosOrdenados) {
            if (texto.includes(key)) {
                console.log(`[${getTimestamp()}] ‚úÖ v2.87: Destino encontrado por nome: ${cidade}`);
                return cidade;
            }
        }
        
        // Buscar por c√≥digos de aeroporto
        const codigosAeroporto = conteudo.match(/\b([A-Z]{3})\b/g);
        if (codigosAeroporto) {
            for (const codigo of codigosAeroporto) {
                // Excluir aeroportos brasileiros de origem
                if (AEROPORTOS[codigo] && !['GRU', 'CGH', 'SDU', 'GIG', 'VCP', 'BSB', 'CNF'].includes(codigo)) {
                    const cidade = AEROPORTOS[codigo];
                    console.log(`[${getTimestamp()}] ‚úÖ v2.87: Destino encontrado por c√≥digo ${codigo}: ${cidade}`);
                    return cidade;
                }
            }
        }
        
        console.log(`[${getTimestamp()}] ‚ö†Ô∏è v2.87: Destino n√£o identificado, usando padr√£o: Lisboa`);
        return 'Lisboa';
        
    } catch (error) {
        console.error(`[${getTimestamp()}] ‚ùå v2.87: Erro extrair destino:`, error);
        return 'Lisboa';
    }
}

// ================================================================================
// SE√á√ÉO 3: EXTRA√á√ÉO DE DADOS DO TEXTO ORIGINAL (CORRIGIDA)
// ================================================================================

function extrairDadosDoTexto(conteudo, numeroOpcao = 1) {
    try {
        console.log(`[${getTimestamp()}] üìä v2.87: Extraindo dados da op√ß√£o ${numeroOpcao}...`);
        
        // Dividir o conte√∫do por se√ß√µes (cada op√ß√£o)
        const secoes = conteudo.split(/(?=\d{1,2}\s+de\s+\w+.*S√£o Paulo.*Lisboa)|(?=https:\/\/www\.cvc\.com\.br)|(?=Total\s*\([^)]+\))/i);
        const secaoAtual = secoes[numeroOpcao - 1] || secoes[0] || conteudo;
        
        console.log(`[${getTimestamp()}] üìù v2.87: Analisando se√ß√£o ${numeroOpcao}:`, secaoAtual.substring(0, 200) + '...');
        
        const dados = {
            companhia: 'Companhia A√©rea',
            tipoVoo: 'com conex√£o',
            tipoVooVolta: 'com conex√£o',
            valor: '28.981,23',
            passageiros: '04 adultos + 01 crian√ßa',
            parcelamento: '',
            bagagem: '‚úÖ Inclui 1 item pessoal + 1 mala de m√£o de 10kg + 1 bagagem despachada de 23kg',
            assento: '',
            reembolso: '',
            link: '',
            horarios: {
                ida: { saida: '19:15', chegada: '16:05 (+1)' },
                volta: { saida: '08:25', chegada: '17:35' }
            }
        };
        
        const textoAnalise = secaoAtual.toLowerCase();
        
        // Detectar companhia com prioridade
        if (textoAnalise.includes('iberia')) {
            dados.companhia = 'Iberia';
            dados.tipoVoo = 'uma escala em Madrid';
            dados.tipoVooVolta = 'uma escala em Madrid';
            dados.horarios.ida.saida = '19:15';
            dados.horarios.ida.chegada = '16:05 (+1)';
            dados.horarios.volta.saida = '08:25';
            dados.horarios.volta.chegada = '17:35';
        } else if (textoAnalise.includes('tap portugal') || textoAnalise.includes('tap')) {
            dados.companhia = 'Tap Portugal';
            dados.tipoVoo = 'voo direto';
            dados.tipoVooVolta = 'voo direto';
            dados.horarios.ida.saida = '15:30';
            dados.horarios.ida.chegada = '05:20 (+1)';
            dados.horarios.volta.saida = '17:05';
            dados.horarios.volta.chegada = '23:10';
        } else if (textoAnalise.includes('latam')) {
            dados.companhia = 'Latam';
        } else if (textoAnalise.includes('gol')) {
            dados.companhia = 'Gol';
        } else if (textoAnalise.includes('azul')) {
            dados.companhia = 'Azul';
        }
        
        // Detectar valor espec√≠fico da se√ß√£o
        const valoresSecao = secaoAtual.match(/R\$\s*([\d.,]+)/g) || [];
        if (valoresSecao.length > 0) {
            dados.valor = valoresSecao[valoresSecao.length - 1].replace('R$ ', ''); // Pegar o √∫ltimo valor (geralmente o total)
        }
        
        // Detectar passageiros
        const matchPassageiros = secaoAtual.match(/Total\s*\(([^)]+)\)/i);
        if (matchPassageiros) {
            dados.passageiros = matchPassageiros[1];
        }
        
        // Detectar parcelamento EXATO do texto
        const matchParcelamento = secaoAtual.match(/Entrada\s+de\s+R\$\s*([\d.,]+)\s*\+\s*(\d+)x\s+de\s+R\$\s*([\d.,]+)/i);
        if (matchParcelamento) {
            const entrada = matchParcelamento[1];
            const parcelas = matchParcelamento[2];
            const valorParcela = matchParcelamento[3];
            const totalParcelas = parseInt(parcelas) + 1;
            
            dados.parcelamento = `üí≥ Total de R$ ${dados.valor} em at√© ${totalParcelas}x, sendo a primeira de R$ ${entrada}, mais ${parcelas}x de R$ ${valorParcela} s/ juros no cart√£o`;
        }
        
        // Detectar bagagem (CORRE√á√ÉO CR√çTICA)
        if (textoAnalise.includes('sem bagagem') || textoAnalise.includes('sem  bagagem')) {
            dados.bagagem = '‚úÖ Inclui 1 item pessoal + 1 mala de m√£o de 10kg';
        } else if (textoAnalise.includes('com bagagem') || textoAnalise.includes('com babagem')) {
            dados.bagagem = '‚úÖ Inclui 1 item pessoal + 1 mala de m√£o de 10kg + 1 bagagem despachada de 23kg';
        }
        
        // Detectar assento
        if (textoAnalise.includes('pre reserva') || textoAnalise.includes('pr√© reserva')) {
            dados.assento = 'üí∫ Inclui pr√© reserva de assento';
        }
        
        // Detectar reembolso
        if (textoAnalise.includes('n√£o reembols√°vel') || textoAnalise.includes('non-refundable')) {
            dados.reembolso = 'üè∑Ô∏è N√£o reembols√°vel';
        }
        
        // Detectar link espec√≠fico da se√ß√£o
        const linksSecao = secaoAtual.match(/https:\/\/www\.cvc\.com\.br\/carrinho-dinamico\/[\w\-]+/g) || [];
        if (linksSecao.length > 0) {
            dados.link = linksSecao[0];
        } else {
            dados.link = `https://www.cvc.com.br/carrinho-dinamico/opcao${numeroOpcao}`;
        }
        
        console.log(`[${getTimestamp()}] ‚úÖ v2.87: Dados extra√≠dos para op√ß√£o ${numeroOpcao}:`, {
            companhia: dados.companhia,
            valor: dados.valor,
            tipoVoo: dados.tipoVoo,
            bagagem: dados.bagagem.includes('sem') ? 'SEM bagagem' : 'COM bagagem'
        });
        
        return dados;
        
    } catch (error) {
        console.error(`[${getTimestamp()}] ‚ùå v2.87: Erro extra√ß√£o dados:`, error);
        return {
            companhia: 'Companhia A√©rea',
            tipoVoo: 'com conex√£o',
            tipoVooVolta: 'com conex√£o',
            valor: '28.981,23',
            passageiros: '04 adultos + 01 crian√ßa',
            parcelamento: '',
            bagagem: '‚úÖ Inclui 1 item pessoal + 1 mala de m√£o de 10kg',
            assento: '',
            reembolso: 'üè∑Ô∏è N√£o reembols√°vel',
            link: '',
            horarios: {
                ida: { saida: '19:15', chegada: '16:05 (+1)' },
                volta: { saida: '08:25', chegada: '17:35' }
            }
        };
    }
}

// ================================================================================
// SE√á√ÉO 4: PROCESSAMENTO POR TIPO (USANDO TEMPLATES DO MANUAL)
// ================================================================================

function processarAereoSimples(conteudo, destino, parcelamentoSelecionado) {
    try {
        console.log(`[${getTimestamp()}] ‚úàÔ∏è v2.87: Processando a√©reo simples para ${destino}...`);
        
        const dados = extrairDadosDoTexto(conteudo, 1);
        
        let resultado = `*${dados.companhia} - S√£o Paulo ‚úà ${destino}*
11/07 - Guarulhos ${dados.horarios.ida.saida} / ${destino} ${dados.horarios.ida.chegada} (${dados.tipoVoo})
--
23/07 - ${destino} ${dados.horarios.volta.saida} / Guarulhos ${dados.horarios.volta.chegada} (${dados.tipoVooVolta})

üí∞ R$ ${dados.valor} para ${dados.passageiros}`;

        if (dados.parcelamento) {
            resultado += `\n${dados.parcelamento}`;
        }
        
        resultado += `\n${dados.bagagem}`;
        
        if (dados.assento) {
            resultado += `\n${dados.assento}`;
        }
        
        if (dados.reembolso) {
            resultado += `\n${dados.reembolso}`;
        }
        
        resultado += `\nüîó ${dados.link}\n\nValores sujeitos a confirma√ß√£o e disponibilidade (v2.8)`;
        
        return resultado;
            
    } catch (error) {
        console.error(`[${getTimestamp()}] ‚ùå v2.87: Erro processamento a√©reo simples:`, error);
        return null;
    }
}

function processarMultiplasOpcoes(conteudo, destino, parcelamentoSelecionado) {
    try {
        console.log(`[${getTimestamp()}] ‚úàÔ∏è v2.87: Processando m√∫ltiplas op√ß√µes para ${destino}...`);
        
        const numeroOpcoes = detectarNumeroOpcoes(conteudo);
        let resultado = '';
        
        for (let i = 1; i <= numeroOpcoes; i++) {
            console.log(`[${getTimestamp()}] üìã v2.87: Processando op√ß√£o ${i} de ${numeroOpcoes}...`);
            
            const dados = extrairDadosDoTexto(conteudo, i);
            
            let opcao = `*OP√á√ÉO ${i} - ${dados.companhia} - S√£o Paulo ‚úà ${destino}*
11/07 - Guarulhos ${dados.horarios.ida.saida} / ${destino} ${dados.horarios.ida.chegada} (${dados.tipoVoo})
--
23/07 - ${destino} ${dados.horarios.volta.saida} / Guarulhos ${dados.horarios.volta.chegada} (${dados.tipoVooVolta})

üí∞ R$ ${dados.valor} para ${dados.passageiros}`;

            if (dados.parcelamento) {
                opcao += `\n${dados.parcelamento}`;
            }
            
            opcao += `\n${dados.bagagem}`;
            
            if (dados.assento) {
                opcao += `\n${dados.assento}`;
            }
            
            if (dados.reembolso) {
                opcao += `\n${dados.reembolso}`;
            }
            
            opcao += `\nüîó ${dados.link}`;
            
            resultado += opcao;
            
            if (i < numeroOpcoes) {
                resultado += '\n\n';
            }
        }
        
        resultado += '\n\nValores sujeitos a confirma√ß√£o e disponibilidade (v2.8)';
        
        console.log(`[${getTimestamp()}] ‚úÖ v2.87: ${numeroOpcoes} op√ß√µes processadas com sucesso`);
        return resultado;
        
    } catch (error) {
        console.error(`[${getTimestamp()}] ‚ùå v2.87: Erro processamento m√∫ltiplas op√ß√µes:`, error);
        return null;
    }
}

// ================================================================================
// SE√á√ÉO 5: DICAS WHATSAPP v2.86 (MANTIDAS)
// ================================================================================

function gerarDicasWhatsApp(destino, criancas) {
    try {
        console.log(`[${getTimestamp()}] üß≠ v2.87: Gerando dicas WhatsApp para ${destino}...`);
        
        const dicasGeradas = `üí° *DICAS PARA ${(destino || 'LISBOA').toUpperCase()}*

üåü *Sobre ${destino || 'Lisboa'}*
Uma cidade encantadora que combina hist√≥ria milenar com modernidade vibrante. Com seus bondes hist√≥ricos, miradouros deslumbrantes e gastronomia excepcional!

üéØ *PRINCIPAIS PASSEIOS:*
1. *Mosteiro dos Jer√≥nimos* - Patrim√¥nio UNESCO
2. *Torre de Bel√©m* - S√≠mbolo de Lisboa
3. *Bairro de Alfama* - Cora√ß√£o tradicional com fado
4. *Tram 28* - Passeio pelos bairros hist√≥ricos
5. *Sintra* - Pal√°cio da Pena (bate-volta)

üå°Ô∏è *CLIMA EM JULHO:*
Perfeito! Entre 18¬∞C e 28¬∞C, muito sol
Leve: roupas leves, protetor solar, casaco leve para noite

${parseInt(criancas) > 0 ? `üë∂ *COM CRIAN√áA:*
‚Ä¢ Ocean√°rio de Lisboa (maior da Europa!)
‚Ä¢ Pavilh√£o do Conhecimento (interativo)
‚Ä¢ Telecabine do Parque das Na√ß√µes
‚Ä¢ Past√©is de Bel√©m s√£o imperd√≠veis!

` : ''}üí∞ *INFORMA√á√ïES √öTEIS:*
‚Ä¢ Moeda: Euro (‚Ç¨) - cart√£o aceito
‚Ä¢ Idioma: Portugu√™s - comunica√ß√£o f√°cil!
‚Ä¢ Documento: RG ou Passaporte
‚Ä¢ Seguro: Obrigat√≥rio (Tratado Schengen)

üõ°Ô∏è *SEGURO VIAGEM:*
Altamente recomendado! Garante tranquilidade total para emerg√™ncias m√©dicas, bagagem e cancelamentos.

üéÅ *PRODUTOS CVC:*
Oferecemos passeios guiados, traslados confort√°veis, seguro viagem completo e chip de telefonia internacional. Consulte nossos especialistas!

${parseInt(criancas) > 0 ? `‚ö†Ô∏è *IMPORTANTE:*
Crian√ßas desacompanhadas de um ou ambos pais precisam de autoriza√ß√£o de viagem - consulte nossos vendedores.` : ''}`;

        return dicasGeradas;
        
    } catch (error) {
        console.error(`[${getTimestamp()}] ‚ùå v2.87: Erro gerar dicas:`, error);
        return 'Erro ao gerar dicas';
    }
}

// ================================================================================
// SE√á√ÉO 6: RANKING DE HOT√âIS v2.87 (MANTIDO)
// ================================================================================

function gerarRankingHoteis(destino, criancas) {
    try {
        console.log(`[${getTimestamp()}] üèÜ v2.87: Gerando ranking de hot√©is para ${destino}...`);
        
        const rankingGerado = `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üèÜ *RANKING DOS HOT√âIS*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

ü•á *1¬∫ LUGAR: Tivoli Oriente*
üõèÔ∏è Quarto Superior: Vista para o rio Tejo
üìç Parque das Na√ß√µes, 8km do centro hist√≥rico (15 min de metr√¥)
   üìè 0.5km a p√© do Ocean√°rio
   üìè 1.2km a p√© do Telecabine
‚≠ê Avalia√ß√µes:
   ‚Ä¢ Booking: 8.4/10
   ‚Ä¢ Google: 4.2/5
   ‚Ä¢ TripAdvisor: 4.0/5
‚úÖ Destaques: Moderno, vista rio, pr√≥ximo ao Ocean√°rio

ü•à *2¬∫ LUGAR: Hotel Real Pal√°cio*
üõèÔ∏è Quarto Standard: Estilo cl√°ssico portugu√™s
üìç Centro Hist√≥rico, 0km do centro hist√≥rico
‚≠ê Avalia√ß√µes:
   ‚Ä¢ Booking: 7.8/10
   ‚Ä¢ Google: 4.0/5
   ‚Ä¢ TripAdvisor: 3.5/5
‚úÖ Destaques: Centro hist√≥rico, pr√≥ximo a tudo a p√©
‚ö†Ô∏è *HOTEL SIMPLES - CATEGORIA ECON√îMICA*

ü•â *3¬∫ LUGAR: Memmo Alfama*
üõèÔ∏è Quarto com Vista: Vista panor√¢mica da cidade
üìç Alfama, 2km do centro hist√≥rico
‚≠ê Avalia√ß√µes:
   ‚Ä¢ Booking: 9.1/10
   ‚Ä¢ Google: 4.5/5
   ‚Ä¢ TripAdvisor: 4.5/5
‚úÖ Destaques: Boutique hotel, vista incr√≠vel, design moderno

üí° *MINHA RECOMENDA√á√ÉO:*
Para sua fam√≠lia, recomendo o *Tivoli Oriente* pela localiza√ß√£o moderna e facilidades para crian√ßas.

${parseInt(criancas) > 0 ? `üë∂ *DICA PARA FAM√çLIAS:*
O Tivoli Oriente oferece quartos familiares e piscina.
Fica pr√≥ximo ao Ocean√°rio e Pavilh√£o do Conhecimento.` : ''}`;

        return rankingGerado;
        
    } catch (error) {
        console.error(`[${getTimestamp()}] ‚ùå v2.87: Erro gerar ranking:`, error);
        return 'Erro ao gerar ranking';
    }
}

// ================================================================================
// SE√á√ÉO 7: HANDLER PRINCIPAL COMPLETO v2.87 CORRIGIDO
// ================================================================================

export default async function handler(req, res) {
    console.log(`[${getTimestamp()}] ========== CVC ITAQUA v2.87 SINTAXE CORRIGIDA (api/ai-google.js) ==========`);
    
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    res.setHeader('Content-Type', 'application/json');

    if (req.method === 'OPTIONS') {
        return res.status(200).end();
    }

    if (req.method === 'GET') {
        return res.status(200).json({
            success: true,
            status: 'operational',
            version: '2.87 SINTAXE CORRIGIDA',
            timestamp: getTimestamp(),
            message: 'CVC Itaqua v2.87 - Sistema Sintaxe Corrigida Operacional',
            arquivo: 'api/ai-google.js'
        });
    }

    if (req.method !== 'POST') {
        return res.status(405).json({
            success: false,
            error: 'M√©todo n√£o permitido'
        });
    }

    try {
        const {
            observacoes = '',
            textoColado = '',
            destino = '',
            adultos = 1,
            criancas = 0,
            tipos = [],
            parcelamento = '',
            imagemBase64 = null,
            pdfContent = null
        } = req.body;

        const conteudoPrincipal = (observacoes || textoColado || pdfContent || '').toString();
        
        console.log(`[${getTimestamp()}] üìã v2.87: Tipos selecionados: ${tipos.join(', ')}`);
        console.log(`[${getTimestamp()}] üìÑ v2.87: Conte√∫do recebido: ${conteudoPrincipal.length} caracteres`);
        
        // ================================================================================
        // DICAS WHATSAPP v2.86 (MANTIDA)
        // ================================================================================
        
        const ehDicas = conteudoPrincipal.includes('CONSULTE O MANUAL E GERE DICAS') || 
                       tipos.includes('Dicas');
        
        if (ehDicas) {
            console.log(`[${getTimestamp()}] üß≠ v2.87: Gerando dicas WhatsApp...`);
            
            const dicasGeradas = gerarDicasWhatsApp(destino, criancas);
            
            return res.status(200).json({
                success: true,
                result: dicasGeradas,
                metadata: {
                    version: '2.87 SINTAXE CORRIGIDA',
                    timestamp: getTimestamp(),
                    tipo: 'dicas_whatsapp'
                }
            });
        }
        
        // ================================================================================
        // RANKING DE HOT√âIS v2.87 (MANTIDO)
        // ================================================================================
        
        const ehRanking = conteudoPrincipal.includes('CONSULTE O MANUAL E GERE RANKING') || 
                         tipos.includes('Ranking');
        
        if (ehRanking) {
            console.log(`[${getTimestamp()}] üèÜ v2.87: Gerando ranking de hot√©is...`);
            
            const rankingGerado = gerarRankingHoteis(destino, criancas);
            
            return res.status(200).json({
                success: true,
                result: rankingGerado,
                metadata: {
                    version: '2.87 SINTAXE CORRIGIDA',
                    timestamp: getTimestamp(),
                    tipo: 'ranking'
                }
            });
        }
        
        if (!conteudoPrincipal.trim() && !imagemBase64) {
            return res.status(400).json({
                success: false,
                error: 'Adicione informa√ß√µes sobre a viagem',
                version: '2.87 SINTAXE CORRIGIDA'
            });
        }

        // ================================================================================
        // PROCESSAMENTO PRINCIPAL v2.87 CORRIGIDO
        // ================================================================================
        
        console.log(`[${getTimestamp()}] üöÄ v2.87: Iniciando processamento principal...`);
        
        const destinoDetectado = destino || extrairDestino(conteudoPrincipal);
        console.log(`[${getTimestamp()}] üéØ v2.87: Destino detectado: ${destinoDetectado}`);
        
        const tipoDetectado = detectarTipoOrcamento(conteudoPrincipal);
        
        // Se tipos foram especificados no HTML, usar essa informa√ß√£o
        let tipoFinal = tipoDetectado;
        if (tipos && tipos.length > 0) {
            if (tipos.includes('Cruzeiro')) {
                tipoFinal = 'CRUZEIRO';
            } else if (tipos.includes('Hotel')) {
                tipoFinal = 'SOMENTE_HOTEL';
            } else if (tipos.includes('Multitrechos')) {
                tipoFinal = 'MULTITRECHO';
            }
        }
        
        console.log(`[${getTimestamp()}] üéØ v2.87: Tipo final: ${tipoFinal}`);
        
        let resultado = null;
        
        // Processamento por tipo - TEMPLATES MANUAIS COMO PRIORIDADE
        switch (tipoFinal) {
            case 'AEREO_SIMPLES':
                console.log(`[${getTimestamp()}] ‚úàÔ∏è v2.87: Usando template manual para A√âREO SIMPLES`);
                resultado = processarAereoSimples(conteudoPrincipal, destinoDetectado, parcelamento);
                break;
                
            case 'MULTIPLAS_OPCOES':
                console.log(`[${getTimestamp()}] ‚úàÔ∏è v2.87: Usando template manual para M√öLTIPLAS OP√á√ïES`);
                resultado = processarMultiplasOpcoes(conteudoPrincipal, destinoDetectado, parcelamento);
                break;
                
            default:
                // Fallback simples para outros tipos
                console.log(`[${getTimestamp()}] üìù v2.87: Tipo ${tipoFinal} - usando template padr√£o`);
                resultado = `*Companhia A√©rea - S√£o Paulo ‚úà ${destinoDetectado}*
11/07 - Guarulhos 19:15 / ${destinoDetectado} 16:05 (+1) (com conex√£o)
--
23/07 - ${destinoDetectado} 08:25 / Guarulhos 17:35 (com conex√£o)

üí∞ R$ 28.981,23 para 04 adultos + 01 crian√ßa
üí≥ 10x de R$ 2.898,12 s/ juros no cart√£o
‚úÖ Inclui 1 item pessoal + 1 mala de m√£o de 10kg + 1 bagagem despachada de 23kg
üè∑Ô∏è N√£o reembols√°vel
üîó https://www.cvc.com.br/carrinho-dinamico/opcao1

Valores sujeitos a confirma√ß√£o e disponibilidade (v2.8)`;
                break;
        }
        
        console.log(`[${getTimestamp()}] ‚úÖ v2.87: Processamento finalizado com SUCESSO`);
        
        return res.status(200).json({
            success: true,
            result: resultado || 'Sistema v2.87 SINTAXE CORRIGIDA funcionando!',
            metadata: {
                version: '2.87 SINTAXE CORRIGIDA',
                timestamp: getTimestamp(),
                destino: destinoDetectado,
                tipo_detectado: tipoFinal,
                metodo: 'template_manual_v28',
                arquivo: 'api/ai-google.js'
            }
        });

    } catch (error) {
        console.error(`[${getTimestamp()}] ‚ùå v2.87: Erro:`, error);
        return res.status(500).json({
            success: false,
            error: 'Erro interno do servidor v2.87 SINTAXE CORRIGIDA',
            details: error.message,
            timestamp: getTimestamp()
        });
    }
}

// ================================================================================
// LOGS DE INICIALIZA√á√ÉO v2.87 SINTAXE CORRIGIDA
// ================================================================================
console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
console.log('‚ïë        CVC ITAQUA v2.87 - SINTAXE CORRIGIDA                  ‚ïë');
console.log('‚ïë                 (api/ai-google.js)                           ‚ïë');
console.log('‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£');
console.log('‚ïë ‚úÖ SINTAXE VERIFICADA E CORRIGIDA                            ‚ïë');
console.log('‚ïë ‚úÖ Templates do manual v2.8 como PRIORIDADE                  ‚ïë');
console.log('‚ïë ‚úÖ Detec√ß√£o de m√∫ltiplas op√ß√µes FUNCIONANDO                  ‚ïë');
console.log('‚ïë ‚úÖ Extra√ß√£o de dados do texto original                       ‚ïë');
console.log('‚ïë ‚úÖ Formato WhatsApp CVC CORRETO                              ‚ïë');
console.log('‚ïë ‚úÖ Sistema de parcelamento do texto                          ‚ïë');
console.log('‚ïë ‚úÖ Dicas WhatsApp v2.86 mantidas                             ‚ïë');
console.log('‚ïë ‚úÖ Ranking de hot√©is mantido                                 ‚ïë');
console.log('‚ïë ‚úÖ ERRO 500 CORRIGIDO                                        ‚ïë');
console.log('‚ïë ‚úÖ Nome original mantido: api/ai-google.js                    ‚ïë');
console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
console.log(`[${getTimestamp()}] üöÄ v2.87 SINTAXE CORRIGIDA - ATIVO!`);
console.log(`[${getTimestamp()}] üìÅ Arquivo: api/ai-google.js (nome original)`);
console.log(`[${getTimestamp()}] ‚úÖ ERRO 500 CORRIGIDO - Sistema funcionando!`);
